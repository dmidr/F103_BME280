
F103_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003274  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800410c  0800410c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800410c  0800410c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800410c  0800410c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000014  08004128  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08004128  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e29d  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002134  00000000  00000000  0002e2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00030410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee4  00000000  00000000  000322d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001114c  00000000  00000000  0004a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf67  00000000  00000000  0005b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7267  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  000e72b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003368 	.word	0x08003368

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003368 	.word	0x08003368

0800014c <zeroSoftPWM>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void zeroSoftPWM(uint32_t softpwmbuffer[])
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e008      	b.n	800016c <zeroSoftPWM+0x20>
	{
			softpwmbuffer[i]=0;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	009b      	lsls	r3, r3, #2
 800015e:	687a      	ldr	r2, [r7, #4]
 8000160:	4413      	add	r3, r2
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	3301      	adds	r3, #1
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	2b63      	cmp	r3, #99	; 0x63
 8000170:	d9f3      	bls.n	800015a <zeroSoftPWM+0xe>
	}
}
 8000172:	bf00      	nop
 8000174:	bf00      	nop
 8000176:	3714      	adds	r7, #20
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr

0800017e <setSoftPWM>:

void setSoftPWM(uint16_t pin, uint32_t duty ,uint32_t *softpwmbuffer)
{
 800017e:	b480      	push	{r7}
 8000180:	b087      	sub	sp, #28
 8000182:	af00      	add	r7, sp, #0
 8000184:	4603      	mov	r3, r0
 8000186:	60b9      	str	r1, [r7, #8]
 8000188:	607a      	str	r2, [r7, #4]
 800018a:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 800018c:	2300      	movs	r3, #0
 800018e:	617b      	str	r3, [r7, #20]
 8000190:	e03d      	b.n	800020e <setSoftPWM+0x90>
	{
		if(i<duty)
 8000192:	697a      	ldr	r2, [r7, #20]
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	429a      	cmp	r2, r3
 8000198:	d21b      	bcs.n	80001d2 <setSoftPWM+0x54>
		{//set pin
			softpwmbuffer[i]&=(uint32_t)~(pin<<16);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	4413      	add	r3, r2
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	89fb      	ldrh	r3, [r7, #14]
 80001a6:	041b      	lsls	r3, r3, #16
 80001a8:	43db      	mvns	r3, r3
 80001aa:	4618      	mov	r0, r3
 80001ac:	697b      	ldr	r3, [r7, #20]
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	6879      	ldr	r1, [r7, #4]
 80001b2:	440b      	add	r3, r1
 80001b4:	4002      	ands	r2, r0
 80001b6:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin;
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	6819      	ldr	r1, [r3, #0]
 80001c2:	89fa      	ldrh	r2, [r7, #14]
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	4403      	add	r3, r0
 80001cc:	430a      	orrs	r2, r1
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	e01a      	b.n	8000208 <setSoftPWM+0x8a>
		}
		else
		{//reset pin
			softpwmbuffer[i]&=(uint32_t)~(pin);
 80001d2:	697b      	ldr	r3, [r7, #20]
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	43db      	mvns	r3, r3
 80001e0:	4618      	mov	r0, r3
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	440b      	add	r3, r1
 80001ea:	4002      	ands	r2, r0
 80001ec:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin<<16;
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	4413      	add	r3, r2
 80001f6:	6819      	ldr	r1, [r3, #0]
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	041a      	lsls	r2, r3, #16
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	4403      	add	r3, r0
 8000204:	430a      	orrs	r2, r1
 8000206:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8000208:	697b      	ldr	r3, [r7, #20]
 800020a:	3301      	adds	r3, #1
 800020c:	617b      	str	r3, [r7, #20]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	2b63      	cmp	r3, #99	; 0x63
 8000212:	d9be      	bls.n	8000192 <setSoftPWM+0x14>
		}
	}

}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	371c      	adds	r7, #28
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fe51 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f863 	bl	80002f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SSD1306_Init();
 800022e:	f000 f9f5 	bl	800061c <SSD1306_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f995 	bl	8000560 <MX_GPIO_Init>
  MX_DMA_Init();
 8000236:	f000 f975 	bl	8000524 <MX_DMA_Init>
  MX_I2C1_Init();
 800023a:	f000 f8a1 	bl	8000380 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f91d 	bl	800047c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000242:	f000 f945 	bl	80004d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000246:	f000 f8c9 	bl	80003dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_GotoXY(10,10);
 800024a:	210a      	movs	r1, #10
 800024c:	200a      	movs	r0, #10
 800024e:	f000 fb4d 	bl	80008ec <SSD1306_GotoXY>
  SSD1306_Puts ("init", &Font_11x18, 1);
 8000252:	2201      	movs	r2, #1
 8000254:	4920      	ldr	r1, [pc, #128]	; (80002d8 <main+0xb8>)
 8000256:	4821      	ldr	r0, [pc, #132]	; (80002dc <main+0xbc>)
 8000258:	f000 fbde 	bl	8000a18 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800025c:	f000 faa2 	bl	80007a4 <SSD1306_UpdateScreen>
  HAL_Delay(500);
 8000260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000264:	f000 fe94 	bl	8000f90 <HAL_Delay>
  HAL_TIM_Base_Start(&htim1);
 8000268:	481d      	ldr	r0, [pc, #116]	; (80002e0 <main+0xc0>)
 800026a:	f002 fd11 	bl	8002c90 <HAL_TIM_Base_Start>
  HAL_DMA_Start(&hdma_tim1_up, 	(uint32_t)&(dataC[0]), (uint32_t)&(GPIOC->BSRR), sizeof(dataC)/sizeof(dataC[0]));
 800026e:	491d      	ldr	r1, [pc, #116]	; (80002e4 <main+0xc4>)
 8000270:	2364      	movs	r3, #100	; 0x64
 8000272:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <main+0xc8>)
 8000274:	481d      	ldr	r0, [pc, #116]	; (80002ec <main+0xcc>)
 8000276:	f001 f817 	bl	80012a8 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <main+0xc0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	68da      	ldr	r2, [r3, #12]
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <main+0xc0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000288:	60da      	str	r2, [r3, #12]
  uint32_t duty=0;
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]

  zeroSoftPWM(dataC);
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <main+0xc4>)
 8000290:	f7ff ff5c 	bl	800014c <zeroSoftPWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  setSoftPWM(GPIO_PIN_13, duty, (uint32_t*)&dataC);
 8000294:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <main+0xc4>)
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800029c:	f7ff ff6f 	bl	800017e <setSoftPWM>
	  if (duty_down==0)
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <main+0xd0>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d103      	bne.n	80002b0 <main+0x90>
	  {
		  duty++;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	e002      	b.n	80002b6 <main+0x96>
	  }
	  else
	  {
		  duty--;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
	  }
	  if(duty>100)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b64      	cmp	r3, #100	; 0x64
 80002ba:	d903      	bls.n	80002c4 <main+0xa4>
	  {
		  duty_down=1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <main+0xd0>)
 80002be:	2201      	movs	r2, #1
 80002c0:	801a      	strh	r2, [r3, #0]
 80002c2:	e005      	b.n	80002d0 <main+0xb0>
	  }
	  else if(duty<1)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d102      	bne.n	80002d0 <main+0xb0>
	  {
		  duty_down=0;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <main+0xd0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_Delay(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fe5d 	bl	8000f90 <HAL_Delay>
	  setSoftPWM(GPIO_PIN_13, duty, (uint32_t*)&dataC);
 80002d6:	e7dd      	b.n	8000294 <main+0x74>
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08003380 	.word	0x08003380
 80002e0:	20000084 	.word	0x20000084
 80002e4:	20000198 	.word	0x20000198
 80002e8:	40011010 	.word	0x40011010
 80002ec:	200000cc 	.word	0x200000cc
 80002f0:	20000328 	.word	0x20000328

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	; 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 f828 	bl	8003358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000316:	2301      	movs	r3, #1
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	2302      	movs	r3, #2
 800032a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000332:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000336:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0318 	add.w	r3, r7, #24
 800033c:	4618      	mov	r0, r3
 800033e:	f002 f83d 	bl	80023bc <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000348:	f000 f962 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000350:	2302      	movs	r3, #2
 8000352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f002 faaa 	bl	80028c0 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000372:	f000 f94d 	bl	8000610 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3740      	adds	r7, #64	; 0x40
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_I2C1_Init+0x50>)
 8000386:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <MX_I2C1_Init+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_I2C1_Init+0x50>)
 800038c:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <MX_I2C1_Init+0x58>)
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_I2C1_Init+0x50>)
 800039e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_I2C1_Init+0x50>)
 80003be:	f001 fa85 	bl	80018cc <HAL_I2C_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f922 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000030 	.word	0x20000030
 80003d4:	40005400 	.word	0x40005400
 80003d8:	00061a80 	.word	0x00061a80

080003dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003f8:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <MX_TIM1_Init+0x98>)
 80003fa:	4a1f      	ldr	r2, [pc, #124]	; (8000478 <MX_TIM1_Init+0x9c>)
 80003fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_TIM1_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_TIM1_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_TIM1_Init+0x98>)
 800040c:	2263      	movs	r2, #99	; 0x63
 800040e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_TIM1_Init+0x98>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000416:	4b17      	ldr	r3, [pc, #92]	; (8000474 <MX_TIM1_Init+0x98>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_TIM1_Init+0x98>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <MX_TIM1_Init+0x98>)
 8000424:	f002 fbe4 	bl	8002bf0 <HAL_TIM_Base_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800042e:	f000 f8ef 	bl	8000610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4619      	mov	r1, r3
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <MX_TIM1_Init+0x98>)
 8000440:	f002 fc70 	bl	8002d24 <HAL_TIM_ConfigClockSource>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800044a:	f000 f8e1 	bl	8000610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800044e:	2320      	movs	r3, #32
 8000450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000456:	463b      	mov	r3, r7
 8000458:	4619      	mov	r1, r3
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <MX_TIM1_Init+0x98>)
 800045c:	f002 fe1e 	bl	800309c <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000466:	f000 f8d3 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000084 	.word	0x20000084
 8000478:	40012c00 	.word	0x40012c00

0800047c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <MX_USART1_UART_Init+0x50>)
 8000484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800048c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004b4:	f002 fe50 	bl	8003158 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004be:	f000 f8a7 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000110 	.word	0x20000110
 80004cc:	40013800 	.word	0x40013800

080004d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_USART2_UART_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_USART2_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_USART2_UART_Init+0x4c>)
 8000508:	f002 fe26 	bl	8003158 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 f87d 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000154 	.word	0x20000154
 8000520:	40004400 	.word	0x40004400

08000524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_DMA_Init+0x38>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <MX_DMA_Init+0x38>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_DMA_Init+0x38>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	200f      	movs	r0, #15
 8000548:	f000 fe1d 	bl	8001186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800054c:	200f      	movs	r0, #15
 800054e:	f000 fe36 	bl	80011be <HAL_NVIC_EnableIRQ>

}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_GPIO_Init+0xa8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a23      	ldr	r2, [pc, #140]	; (8000608 <MX_GPIO_Init+0xa8>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_GPIO_Init+0xa8>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_GPIO_Init+0xa8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <MX_GPIO_Init+0xa8>)
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_GPIO_Init+0xa8>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0320 	and.w	r3, r3, #32
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a11      	ldr	r2, [pc, #68]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_GPIO_Init+0xa8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <MX_GPIO_Init+0xac>)
 80005dc:	f001 f95e 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2302      	movs	r3, #2
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_GPIO_Init+0xac>)
 80005fa:	f000 ffcb 	bl	8001594 <HAL_GPIO_Init>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40011000 	.word	0x40011000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000622:	f000 fa1f 	bl	8000a64 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000626:	f644 6320 	movw	r3, #20000	; 0x4e20
 800062a:	2201      	movs	r2, #1
 800062c:	2178      	movs	r1, #120	; 0x78
 800062e:	485b      	ldr	r0, [pc, #364]	; (800079c <SSD1306_Init+0x180>)
 8000630:	f001 fb8e 	bl	8001d50 <HAL_I2C_IsDeviceReady>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e0a9      	b.n	8000792 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800063e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000642:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000644:	e002      	b.n	800064c <SSD1306_Init+0x30>
		p--;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3b01      	subs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f9      	bne.n	8000646 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000652:	22ae      	movs	r2, #174	; 0xae
 8000654:	2100      	movs	r1, #0
 8000656:	2078      	movs	r0, #120	; 0x78
 8000658:	f000 fa7e 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	2078      	movs	r0, #120	; 0x78
 8000662:	f000 fa79 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000666:	2210      	movs	r2, #16
 8000668:	2100      	movs	r1, #0
 800066a:	2078      	movs	r0, #120	; 0x78
 800066c:	f000 fa74 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000670:	22b0      	movs	r2, #176	; 0xb0
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 fa6f 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 fa6a 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2078      	movs	r0, #120	; 0x78
 800068a:	f000 fa65 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800068e:	2210      	movs	r2, #16
 8000690:	2100      	movs	r1, #0
 8000692:	2078      	movs	r0, #120	; 0x78
 8000694:	f000 fa60 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	2100      	movs	r1, #0
 800069c:	2078      	movs	r0, #120	; 0x78
 800069e:	f000 fa5b 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80006a2:	2281      	movs	r2, #129	; 0x81
 80006a4:	2100      	movs	r1, #0
 80006a6:	2078      	movs	r0, #120	; 0x78
 80006a8:	f000 fa56 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	2100      	movs	r1, #0
 80006b0:	2078      	movs	r0, #120	; 0x78
 80006b2:	f000 fa51 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80006b6:	22a1      	movs	r2, #161	; 0xa1
 80006b8:	2100      	movs	r1, #0
 80006ba:	2078      	movs	r0, #120	; 0x78
 80006bc:	f000 fa4c 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80006c0:	22a6      	movs	r2, #166	; 0xa6
 80006c2:	2100      	movs	r1, #0
 80006c4:	2078      	movs	r0, #120	; 0x78
 80006c6:	f000 fa47 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80006ca:	22a8      	movs	r2, #168	; 0xa8
 80006cc:	2100      	movs	r1, #0
 80006ce:	2078      	movs	r0, #120	; 0x78
 80006d0:	f000 fa42 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80006d4:	223f      	movs	r2, #63	; 0x3f
 80006d6:	2100      	movs	r1, #0
 80006d8:	2078      	movs	r0, #120	; 0x78
 80006da:	f000 fa3d 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006de:	22a4      	movs	r2, #164	; 0xa4
 80006e0:	2100      	movs	r1, #0
 80006e2:	2078      	movs	r0, #120	; 0x78
 80006e4:	f000 fa38 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80006e8:	22d3      	movs	r2, #211	; 0xd3
 80006ea:	2100      	movs	r1, #0
 80006ec:	2078      	movs	r0, #120	; 0x78
 80006ee:	f000 fa33 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2078      	movs	r0, #120	; 0x78
 80006f8:	f000 fa2e 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80006fc:	22d5      	movs	r2, #213	; 0xd5
 80006fe:	2100      	movs	r1, #0
 8000700:	2078      	movs	r0, #120	; 0x78
 8000702:	f000 fa29 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000706:	22f0      	movs	r2, #240	; 0xf0
 8000708:	2100      	movs	r1, #0
 800070a:	2078      	movs	r0, #120	; 0x78
 800070c:	f000 fa24 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000710:	22d9      	movs	r2, #217	; 0xd9
 8000712:	2100      	movs	r1, #0
 8000714:	2078      	movs	r0, #120	; 0x78
 8000716:	f000 fa1f 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800071a:	2222      	movs	r2, #34	; 0x22
 800071c:	2100      	movs	r1, #0
 800071e:	2078      	movs	r0, #120	; 0x78
 8000720:	f000 fa1a 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000724:	22da      	movs	r2, #218	; 0xda
 8000726:	2100      	movs	r1, #0
 8000728:	2078      	movs	r0, #120	; 0x78
 800072a:	f000 fa15 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800072e:	2212      	movs	r2, #18
 8000730:	2100      	movs	r1, #0
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f000 fa10 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000738:	22db      	movs	r2, #219	; 0xdb
 800073a:	2100      	movs	r1, #0
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f000 fa0b 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	2078      	movs	r0, #120	; 0x78
 8000748:	f000 fa06 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800074c:	228d      	movs	r2, #141	; 0x8d
 800074e:	2100      	movs	r1, #0
 8000750:	2078      	movs	r0, #120	; 0x78
 8000752:	f000 fa01 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000756:	2214      	movs	r2, #20
 8000758:	2100      	movs	r1, #0
 800075a:	2078      	movs	r0, #120	; 0x78
 800075c:	f000 f9fc 	bl	8000b58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000760:	22af      	movs	r2, #175	; 0xaf
 8000762:	2100      	movs	r1, #0
 8000764:	2078      	movs	r0, #120	; 0x78
 8000766:	f000 f9f7 	bl	8000b58 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800076a:	222e      	movs	r2, #46	; 0x2e
 800076c:	2100      	movs	r1, #0
 800076e:	2078      	movs	r0, #120	; 0x78
 8000770:	f000 f9f2 	bl	8000b58 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f843 	bl	8000800 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800077a:	f000 f813 	bl	80007a4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <SSD1306_Init+0x184>)
 8000780:	2200      	movs	r2, #0
 8000782:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <SSD1306_Init+0x184>)
 8000786:	2200      	movs	r2, #0
 8000788:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SSD1306_Init+0x184>)
 800078c:	2201      	movs	r2, #1
 800078e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000030 	.word	0x20000030
 80007a0:	2000072c 	.word	0x2000072c

080007a4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	e01d      	b.n	80007ec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	3b50      	subs	r3, #80	; 0x50
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	2078      	movs	r0, #120	; 0x78
 80007bc:	f000 f9cc 	bl	8000b58 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2078      	movs	r0, #120	; 0x78
 80007c6:	f000 f9c7 	bl	8000b58 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007ca:	2210      	movs	r2, #16
 80007cc:	2100      	movs	r1, #0
 80007ce:	2078      	movs	r0, #120	; 0x78
 80007d0:	f000 f9c2 	bl	8000b58 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <SSD1306_UpdateScreen+0x58>)
 80007da:	441a      	add	r2, r3
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	2140      	movs	r1, #64	; 0x40
 80007e0:	2078      	movs	r0, #120	; 0x78
 80007e2:	f000 f953 	bl	8000a8c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3301      	adds	r3, #1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	d9de      	bls.n	80007b0 <SSD1306_UpdateScreen+0xc>
	}
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000032c 	.word	0x2000032c

08000800 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d101      	bne.n	8000814 <SSD1306_Fill+0x14>
 8000810:	2300      	movs	r3, #0
 8000812:	e000      	b.n	8000816 <SSD1306_Fill+0x16>
 8000814:	23ff      	movs	r3, #255	; 0xff
 8000816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081a:	4619      	mov	r1, r3
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <SSD1306_Fill+0x2c>)
 800081e:	f002 fd9b 	bl	8003358 <memset>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000032c 	.word	0x2000032c

08000830 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
 800083a:	460b      	mov	r3, r1
 800083c:	80bb      	strh	r3, [r7, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	70fb      	strb	r3, [r7, #3]
	if (
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	2b7f      	cmp	r3, #127	; 0x7f
 8000846:	d848      	bhi.n	80008da <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	2b3f      	cmp	r3, #63	; 0x3f
 800084c:	d845      	bhi.n	80008da <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SSD1306_DrawPixel+0xb4>)
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11a      	bne.n	80008a0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800086a:	88fa      	ldrh	r2, [r7, #6]
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	b298      	uxth	r0, r3
 8000872:	4603      	mov	r3, r0
 8000874:	01db      	lsls	r3, r3, #7
 8000876:	4413      	add	r3, r2
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <SSD1306_DrawPixel+0xb8>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	b25a      	sxtb	r2, r3
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	b25b      	sxtb	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b259      	sxtb	r1, r3
 8000890:	88fa      	ldrh	r2, [r7, #6]
 8000892:	4603      	mov	r3, r0
 8000894:	01db      	lsls	r3, r3, #7
 8000896:	4413      	add	r3, r2
 8000898:	b2c9      	uxtb	r1, r1
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <SSD1306_DrawPixel+0xb8>)
 800089c:	54d1      	strb	r1, [r2, r3]
 800089e:	e01d      	b.n	80008dc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	b298      	uxth	r0, r3
 80008a8:	4603      	mov	r3, r0
 80008aa:	01db      	lsls	r3, r3, #7
 80008ac:	4413      	add	r3, r2
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <SSD1306_DrawPixel+0xb8>)
 80008b0:	5cd3      	ldrb	r3, [r2, r3]
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	88bb      	ldrh	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	2101      	movs	r1, #1
 80008bc:	fa01 f303 	lsl.w	r3, r1, r3
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	4013      	ands	r3, r2
 80008c8:	b259      	sxtb	r1, r3
 80008ca:	88fa      	ldrh	r2, [r7, #6]
 80008cc:	4603      	mov	r3, r0
 80008ce:	01db      	lsls	r3, r3, #7
 80008d0:	4413      	add	r3, r2
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <SSD1306_DrawPixel+0xb8>)
 80008d6:	54d1      	strb	r1, [r2, r3]
 80008d8:	e000      	b.n	80008dc <SSD1306_DrawPixel+0xac>
		return;
 80008da:	bf00      	nop
	}
}
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	2000072c 	.word	0x2000072c
 80008e8:	2000032c 	.word	0x2000032c

080008ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	460a      	mov	r2, r1
 80008f6:	80fb      	strh	r3, [r7, #6]
 80008f8:	4613      	mov	r3, r2
 80008fa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SSD1306_GotoXY+0x28>)
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <SSD1306_GotoXY+0x28>)
 8000904:	88bb      	ldrh	r3, [r7, #4]
 8000906:	8053      	strh	r3, [r2, #2]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000072c 	.word	0x2000072c

08000918 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <SSD1306_Putc+0xfc>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
	if (
 8000934:	2b7f      	cmp	r3, #127	; 0x7f
 8000936:	dc07      	bgt.n	8000948 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000938:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <SSD1306_Putc+0xfc>)
 800093a:	885b      	ldrh	r3, [r3, #2]
 800093c:	461a      	mov	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000944:	2b3f      	cmp	r3, #63	; 0x3f
 8000946:	dd01      	ble.n	800094c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000948:	2300      	movs	r3, #0
 800094a:	e05e      	b.n	8000a0a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e04b      	b.n	80009ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	3b20      	subs	r3, #32
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	7849      	ldrb	r1, [r1, #1]
 800095e:	fb01 f303 	mul.w	r3, r1, r3
 8000962:	4619      	mov	r1, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	440b      	add	r3, r1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	e030      	b.n	80009d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d010      	beq.n	80009a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SSD1306_Putc+0xfc>)
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	b29b      	uxth	r3, r3
 800098e:	4413      	add	r3, r2
 8000990:	b298      	uxth	r0, r3
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <SSD1306_Putc+0xfc>)
 8000994:	885a      	ldrh	r2, [r3, #2]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	b29b      	uxth	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	79ba      	ldrb	r2, [r7, #6]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f7ff ff45 	bl	8000830 <SSD1306_DrawPixel>
 80009a6:	e014      	b.n	80009d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <SSD1306_Putc+0xfc>)
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	b298      	uxth	r0, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <SSD1306_Putc+0xfc>)
 80009b6:	885a      	ldrh	r2, [r3, #2]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	4413      	add	r3, r2
 80009be:	b299      	uxth	r1, r3
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	f7ff ff2f 	bl	8000830 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	3301      	adds	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d3c8      	bcc.n	8000976 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	461a      	mov	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d3ad      	bcc.n	8000952 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <SSD1306_Putc+0xfc>)
 80009f8:	881a      	ldrh	r2, [r3, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <SSD1306_Putc+0xfc>)
 8000a06:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000072c 	.word	0x2000072c

08000a18 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	4613      	mov	r3, r2
 8000a24:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a26:	e012      	b.n	8000a4e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff71 	bl	8000918 <SSD1306_Putc>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d002      	beq.n	8000a48 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	e008      	b.n	8000a5a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1e8      	bne.n	8000a28 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	781b      	ldrb	r3, [r3, #0]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <ssd1306_I2C_Init+0x24>)
 8000a6c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a6e:	e002      	b.n	8000a76 <ssd1306_I2C_Init+0x12>
		p--;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f9      	bne.n	8000a70 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	0003d090 	.word	0x0003d090

08000a8c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b0c7      	sub	sp, #284	; 0x11c
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4604      	mov	r4, r0
 8000a94:	4608      	mov	r0, r1
 8000a96:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000a9a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000a9e:	600a      	str	r2, [r1, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aa6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000aaa:	4622      	mov	r2, r4
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ab2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000abe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ace:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ad2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ae0:	e015      	b.n	8000b0e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ae2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ae6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000aea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	441a      	add	r2, r3
 8000af2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000af6:	3301      	adds	r3, #1
 8000af8:	7811      	ldrb	r1, [r2, #0]
 8000afa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000afe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000b02:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b04:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000b0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b18:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b1c:	8812      	ldrh	r2, [r2, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d8df      	bhi.n	8000ae2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b26:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f107 020c 	add.w	r2, r7, #12
 8000b40:	200a      	movs	r0, #10
 8000b42:	9000      	str	r0, [sp, #0]
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b46:	f001 f805 	bl	8001b54 <HAL_I2C_Master_Transmit>
}
 8000b4a:	bf00      	nop
 8000b4c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000030 	.word	0x20000030

08000b58 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	460b      	mov	r3, r1
 8000b64:	71bb      	strb	r3, [r7, #6]
 8000b66:	4613      	mov	r3, r2
 8000b68:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b6e:	797b      	ldrb	r3, [r7, #5]
 8000b70:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	b299      	uxth	r1, r3
 8000b76:	f107 020c 	add.w	r2, r7, #12
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <ssd1306_I2C_Write+0x38>)
 8000b82:	f000 ffe7 	bl	8001b54 <HAL_I2C_Master_Transmit>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000030 	.word	0x20000030

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_MspInit+0x60>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_MspInit+0x60>)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x70>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d123      	bne.n	8000c60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_I2C_MspInit+0x74>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_I2C_MspInit+0x74>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_I2C_MspInit+0x74>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <HAL_I2C_MspInit+0x78>)
 8000c44:	f000 fca6 	bl	8001594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0x74>)
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_I2C_MspInit+0x74>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	61d3      	str	r3, [r2, #28]
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_I2C_MspInit+0x74>)
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_TIM_Base_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d133      	bne.n	8000cee <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_TIM_Base_MspInit+0x88>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <HAL_TIM_Base_MspInit+0x88>)
 8000c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_TIM_Base_MspInit+0x88>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_TIM_Base_MspInit+0x90>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbc:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cc8:	2220      	movs	r2, #32
 8000cca:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cd4:	f000 fa8e 	bl	80011f4 <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000cde:	f7ff fc97 	bl	8000610 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000ce6:	621a      	str	r2, [r3, #32]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_TIM_Base_MspInit+0x8c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40012c00 	.word	0x40012c00
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	200000cc 	.word	0x200000cc
 8000d04:	40020058 	.word	0x40020058

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <HAL_UART_MspInit+0xf8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d132      	bne.n	8000d8e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4826      	ldr	r0, [pc, #152]	; (8000e08 <HAL_UART_MspInit+0x100>)
 8000d6e:	f000 fc11 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4820      	ldr	r0, [pc, #128]	; (8000e08 <HAL_UART_MspInit+0x100>)
 8000d88:	f000 fc04 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8c:	e034      	b.n	8000df8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_UART_MspInit+0x104>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d12f      	bne.n	8000df8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_UART_MspInit+0xfc>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480b      	ldr	r0, [pc, #44]	; (8000e08 <HAL_UART_MspInit+0x100>)
 8000ddc:	f000 fbda 	bl	8001594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000de0:	2308      	movs	r3, #8
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_UART_MspInit+0x100>)
 8000df4:	f000 fbce 	bl	8001594 <HAL_GPIO_Init>
}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40004400 	.word	0x40004400

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 f87f 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <DMA1_Channel5_IRQHandler+0x10>)
 8000e66:	f000 fa61 	bl	800132c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000cc 	.word	0x200000cc

08000e74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ea6:	f7ff ffe5 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f002 fa31 	bl	8003310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eae:	f7ff f9b7 	bl	8000220 <main>
  bx lr
 8000eb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ebc:	08004114 	.word	0x08004114
  ldr r2, =_sbss
 8000ec0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ec4:	20000738 	.word	0x20000738

08000ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_2_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x28>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x28>)
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f947 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fe54 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f95f 	bl	80011da <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f927 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000010 	.word	0x20000010
 8000f54:	2000000c 	.word	0x2000000c

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_IncTick+0x20>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	20000010 	.word	0x20000010
 8000f78:	20000734 	.word	0x20000734

08000f7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_GetTick+0x10>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000734 	.word	0x20000734

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff fff0 	bl	8000f7c <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffe0 	bl	8000f7c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000010 	.word	0x20000010

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4906      	ldr	r1, [pc, #24]	; (8001070 <__NVIC_EnableIRQ+0x34>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff90 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff2d 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff42 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff35 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e043      	b.n	8001292 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_DMA_Init+0xa8>)
 8001212:	4413      	add	r3, r2
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <HAL_DMA_Init+0xac>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	009a      	lsls	r2, r3, #2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_DMA_Init+0xb0>)
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800123e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800124c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	bffdfff8 	.word	0xbffdfff8
 80012a0:	cccccccd 	.word	0xcccccccd
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_DMA_Start+0x20>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e02d      	b.n	8001324 <HAL_DMA_Start+0x7c>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d11d      	bne.n	8001316 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f91a 	bl	8001538 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e005      	b.n	8001322 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800131e:	2302      	movs	r3, #2
 8001320:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001322:	7dfb      	ldrb	r3, [r7, #23]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2204      	movs	r2, #4
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d04f      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xc8>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d04a      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0320 	and.w	r3, r3, #32
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0204 	bic.w	r2, r2, #4
 800137a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a66      	ldr	r2, [pc, #408]	; (800151c <HAL_DMA_IRQHandler+0x1f0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d029      	beq.n	80013da <HAL_DMA_IRQHandler+0xae>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a65      	ldr	r2, [pc, #404]	; (8001520 <HAL_DMA_IRQHandler+0x1f4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d022      	beq.n	80013d6 <HAL_DMA_IRQHandler+0xaa>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a63      	ldr	r2, [pc, #396]	; (8001524 <HAL_DMA_IRQHandler+0x1f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01a      	beq.n	80013d0 <HAL_DMA_IRQHandler+0xa4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a62      	ldr	r2, [pc, #392]	; (8001528 <HAL_DMA_IRQHandler+0x1fc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_IRQHandler+0x9e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a60      	ldr	r2, [pc, #384]	; (800152c <HAL_DMA_IRQHandler+0x200>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x98>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a5f      	ldr	r2, [pc, #380]	; (8001530 <HAL_DMA_IRQHandler+0x204>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d102      	bne.n	80013be <HAL_DMA_IRQHandler+0x92>
 80013b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013bc:	e00e      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013c2:	e00b      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013c8:	e008      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ce:	e005      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d4:	e002      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013d6:	2340      	movs	r3, #64	; 0x40
 80013d8:	e000      	b.n	80013dc <HAL_DMA_IRQHandler+0xb0>
 80013da:	2304      	movs	r3, #4
 80013dc:	4a55      	ldr	r2, [pc, #340]	; (8001534 <HAL_DMA_IRQHandler+0x208>)
 80013de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8094 	beq.w	8001512 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013f2:	e08e      	b.n	8001512 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	2202      	movs	r2, #2
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d056      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x186>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d051      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10b      	bne.n	8001434 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 020a 	bic.w	r2, r2, #10
 800142a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a38      	ldr	r2, [pc, #224]	; (800151c <HAL_DMA_IRQHandler+0x1f0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d029      	beq.n	8001492 <HAL_DMA_IRQHandler+0x166>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a37      	ldr	r2, [pc, #220]	; (8001520 <HAL_DMA_IRQHandler+0x1f4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d022      	beq.n	800148e <HAL_DMA_IRQHandler+0x162>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a35      	ldr	r2, [pc, #212]	; (8001524 <HAL_DMA_IRQHandler+0x1f8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01a      	beq.n	8001488 <HAL_DMA_IRQHandler+0x15c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a34      	ldr	r2, [pc, #208]	; (8001528 <HAL_DMA_IRQHandler+0x1fc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d012      	beq.n	8001482 <HAL_DMA_IRQHandler+0x156>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_DMA_IRQHandler+0x200>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00a      	beq.n	800147c <HAL_DMA_IRQHandler+0x150>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_DMA_IRQHandler+0x204>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d102      	bne.n	8001476 <HAL_DMA_IRQHandler+0x14a>
 8001470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001474:	e00e      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147a:	e00b      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 800147c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001480:	e008      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	e005      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	e002      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 800148e:	2320      	movs	r3, #32
 8001490:	e000      	b.n	8001494 <HAL_DMA_IRQHandler+0x168>
 8001492:	2302      	movs	r3, #2
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_DMA_IRQHandler+0x208>)
 8001496:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d034      	beq.n	8001512 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014b0:	e02f      	b.n	8001512 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2208      	movs	r2, #8
 80014b8:	409a      	lsls	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d028      	beq.n	8001514 <HAL_DMA_IRQHandler+0x1e8>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d023      	beq.n	8001514 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020e 	bic.w	r2, r2, #14
 80014da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
    }
  }
  return;
 8001512:	bf00      	nop
 8001514:	bf00      	nop
}
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40020008 	.word	0x40020008
 8001520:	4002001c 	.word	0x4002001c
 8001524:	40020030 	.word	0x40020030
 8001528:	40020044 	.word	0x40020044
 800152c:	40020058 	.word	0x40020058
 8001530:	4002006c 	.word	0x4002006c
 8001534:	40020000 	.word	0x40020000

08001538 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b10      	cmp	r3, #16
 8001564:	d108      	bne.n	8001578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001576:	e007      	b.n	8001588 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b08b      	sub	sp, #44	; 0x2c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e169      	b.n	800187c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a8:	2201      	movs	r2, #1
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8158 	bne.w	8001876 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a9a      	ldr	r2, [pc, #616]	; (8001834 <HAL_GPIO_Init+0x2a0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d05e      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015d0:	4a98      	ldr	r2, [pc, #608]	; (8001834 <HAL_GPIO_Init+0x2a0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d875      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015d6:	4a98      	ldr	r2, [pc, #608]	; (8001838 <HAL_GPIO_Init+0x2a4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d058      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015dc:	4a96      	ldr	r2, [pc, #600]	; (8001838 <HAL_GPIO_Init+0x2a4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d86f      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015e2:	4a96      	ldr	r2, [pc, #600]	; (800183c <HAL_GPIO_Init+0x2a8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d052      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015e8:	4a94      	ldr	r2, [pc, #592]	; (800183c <HAL_GPIO_Init+0x2a8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d869      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015ee:	4a94      	ldr	r2, [pc, #592]	; (8001840 <HAL_GPIO_Init+0x2ac>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d04c      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015f4:	4a92      	ldr	r2, [pc, #584]	; (8001840 <HAL_GPIO_Init+0x2ac>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d863      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015fa:	4a92      	ldr	r2, [pc, #584]	; (8001844 <HAL_GPIO_Init+0x2b0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d046      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 8001600:	4a90      	ldr	r2, [pc, #576]	; (8001844 <HAL_GPIO_Init+0x2b0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d85d      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d82a      	bhi.n	8001660 <HAL_GPIO_Init+0xcc>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d859      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <HAL_GPIO_Init+0x80>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	0800168f 	.word	0x0800168f
 8001618:	08001669 	.word	0x08001669
 800161c:	0800167b 	.word	0x0800167b
 8001620:	080016bd 	.word	0x080016bd
 8001624:	080016c3 	.word	0x080016c3
 8001628:	080016c3 	.word	0x080016c3
 800162c:	080016c3 	.word	0x080016c3
 8001630:	080016c3 	.word	0x080016c3
 8001634:	080016c3 	.word	0x080016c3
 8001638:	080016c3 	.word	0x080016c3
 800163c:	080016c3 	.word	0x080016c3
 8001640:	080016c3 	.word	0x080016c3
 8001644:	080016c3 	.word	0x080016c3
 8001648:	080016c3 	.word	0x080016c3
 800164c:	080016c3 	.word	0x080016c3
 8001650:	080016c3 	.word	0x080016c3
 8001654:	080016c3 	.word	0x080016c3
 8001658:	08001671 	.word	0x08001671
 800165c:	08001685 	.word	0x08001685
 8001660:	4a79      	ldr	r2, [pc, #484]	; (8001848 <HAL_GPIO_Init+0x2b4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e02c      	b.n	80016c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e029      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e024      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	3308      	adds	r3, #8
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e01f      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	330c      	adds	r3, #12
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e01a      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001696:	2304      	movs	r3, #4
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e013      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a4:	2308      	movs	r3, #8
 80016a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	611a      	str	r2, [r3, #16]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b0:	2308      	movs	r3, #8
 80016b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	615a      	str	r2, [r3, #20]
          break;
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          break;
 80016c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	; 0xff
 80016c8:	d801      	bhi.n	80016ce <HAL_GPIO_Init+0x13a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_Init+0x13e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d802      	bhi.n	80016e0 <HAL_GPIO_Init+0x14c>
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x152>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	3b08      	subs	r3, #8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80b1 	beq.w	8001876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <HAL_GPIO_Init+0x2b8>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_GPIO_Init+0x2b8>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_GPIO_Init+0x2b8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172c:	4a48      	ldr	r2, [pc, #288]	; (8001850 <HAL_GPIO_Init+0x2bc>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_GPIO_Init+0x2c0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d013      	beq.n	8001780 <HAL_GPIO_Init+0x1ec>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3f      	ldr	r2, [pc, #252]	; (8001858 <HAL_GPIO_Init+0x2c4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00d      	beq.n	800177c <HAL_GPIO_Init+0x1e8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3e      	ldr	r2, [pc, #248]	; (800185c <HAL_GPIO_Init+0x2c8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0x1e4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3d      	ldr	r2, [pc, #244]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_GPIO_Init+0x1e0>
 8001770:	2303      	movs	r3, #3
 8001772:	e006      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 8001774:	2304      	movs	r3, #4
 8001776:	e004      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 8001778:	2302      	movs	r3, #2
 800177a:	e002      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_GPIO_Init+0x1ee>
 8001780:	2300      	movs	r3, #0
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	f002 0203 	and.w	r2, r2, #3
 8001788:	0092      	lsls	r2, r2, #2
 800178a:	4093      	lsls	r3, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001792:	492f      	ldr	r1, [pc, #188]	; (8001850 <HAL_GPIO_Init+0x2bc>)
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	492c      	ldr	r1, [pc, #176]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4928      	ldr	r1, [pc, #160]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4922      	ldr	r1, [pc, #136]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	491e      	ldr	r1, [pc, #120]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4918      	ldr	r1, [pc, #96]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4914      	ldr	r1, [pc, #80]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d021      	beq.n	8001868 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
 8001830:	e021      	b.n	8001876 <HAL_GPIO_Init+0x2e2>
 8001832:	bf00      	nop
 8001834:	10320000 	.word	0x10320000
 8001838:	10310000 	.word	0x10310000
 800183c:	10220000 	.word	0x10220000
 8001840:	10210000 	.word	0x10210000
 8001844:	10120000 	.word	0x10120000
 8001848:	10110000 	.word	0x10110000
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	40010800 	.word	0x40010800
 8001858:	40010c00 	.word	0x40010c00
 800185c:	40011000 	.word	0x40011000
 8001860:	40011400 	.word	0x40011400
 8001864:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_GPIO_Init+0x304>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	43db      	mvns	r3, r3
 8001870:	4909      	ldr	r1, [pc, #36]	; (8001898 <HAL_GPIO_Init+0x304>)
 8001872:	4013      	ands	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	3301      	adds	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	f47f ae8e 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	372c      	adds	r7, #44	; 0x2c
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40010400 	.word	0x40010400

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e12b      	b.n	8001b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff f980 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2224      	movs	r2, #36	; 0x24
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800191e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800192e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001930:	f001 f918 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8001934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a81      	ldr	r2, [pc, #516]	; (8001b40 <HAL_I2C_Init+0x274>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d807      	bhi.n	8001950 <HAL_I2C_Init+0x84>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4a80      	ldr	r2, [pc, #512]	; (8001b44 <HAL_I2C_Init+0x278>)
 8001944:	4293      	cmp	r3, r2
 8001946:	bf94      	ite	ls
 8001948:	2301      	movls	r3, #1
 800194a:	2300      	movhi	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e006      	b.n	800195e <HAL_I2C_Init+0x92>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a7d      	ldr	r2, [pc, #500]	; (8001b48 <HAL_I2C_Init+0x27c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	bf94      	ite	ls
 8001958:	2301      	movls	r3, #1
 800195a:	2300      	movhi	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0e7      	b.n	8001b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4a78      	ldr	r2, [pc, #480]	; (8001b4c <HAL_I2C_Init+0x280>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a6a      	ldr	r2, [pc, #424]	; (8001b40 <HAL_I2C_Init+0x274>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d802      	bhi.n	80019a0 <HAL_I2C_Init+0xd4>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3301      	adds	r3, #1
 800199e:	e009      	b.n	80019b4 <HAL_I2C_Init+0xe8>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	4a69      	ldr	r2, [pc, #420]	; (8001b50 <HAL_I2C_Init+0x284>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	099b      	lsrs	r3, r3, #6
 80019b2:	3301      	adds	r3, #1
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	495c      	ldr	r1, [pc, #368]	; (8001b40 <HAL_I2C_Init+0x274>)
 80019d0:	428b      	cmp	r3, r1
 80019d2:	d819      	bhi.n	8001a08 <HAL_I2C_Init+0x13c>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1e59      	subs	r1, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e2:	1c59      	adds	r1, r3, #1
 80019e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019e8:	400b      	ands	r3, r1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00a      	beq.n	8001a04 <HAL_I2C_Init+0x138>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1e59      	subs	r1, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a02:	e051      	b.n	8001aa8 <HAL_I2C_Init+0x1dc>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e04f      	b.n	8001aa8 <HAL_I2C_Init+0x1dc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d111      	bne.n	8001a34 <HAL_I2C_Init+0x168>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1e58      	subs	r0, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	440b      	add	r3, r1
 8001a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	e012      	b.n	8001a5a <HAL_I2C_Init+0x18e>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e58      	subs	r0, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	0099      	lsls	r1, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2C_Init+0x196>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e022      	b.n	8001aa8 <HAL_I2C_Init+0x1dc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10e      	bne.n	8001a88 <HAL_I2C_Init+0x1bc>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1e58      	subs	r0, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	440b      	add	r3, r1
 8001a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a86:	e00f      	b.n	8001aa8 <HAL_I2C_Init+0x1dc>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e58      	subs	r0, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	0099      	lsls	r1, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	6809      	ldr	r1, [r1, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6911      	ldr	r1, [r2, #16]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68d2      	ldr	r2, [r2, #12]
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	000186a0 	.word	0x000186a0
 8001b44:	001e847f 	.word	0x001e847f
 8001b48:	003d08ff 	.word	0x003d08ff
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	10624dd3 	.word	0x10624dd3

08001b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	460b      	mov	r3, r1
 8001b62:	817b      	strh	r3, [r7, #10]
 8001b64:	4613      	mov	r3, r2
 8001b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fa08 	bl	8000f7c <HAL_GetTick>
 8001b6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	f040 80e0 	bne.w	8001d3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2319      	movs	r3, #25
 8001b82:	2201      	movs	r2, #1
 8001b84:	4970      	ldr	r1, [pc, #448]	; (8001d48 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fa92 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
 8001b94:	e0d3      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_I2C_Master_Transmit+0x50>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0cc      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x1ea>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d007      	beq.n	8001bca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2221      	movs	r2, #33	; 0x21
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2210      	movs	r2, #16
 8001be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	893a      	ldrh	r2, [r7, #8]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4a50      	ldr	r2, [pc, #320]	; (8001d4c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c0c:	8979      	ldrh	r1, [r7, #10]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f9ca 	bl	8001fac <I2C_MasterRequestWrite>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e08d      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c38:	e066      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fb0c 	bl	800225c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d107      	bne.n	8001c62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d11b      	bne.n	8001cdc <HAL_I2C_Master_Transmit+0x188>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d017      	beq.n	8001cdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	6a39      	ldr	r1, [r7, #32]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fafc 	bl	80022de <I2C_WaitOnBTFFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00d      	beq.n	8001d08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d107      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e01a      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d194      	bne.n	8001c3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e000      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
  }
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	00100002 	.word	0x00100002
 8001d4c:	ffff0000 	.word	0xffff0000

08001d50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff f90c 	bl	8000f7c <HAL_GetTick>
 8001d64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	f040 8111 	bne.w	8001f9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2319      	movs	r3, #25
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4988      	ldr	r1, [pc, #544]	; (8001fa4 <HAL_I2C_IsDeviceReady+0x254>)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f994 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e104      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2C_IsDeviceReady+0x50>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0fd      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d007      	beq.n	8001dc6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2224      	movs	r2, #36	; 0x24
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a70      	ldr	r2, [pc, #448]	; (8001fa8 <HAL_I2C_IsDeviceReady+0x258>)
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f952 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e20:	d103      	bne.n	8001e2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0b6      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f89d 	bl	8000f7c <HAL_GetTick>
 8001e42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e72:	e025      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e74:	f7ff f882 	bl	8000f7c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d302      	bcc.n	8001e8a <HAL_I2C_IsDeviceReady+0x13a>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	22a0      	movs	r2, #160	; 0xa0
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2ba0      	cmp	r3, #160	; 0xa0
 8001eca:	d005      	beq.n	8001ed8 <HAL_I2C_IsDeviceReady+0x188>
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_I2C_IsDeviceReady+0x188>
 8001ed2:	7dbb      	ldrb	r3, [r7, #22]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0cd      	beq.n	8001e74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d129      	bne.n	8001f42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2319      	movs	r3, #25
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4921      	ldr	r1, [pc, #132]	; (8001fa4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f8c6 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e036      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e02c      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2319      	movs	r3, #25
 8001f62:	2201      	movs	r2, #1
 8001f64:	490f      	ldr	r1, [pc, #60]	; (8001fa4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f8a2 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e012      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f4ff af32 	bcc.w	8001dea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
  }
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	00100002 	.word	0x00100002
 8001fa8:	ffff0000 	.word	0xffff0000

08001fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d006      	beq.n	8001fd6 <I2C_MasterRequestWrite+0x2a>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d003      	beq.n	8001fd6 <I2C_MasterRequestWrite+0x2a>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	2b12      	cmp	r3, #18
 8001fee:	d107      	bne.n	8002000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f84f 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002026:	d103      	bne.n	8002030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e035      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203e:	897b      	ldrh	r3, [r7, #10]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	e01b      	b.n	8002088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	11db      	asrs	r3, r3, #7
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 0306 	and.w	r3, r3, #6
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f063 030f 	orn	r3, r3, #15
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <I2C_MasterRequestWrite+0xfc>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f875 	bl	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e010      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <I2C_MasterRequestWrite+0x100>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f865 	bl	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	00010008 	.word	0x00010008
 80020ac:	00010002 	.word	0x00010002

080020b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	e025      	b.n	800210e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d021      	beq.n	800210e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7fe ff57 	bl	8000f7c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d116      	bne.n	800210e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0220 	orr.w	r2, r3, #32
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e023      	b.n	8002156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10d      	bne.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	e00c      	b.n	800214e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	429a      	cmp	r2, r3
 8002152:	d0b6      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800216c:	e051      	b.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217c:	d123      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e046      	b.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d021      	beq.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7fe fed5 	bl	8000f7c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d116      	bne.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e020      	b.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10c      	bne.n	8002236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e00b      	b.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	43da      	mvns	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d18d      	bne.n	800216e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002268:	e02d      	b.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f878 	bl	8002360 <I2C_IsAcknowledgeFailed>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e02d      	b.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d021      	beq.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7fe fe7b 	bl	8000f7c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e007      	b.n	80022d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d1ca      	bne.n	800226a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ea:	e02d      	b.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f837 	bl	8002360 <I2C_IsAcknowledgeFailed>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e02d      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d021      	beq.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7fe fe3a 	bl	8000f7c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d1ca      	bne.n	80022ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002376:	d11b      	bne.n	80023b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e272      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8087 	beq.w	80024ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
 80023f4:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d10b      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x12c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d168      	bne.n	80024e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e24c      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x76>
 8002424:	4b80      	ldr	r3, [pc, #512]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e02e      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0xbc>
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a71      	ldr	r2, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002478:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6a      	ldr	r2, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a67      	ldr	r2, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fd70 	bl	8000f7c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fd6c 	bl	8000f7c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e200      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe4>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fd5c 	bl	8000f7c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fd58 	bl	8000f7c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1ec      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x10c>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1c0      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4939      	ldr	r1, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fd11 	bl	8000f7c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fd0d 	bl	8000f7c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1a1      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fcf0 	bl	8000f7c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fcec 	bl	8000f7c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e180      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03a      	beq.n	8002640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d019      	beq.n	8002606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7fe fcd0 	bl	8000f7c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe fccc 	bl	8000f7c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e160      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f000 fad8 	bl	8002bb4 <RCC_Delay>
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe fcb6 	bl	8000f7c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fcb2 	bl	8000f7c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d908      	bls.n	8002634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e146      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	42420000 	.word	0x42420000
 8002630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a6 	beq.w	800279a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b8b      	ldr	r3, [pc, #556]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b88      	ldr	r3, [pc, #544]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a87      	ldr	r2, [pc, #540]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b85      	ldr	r3, [pc, #532]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_RCC_OscConfig+0x4c8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b7f      	ldr	r3, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7e      	ldr	r2, [pc, #504]	; (8002884 <HAL_RCC_OscConfig+0x4c8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fc73 	bl	8000f7c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fc6f 	bl	8000f7c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e103      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCC_OscConfig+0x4c8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x312>
 80026c0:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	e02d      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x334>
 80026d6:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a66      	ldr	r2, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x356>
 80026f8:	4b61      	ldr	r3, [pc, #388]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a60      	ldr	r2, [pc, #384]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 8002712:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a5a      	ldr	r2, [pc, #360]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b58      	ldr	r3, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a57      	ldr	r2, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fc23 	bl	8000f7c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fc1f 	bl	8000f7c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0b1      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x37e>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fc0d 	bl	8000f7c <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fc09 	bl	8000f7c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e09b      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b40      	ldr	r3, [pc, #256]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d061      	beq.n	8002874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d146      	bne.n	8002846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fbdd 	bl	8000f7c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe fbd9 	bl	8000f7c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e06d      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4921      	ldr	r1, [pc, #132]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a19      	ldr	r1, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	430b      	orrs	r3, r1
 8002812:	491b      	ldr	r1, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fbad 	bl	8000f7c <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fba9 	bl	8000f7c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e03d      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x46a>
 8002844:	e035      	b.n	80028b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fb96 	bl	8000f7c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fb92 	bl	8000f7c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e026      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x498>
 8002872:	e01e      	b.n	80028b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e019      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_OscConfig+0x500>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0d0      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0207 	bic.w	r2, r3, #7
 80028ea:	4965      	ldr	r1, [pc, #404]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800293e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d040      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e073      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06b      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4936      	ldr	r1, [pc, #216]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fae4 	bl	8000f7c <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fae0 	bl	8000f7c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e053      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d210      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4922      	ldr	r1, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1cc>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1d0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fa42 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	080040f4 	.word	0x080040f4
 8002a8c:	20000008 	.word	0x20000008
 8002a90:	2000000c 	.word	0x2000000c

08002a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b490      	push	{r4, r7}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a9c:	1d3c      	adds	r4, r7, #4
 8002a9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa4:	f240 2301 	movw	r3, #513	; 0x201
 8002aa8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x46>
 8002ad2:	e02b      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad6:	623b      	str	r3, [r7, #32]
      break;
 8002ad8:	e02b      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3328      	adds	r3, #40	; 0x28
 8002ae4:	443b      	add	r3, r7
 8002ae6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0c5b      	lsrs	r3, r3, #17
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	3328      	adds	r3, #40	; 0x28
 8002b02:	443b      	add	r3, r7
 8002b04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b0e:	fb03 f202 	mul.w	r2, r3, r2
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e004      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	623b      	str	r3, [r7, #32]
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b2e:	623b      	str	r3, [r7, #32]
      break;
 8002b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b32:	6a3b      	ldr	r3, [r7, #32]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc90      	pop	{r4, r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	08003388 	.word	0x08003388
 8002b44:	40021000 	.word	0x40021000
 8002b48:	007a1200 	.word	0x007a1200
 8002b4c:	003d0900 	.word	0x003d0900

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	20000008 	.word	0x20000008

08002b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b68:	f7ff fff2 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08004104 	.word	0x08004104

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b90:	f7ff ffde 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0adb      	lsrs	r3, r3, #11
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08004104 	.word	0x08004104

08002bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <RCC_Delay+0x34>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <RCC_Delay+0x38>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0a5b      	lsrs	r3, r3, #9
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd0:	bf00      	nop
  }
  while (Delay --);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	60fa      	str	r2, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <RCC_Delay+0x1c>
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	20000008 	.word	0x20000008
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e041      	b.n	8002c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe f82c 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f000 f93c 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d001      	beq.n	8002ca8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_TIM_Base_Start+0x88>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_TIM_Base_Start+0x48>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d009      	beq.n	8002cd8 <HAL_TIM_Base_Start+0x48>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_Base_Start+0x8c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIM_Base_Start+0x48>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <HAL_TIM_Base_Start+0x90>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d111      	bne.n	8002cfc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d010      	beq.n	8002d0c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfa:	e007      	b.n	8002d0c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800

08002d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_ConfigClockSource+0x18>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e0b3      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x180>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d74:	d03e      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0xd0>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	f200 8087 	bhi.w	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	f000 8085 	beq.w	8002e90 <HAL_TIM_ConfigClockSource+0x16c>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d87f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002d8c:	2b70      	cmp	r3, #112	; 0x70
 8002d8e:	d01a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0xa2>
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d87b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002d94:	2b60      	cmp	r3, #96	; 0x60
 8002d96:	d050      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x116>
 8002d98:	2b60      	cmp	r3, #96	; 0x60
 8002d9a:	d877      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002d9c:	2b50      	cmp	r3, #80	; 0x50
 8002d9e:	d03c      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xf6>
 8002da0:	2b50      	cmp	r3, #80	; 0x50
 8002da2:	d873      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d058      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x136>
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d86f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002dac:	2b30      	cmp	r3, #48	; 0x30
 8002dae:	d064      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x156>
 8002db0:	2b30      	cmp	r3, #48	; 0x30
 8002db2:	d86b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d060      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x156>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d867      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05c      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x156>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d05a      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dc4:	e062      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f000 f942 	bl	800305e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	609a      	str	r2, [r3, #8]
      break;
 8002df2:	e04e      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f000 f92b 	bl	800305e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e16:	609a      	str	r2, [r3, #8]
      break;
 8002e18:	e03b      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 f8a2 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2150      	movs	r1, #80	; 0x50
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f8f9 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e38:	e02b      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 f8c0 	bl	8002fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2160      	movs	r1, #96	; 0x60
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f8e9 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e58:	e01b      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 f882 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f8d9 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e78:	e00b      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 f8d0 	bl	800302a <TIM_ITRx_SetConfig>
        break;
 8002e8a:	e002      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e8c:	bf00      	nop
 8002e8e:	e000      	b.n	8002e92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <TIM_Base_SetConfig+0xb8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <TIM_Base_SetConfig+0x30>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eca:	d007      	beq.n	8002edc <TIM_Base_SetConfig+0x30>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <TIM_Base_SetConfig+0xbc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0x30>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <TIM_Base_SetConfig+0xc0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d108      	bne.n	8002eee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <TIM_Base_SetConfig+0xb8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <TIM_Base_SetConfig+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d007      	beq.n	8002f0e <TIM_Base_SetConfig+0x62>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <TIM_Base_SetConfig+0xbc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_Base_SetConfig+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <TIM_Base_SetConfig+0xc0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d108      	bne.n	8002f20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <TIM_Base_SetConfig+0xb8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d103      	bne.n	8002f54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	615a      	str	r2, [r3, #20]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800

08002f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0201 	bic.w	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 030a 	bic.w	r3, r3, #10
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 0210 	bic.w	r2, r3, #16
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	031b      	lsls	r3, r3, #12
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003008:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	621a      	str	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	f043 0307 	orr.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003078:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	431a      	orrs	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	609a      	str	r2, [r3, #8]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e046      	b.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d009      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800311c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800

08003158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e03f      	b.n	80031ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fdc2 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800319a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f829 	bl	80031f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800322e:	f023 030c 	bic.w	r3, r3, #12
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	430b      	orrs	r3, r1
 800323a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <UART_SetConfig+0x114>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d103      	bne.n	8003264 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7ff fc96 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	e002      	b.n	800326a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7ff fc7e 	bl	8002b64 <HAL_RCC_GetPCLK1Freq>
 8003268:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009a      	lsls	r2, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	4a22      	ldr	r2, [pc, #136]	; (800330c <UART_SetConfig+0x118>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	0119      	lsls	r1, r3, #4
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <UART_SetConfig+0x118>)
 80032a2:	fba3 0302 	umull	r0, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	4419      	add	r1, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <UART_SetConfig+0x118>)
 80032da:	fba3 0302 	umull	r0, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2064      	movs	r0, #100	; 0x64
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <UART_SetConfig+0x118>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	440a      	add	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40013800 	.word	0x40013800
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <__libc_init_array>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	2600      	movs	r6, #0
 8003314:	4d0c      	ldr	r5, [pc, #48]	; (8003348 <__libc_init_array+0x38>)
 8003316:	4c0d      	ldr	r4, [pc, #52]	; (800334c <__libc_init_array+0x3c>)
 8003318:	1b64      	subs	r4, r4, r5
 800331a:	10a4      	asrs	r4, r4, #2
 800331c:	42a6      	cmp	r6, r4
 800331e:	d109      	bne.n	8003334 <__libc_init_array+0x24>
 8003320:	f000 f822 	bl	8003368 <_init>
 8003324:	2600      	movs	r6, #0
 8003326:	4d0a      	ldr	r5, [pc, #40]	; (8003350 <__libc_init_array+0x40>)
 8003328:	4c0a      	ldr	r4, [pc, #40]	; (8003354 <__libc_init_array+0x44>)
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	42a6      	cmp	r6, r4
 8003330:	d105      	bne.n	800333e <__libc_init_array+0x2e>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	f855 3b04 	ldr.w	r3, [r5], #4
 8003338:	4798      	blx	r3
 800333a:	3601      	adds	r6, #1
 800333c:	e7ee      	b.n	800331c <__libc_init_array+0xc>
 800333e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003342:	4798      	blx	r3
 8003344:	3601      	adds	r6, #1
 8003346:	e7f2      	b.n	800332e <__libc_init_array+0x1e>
 8003348:	0800410c 	.word	0x0800410c
 800334c:	0800410c 	.word	0x0800410c
 8003350:	0800410c 	.word	0x0800410c
 8003354:	08004110 	.word	0x08004110

08003358 <memset>:
 8003358:	4603      	mov	r3, r0
 800335a:	4402      	add	r2, r0
 800335c:	4293      	cmp	r3, r2
 800335e:	d100      	bne.n	8003362 <memset+0xa>
 8003360:	4770      	bx	lr
 8003362:	f803 1b01 	strb.w	r1, [r3], #1
 8003366:	e7f9      	b.n	800335c <memset+0x4>

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr

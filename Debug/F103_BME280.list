
F103_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000981c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001194  08009930  08009930  00019930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac4  0800aac4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aac4  0800aac4  0001aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aacc  0800aacc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aacc  0800aacc  0001aacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aad0  0800aad0  0001aad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  200001e4  0800acb8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  0800acb8  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010791  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025cd  00000000  00000000  0003099e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00032f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00034130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019356  00000000  00000000  00035220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d70  00000000  00000000  0004e576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f708  00000000  00000000  000612e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f09ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e60  00000000  00000000  000f0a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009914 	.word	0x08009914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08009914 	.word	0x08009914

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b9a9 	b.w	8001398 <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	9e08      	ldr	r6, [sp, #32]
 80010ca:	460d      	mov	r5, r1
 80010cc:	4604      	mov	r4, r0
 80010ce:	4688      	mov	r8, r1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d14d      	bne.n	8001170 <__udivmoddi4+0xac>
 80010d4:	428a      	cmp	r2, r1
 80010d6:	4694      	mov	ip, r2
 80010d8:	d968      	bls.n	80011ac <__udivmoddi4+0xe8>
 80010da:	fab2 f282 	clz	r2, r2
 80010de:	b152      	cbz	r2, 80010f6 <__udivmoddi4+0x32>
 80010e0:	fa01 f302 	lsl.w	r3, r1, r2
 80010e4:	f1c2 0120 	rsb	r1, r2, #32
 80010e8:	fa20 f101 	lsr.w	r1, r0, r1
 80010ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f0:	ea41 0803 	orr.w	r8, r1, r3
 80010f4:	4094      	lsls	r4, r2
 80010f6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010fa:	fbb8 f7f1 	udiv	r7, r8, r1
 80010fe:	fa1f fe8c 	uxth.w	lr, ip
 8001102:	fb01 8817 	mls	r8, r1, r7, r8
 8001106:	fb07 f00e 	mul.w	r0, r7, lr
 800110a:	0c23      	lsrs	r3, r4, #16
 800110c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001110:	4298      	cmp	r0, r3
 8001112:	d90a      	bls.n	800112a <__udivmoddi4+0x66>
 8001114:	eb1c 0303 	adds.w	r3, ip, r3
 8001118:	f107 35ff 	add.w	r5, r7, #4294967295
 800111c:	f080 811e 	bcs.w	800135c <__udivmoddi4+0x298>
 8001120:	4298      	cmp	r0, r3
 8001122:	f240 811b 	bls.w	800135c <__udivmoddi4+0x298>
 8001126:	3f02      	subs	r7, #2
 8001128:	4463      	add	r3, ip
 800112a:	1a1b      	subs	r3, r3, r0
 800112c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001130:	fb01 3310 	mls	r3, r1, r0, r3
 8001134:	fb00 fe0e 	mul.w	lr, r0, lr
 8001138:	b2a4      	uxth	r4, r4
 800113a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800113e:	45a6      	cmp	lr, r4
 8001140:	d90a      	bls.n	8001158 <__udivmoddi4+0x94>
 8001142:	eb1c 0404 	adds.w	r4, ip, r4
 8001146:	f100 33ff 	add.w	r3, r0, #4294967295
 800114a:	f080 8109 	bcs.w	8001360 <__udivmoddi4+0x29c>
 800114e:	45a6      	cmp	lr, r4
 8001150:	f240 8106 	bls.w	8001360 <__udivmoddi4+0x29c>
 8001154:	4464      	add	r4, ip
 8001156:	3802      	subs	r0, #2
 8001158:	2100      	movs	r1, #0
 800115a:	eba4 040e 	sub.w	r4, r4, lr
 800115e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001162:	b11e      	cbz	r6, 800116c <__udivmoddi4+0xa8>
 8001164:	2300      	movs	r3, #0
 8001166:	40d4      	lsrs	r4, r2
 8001168:	e9c6 4300 	strd	r4, r3, [r6]
 800116c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001170:	428b      	cmp	r3, r1
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0xc2>
 8001174:	2e00      	cmp	r6, #0
 8001176:	f000 80ee 	beq.w	8001356 <__udivmoddi4+0x292>
 800117a:	2100      	movs	r1, #0
 800117c:	e9c6 0500 	strd	r0, r5, [r6]
 8001180:	4608      	mov	r0, r1
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	fab3 f183 	clz	r1, r3
 800118a:	2900      	cmp	r1, #0
 800118c:	d14a      	bne.n	8001224 <__udivmoddi4+0x160>
 800118e:	42ab      	cmp	r3, r5
 8001190:	d302      	bcc.n	8001198 <__udivmoddi4+0xd4>
 8001192:	4282      	cmp	r2, r0
 8001194:	f200 80fc 	bhi.w	8001390 <__udivmoddi4+0x2cc>
 8001198:	1a84      	subs	r4, r0, r2
 800119a:	eb65 0303 	sbc.w	r3, r5, r3
 800119e:	2001      	movs	r0, #1
 80011a0:	4698      	mov	r8, r3
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	d0e2      	beq.n	800116c <__udivmoddi4+0xa8>
 80011a6:	e9c6 4800 	strd	r4, r8, [r6]
 80011aa:	e7df      	b.n	800116c <__udivmoddi4+0xa8>
 80011ac:	b902      	cbnz	r2, 80011b0 <__udivmoddi4+0xec>
 80011ae:	deff      	udf	#255	; 0xff
 80011b0:	fab2 f282 	clz	r2, r2
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	f040 8091 	bne.w	80012dc <__udivmoddi4+0x218>
 80011ba:	eba1 000c 	sub.w	r0, r1, ip
 80011be:	2101      	movs	r1, #1
 80011c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011c4:	fa1f fe8c 	uxth.w	lr, ip
 80011c8:	fbb0 f3f7 	udiv	r3, r0, r7
 80011cc:	fb07 0013 	mls	r0, r7, r3, r0
 80011d0:	0c25      	lsrs	r5, r4, #16
 80011d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011d6:	fb0e f003 	mul.w	r0, lr, r3
 80011da:	42a8      	cmp	r0, r5
 80011dc:	d908      	bls.n	80011f0 <__udivmoddi4+0x12c>
 80011de:	eb1c 0505 	adds.w	r5, ip, r5
 80011e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80011e6:	d202      	bcs.n	80011ee <__udivmoddi4+0x12a>
 80011e8:	42a8      	cmp	r0, r5
 80011ea:	f200 80ce 	bhi.w	800138a <__udivmoddi4+0x2c6>
 80011ee:	4643      	mov	r3, r8
 80011f0:	1a2d      	subs	r5, r5, r0
 80011f2:	fbb5 f0f7 	udiv	r0, r5, r7
 80011f6:	fb07 5510 	mls	r5, r7, r0, r5
 80011fa:	fb0e fe00 	mul.w	lr, lr, r0
 80011fe:	b2a4      	uxth	r4, r4
 8001200:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001204:	45a6      	cmp	lr, r4
 8001206:	d908      	bls.n	800121a <__udivmoddi4+0x156>
 8001208:	eb1c 0404 	adds.w	r4, ip, r4
 800120c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001210:	d202      	bcs.n	8001218 <__udivmoddi4+0x154>
 8001212:	45a6      	cmp	lr, r4
 8001214:	f200 80b6 	bhi.w	8001384 <__udivmoddi4+0x2c0>
 8001218:	4628      	mov	r0, r5
 800121a:	eba4 040e 	sub.w	r4, r4, lr
 800121e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001222:	e79e      	b.n	8001162 <__udivmoddi4+0x9e>
 8001224:	f1c1 0720 	rsb	r7, r1, #32
 8001228:	408b      	lsls	r3, r1
 800122a:	fa22 fc07 	lsr.w	ip, r2, r7
 800122e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001232:	fa25 fa07 	lsr.w	sl, r5, r7
 8001236:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800123a:	fbba f8f9 	udiv	r8, sl, r9
 800123e:	fa20 f307 	lsr.w	r3, r0, r7
 8001242:	fb09 aa18 	mls	sl, r9, r8, sl
 8001246:	408d      	lsls	r5, r1
 8001248:	fa1f fe8c 	uxth.w	lr, ip
 800124c:	431d      	orrs	r5, r3
 800124e:	fa00 f301 	lsl.w	r3, r0, r1
 8001252:	fb08 f00e 	mul.w	r0, r8, lr
 8001256:	0c2c      	lsrs	r4, r5, #16
 8001258:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800125c:	42a0      	cmp	r0, r4
 800125e:	fa02 f201 	lsl.w	r2, r2, r1
 8001262:	d90b      	bls.n	800127c <__udivmoddi4+0x1b8>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f108 3aff 	add.w	sl, r8, #4294967295
 800126c:	f080 8088 	bcs.w	8001380 <__udivmoddi4+0x2bc>
 8001270:	42a0      	cmp	r0, r4
 8001272:	f240 8085 	bls.w	8001380 <__udivmoddi4+0x2bc>
 8001276:	f1a8 0802 	sub.w	r8, r8, #2
 800127a:	4464      	add	r4, ip
 800127c:	1a24      	subs	r4, r4, r0
 800127e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001282:	fb09 4410 	mls	r4, r9, r0, r4
 8001286:	fb00 fe0e 	mul.w	lr, r0, lr
 800128a:	b2ad      	uxth	r5, r5
 800128c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001290:	45a6      	cmp	lr, r4
 8001292:	d908      	bls.n	80012a6 <__udivmoddi4+0x1e2>
 8001294:	eb1c 0404 	adds.w	r4, ip, r4
 8001298:	f100 35ff 	add.w	r5, r0, #4294967295
 800129c:	d26c      	bcs.n	8001378 <__udivmoddi4+0x2b4>
 800129e:	45a6      	cmp	lr, r4
 80012a0:	d96a      	bls.n	8001378 <__udivmoddi4+0x2b4>
 80012a2:	3802      	subs	r0, #2
 80012a4:	4464      	add	r4, ip
 80012a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012aa:	fba0 9502 	umull	r9, r5, r0, r2
 80012ae:	eba4 040e 	sub.w	r4, r4, lr
 80012b2:	42ac      	cmp	r4, r5
 80012b4:	46c8      	mov	r8, r9
 80012b6:	46ae      	mov	lr, r5
 80012b8:	d356      	bcc.n	8001368 <__udivmoddi4+0x2a4>
 80012ba:	d053      	beq.n	8001364 <__udivmoddi4+0x2a0>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	d069      	beq.n	8001394 <__udivmoddi4+0x2d0>
 80012c0:	ebb3 0208 	subs.w	r2, r3, r8
 80012c4:	eb64 040e 	sbc.w	r4, r4, lr
 80012c8:	fa22 f301 	lsr.w	r3, r2, r1
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	431f      	orrs	r7, r3
 80012d2:	40cc      	lsrs	r4, r1
 80012d4:	e9c6 7400 	strd	r7, r4, [r6]
 80012d8:	2100      	movs	r1, #0
 80012da:	e747      	b.n	800116c <__udivmoddi4+0xa8>
 80012dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e0:	f1c2 0120 	rsb	r1, r2, #32
 80012e4:	fa25 f301 	lsr.w	r3, r5, r1
 80012e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ec:	fa20 f101 	lsr.w	r1, r0, r1
 80012f0:	4095      	lsls	r5, r2
 80012f2:	430d      	orrs	r5, r1
 80012f4:	fbb3 f1f7 	udiv	r1, r3, r7
 80012f8:	fb07 3311 	mls	r3, r7, r1, r3
 80012fc:	fa1f fe8c 	uxth.w	lr, ip
 8001300:	0c28      	lsrs	r0, r5, #16
 8001302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001306:	fb01 f30e 	mul.w	r3, r1, lr
 800130a:	4283      	cmp	r3, r0
 800130c:	fa04 f402 	lsl.w	r4, r4, r2
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x260>
 8001312:	eb1c 0000 	adds.w	r0, ip, r0
 8001316:	f101 38ff 	add.w	r8, r1, #4294967295
 800131a:	d22f      	bcs.n	800137c <__udivmoddi4+0x2b8>
 800131c:	4283      	cmp	r3, r0
 800131e:	d92d      	bls.n	800137c <__udivmoddi4+0x2b8>
 8001320:	3902      	subs	r1, #2
 8001322:	4460      	add	r0, ip
 8001324:	1ac0      	subs	r0, r0, r3
 8001326:	fbb0 f3f7 	udiv	r3, r0, r7
 800132a:	fb07 0013 	mls	r0, r7, r3, r0
 800132e:	b2ad      	uxth	r5, r5
 8001330:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001334:	fb03 f00e 	mul.w	r0, r3, lr
 8001338:	42a8      	cmp	r0, r5
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0x28a>
 800133c:	eb1c 0505 	adds.w	r5, ip, r5
 8001340:	f103 38ff 	add.w	r8, r3, #4294967295
 8001344:	d216      	bcs.n	8001374 <__udivmoddi4+0x2b0>
 8001346:	42a8      	cmp	r0, r5
 8001348:	d914      	bls.n	8001374 <__udivmoddi4+0x2b0>
 800134a:	3b02      	subs	r3, #2
 800134c:	4465      	add	r5, ip
 800134e:	1a28      	subs	r0, r5, r0
 8001350:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001354:	e738      	b.n	80011c8 <__udivmoddi4+0x104>
 8001356:	4631      	mov	r1, r6
 8001358:	4630      	mov	r0, r6
 800135a:	e707      	b.n	800116c <__udivmoddi4+0xa8>
 800135c:	462f      	mov	r7, r5
 800135e:	e6e4      	b.n	800112a <__udivmoddi4+0x66>
 8001360:	4618      	mov	r0, r3
 8001362:	e6f9      	b.n	8001158 <__udivmoddi4+0x94>
 8001364:	454b      	cmp	r3, r9
 8001366:	d2a9      	bcs.n	80012bc <__udivmoddi4+0x1f8>
 8001368:	ebb9 0802 	subs.w	r8, r9, r2
 800136c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001370:	3801      	subs	r0, #1
 8001372:	e7a3      	b.n	80012bc <__udivmoddi4+0x1f8>
 8001374:	4643      	mov	r3, r8
 8001376:	e7ea      	b.n	800134e <__udivmoddi4+0x28a>
 8001378:	4628      	mov	r0, r5
 800137a:	e794      	b.n	80012a6 <__udivmoddi4+0x1e2>
 800137c:	4641      	mov	r1, r8
 800137e:	e7d1      	b.n	8001324 <__udivmoddi4+0x260>
 8001380:	46d0      	mov	r8, sl
 8001382:	e77b      	b.n	800127c <__udivmoddi4+0x1b8>
 8001384:	4464      	add	r4, ip
 8001386:	3802      	subs	r0, #2
 8001388:	e747      	b.n	800121a <__udivmoddi4+0x156>
 800138a:	3b02      	subs	r3, #2
 800138c:	4465      	add	r5, ip
 800138e:	e72f      	b.n	80011f0 <__udivmoddi4+0x12c>
 8001390:	4608      	mov	r0, r1
 8001392:	e706      	b.n	80011a2 <__udivmoddi4+0xde>
 8001394:	4631      	mov	r1, r6
 8001396:	e6e9      	b.n	800116c <__udivmoddi4+0xa8>

08001398 <__aeabi_idiv0>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80013a4:	2305      	movs	r3, #5
 80013a6:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f001 fab8 	bl	8002922 <null_ptr_check>
 80013b2:	4603      	mov	r3, r0
 80013b4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d133      	bne.n	8001426 <bme280_init+0x8a>
		while (try_count) {
 80013be:	e028      	b.n	8001412 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80013c0:	f107 010d 	add.w	r1, r7, #13
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	20d0      	movs	r0, #208	; 0xd0
 80013ca:	f000 f832 	bl	8001432 <bme280_get_regs>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d114      	bne.n	8001404 <bme280_init+0x68>
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	2b60      	cmp	r3, #96	; 0x60
 80013de:	d111      	bne.n	8001404 <bme280_init+0x68>
				dev->chip_id = chip_id;
 80013e0:	7b7a      	ldrb	r2, [r7, #13]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f978 	bl	80016dc <bme280_soft_reset>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 80013f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d110      	bne.n	800141a <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f001 f90c 	bl	8002616 <get_calib_data>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001402:	e00a      	b.n	800141a <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2001      	movs	r0, #1
 800140a:	4798      	blx	r3
			--try_count;
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	3b01      	subs	r3, #1
 8001410:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1d3      	bne.n	80013c0 <bme280_init+0x24>
 8001418:	e000      	b.n	800141c <bme280_init+0x80>
				break;
 800141a:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8001422:	23fe      	movs	r3, #254	; 0xfe
 8001424:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8001432:	b590      	push	{r4, r7, lr}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	4613      	mov	r3, r2
 8001442:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 fa6c 	bl	8002922 <null_ptr_check>
 800144a:	4603      	mov	r3, r0
 800144c:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800144e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d117      	bne.n	8001486 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	789b      	ldrb	r3, [r3, #2]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d003      	beq.n	8001466 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001464:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685c      	ldr	r4, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7858      	ldrb	r0, [r3, #1]
 800146e:	89bb      	ldrh	r3, [r7, #12]
 8001470:	7bf9      	ldrb	r1, [r7, #15]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	47a0      	blx	r4
 8001476:	4603      	mov	r3, r0
 8001478:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800147a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001482:	23fc      	movs	r3, #252	; 0xfc
 8001484:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001486:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800148a:	4618      	mov	r0, r3
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}

08001492 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b08d      	sub	sp, #52	; 0x34
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4613      	mov	r3, r2
 80014a0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	d901      	bls.n	80014ac <bme280_set_regs+0x1a>
		len = 10;
 80014a8:	230a      	movs	r3, #10
 80014aa:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80014ac:	6838      	ldr	r0, [r7, #0]
 80014ae:	f001 fa38 	bl	8002922 <null_ptr_check>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80014b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d156      	bne.n	800156e <bme280_set_regs+0xdc>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d053      	beq.n	800156e <bme280_set_regs+0xdc>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d050      	beq.n	800156e <bme280_set_regs+0xdc>
		if (len != 0) {
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d049      	beq.n	8001566 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d01a      	beq.n	8001516 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80014e6:	e011      	b.n	800150c <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80014e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	440b      	add	r3, r1
 80014fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001506:	3301      	adds	r3, #1
 8001508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800150c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	429a      	cmp	r2, r3
 8001514:	d3e8      	bcc.n	80014e8 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d90d      	bls.n	8001538 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f107 0114 	add.w	r1, r7, #20
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f001 f8bb 	bl	80026a0 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	b29b      	uxth	r3, r3
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001536:	e001      	b.n	800153c <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689c      	ldr	r4, [r3, #8]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	7858      	ldrb	r0, [r3, #1]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	7819      	ldrb	r1, [r3, #0]
 8001548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800154a:	f107 0214 	add.w	r2, r7, #20
 800154e:	47a0      	blx	r4
 8001550:	4603      	mov	r3, r0
 8001552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8001556:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 800155e:	23fc      	movs	r3, #252	; 0xfc
 8001560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001564:	e007      	b.n	8001576 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001566:	23fd      	movs	r3, #253	; 0xfd
 8001568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800156c:	e003      	b.n	8001576 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800156e:	23ff      	movs	r3, #255	; 0xff
 8001570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001574:	e000      	b.n	8001578 <bme280_set_regs+0xe6>
		if (len != 0) {
 8001576:	bf00      	nop
	}


	return rslt;
 8001578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800157c:	4618      	mov	r0, r3
 800157e:	3734      	adds	r7, #52	; 0x34
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f001 f9c6 	bl	8002922 <null_ptr_check>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d13f      	bne.n	8001622 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80015a2:	f107 030e 	add.w	r3, r7, #14
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f874 	bl	8001696 <bme280_get_sensor_mode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <bme280_set_sensor_settings+0x46>
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80015c0:	6838      	ldr	r0, [r7, #0]
 80015c2:	f000 fb30 	bl	8001c26 <put_device_to_sleep>
 80015c6:	4603      	mov	r3, r0
 80015c8:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d127      	bne.n	8001622 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4619      	mov	r1, r3
 80015d6:	2007      	movs	r0, #7
 80015d8:	f001 f988 	bl	80028ec <are_settings_changed>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f971 	bl	80018d4 <set_osr_settings>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d111      	bne.n	8001622 <bme280_set_sensor_settings+0x9e>
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4619      	mov	r1, r3
 8001602:	2018      	movs	r0, #24
 8001604:	f001 f972 	bl	80028ec <are_settings_changed>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f9f8 	bl	8001a0e <set_filter_standby_settings>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	6039      	str	r1, [r7, #0]
 8001638:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f001 f971 	bl	8002922 <null_ptr_check>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11e      	bne.n	800168a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800164c:	f107 030e 	add.w	r3, r7, #14
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f81f 	bl	8001696 <bme280_get_sensor_mode>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d107      	bne.n	8001674 <bme280_set_sensor_mode+0x46>
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f000 fadb 	bl	8001c26 <put_device_to_sleep>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fa9d 	bl	8001bc0 <write_power_mode>
 8001686:	4603      	mov	r3, r0
 8001688:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f001 f93e 	bl	8002922 <null_ptr_check>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10e      	bne.n	80016d0 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	20f4      	movs	r0, #244	; 0xf4
 80016ba:	f7ff feba 	bl	8001432 <bme280_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80016e4:	23e0      	movs	r3, #224	; 0xe0
 80016e6:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80016e8:	23b6      	movs	r3, #182	; 0xb6
 80016ea:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f001 f918 	bl	8002922 <null_ptr_check>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10d      	bne.n	800171a <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80016fe:	f107 010d 	add.w	r1, r7, #13
 8001702:	f107 000e 	add.w	r0, r7, #14
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f7ff fec2 	bl	8001492 <bme280_set_regs>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2002      	movs	r0, #2
 8001718:	4798      	blx	r3
	}

	return rslt;
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b08a      	sub	sp, #40	; 0x28
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f001 f8ea 	bl	8002922 <null_ptr_check>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001758:	2b00      	cmp	r3, #0
 800175a:	d124      	bne.n	80017a6 <bme280_get_sensor_data+0x80>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d021      	beq.n	80017a6 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001762:	f107 011c 	add.w	r1, r7, #28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2208      	movs	r2, #8
 800176a:	20f7      	movs	r0, #247	; 0xf7
 800176c:	f7ff fe61 	bl	8001432 <bme280_get_regs>
 8001770:	4603      	mov	r3, r0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800177e:	f107 0210 	add.w	r2, r7, #16
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f815 	bl	80017b8 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3310      	adds	r3, #16
 8001792:	f107 0110 	add.w	r1, r7, #16
 8001796:	7bf8      	ldrb	r0, [r7, #15]
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	f000 f852 	bl	8001842 <bme280_compensate_data>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80017a4:	e002      	b.n	80017ac <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80017a6:	23ff      	movs	r3, #255	; 0xff
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80017ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3302      	adds	r3, #2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3303      	adds	r3, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	031b      	lsls	r3, r3, #12
 80017f6:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3304      	adds	r3, #4
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3305      	adds	r3, #5
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	b2db      	uxtb	r3, r3
 800180c:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	431a      	orrs	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3306      	adds	r3, #6
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3307      	adds	r3, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	431a      	orrs	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d033      	beq.n	80018c4 <bme280_compensate_data+0x82>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d030      	beq.n	80018c4 <bme280_compensate_data+0x82>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d02d      	beq.n	80018c4 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	68b8      	ldr	r0, [r7, #8]
 8001888:	f000 fa1a 	bl	8001cc0 <compensate_temperature>
 800188c:	4602      	mov	r2, r0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	68b8      	ldr	r0, [r7, #8]
 80018a0:	f000 fa6e 	bl	8001d80 <compensate_pressure>
 80018a4:	4602      	mov	r2, r0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80018b4:	6839      	ldr	r1, [r7, #0]
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	f000 fe02 	bl	80024c0 <compensate_humidity>
 80018bc:	4602      	mov	r2, r0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80018c2:	e001      	b.n	80018c8 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80018c4:	23ff      	movs	r3, #255	; 0xff
 80018c6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	68b8      	ldr	r0, [r7, #8]
 80018f4:	f000 f815 	bl	8001922 <set_osr_humidity_settings>
 80018f8:	4603      	mov	r3, r0
 80018fa:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f842 	bl	8001996 <set_osr_press_temp_settings>
 8001912:	4603      	mov	r3, r0
 8001914:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800192c:	23f2      	movs	r3, #242	; 0xf2
 800192e:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	789b      	ldrb	r3, [r3, #2]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	b2db      	uxtb	r3, r3
 800193a:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800193c:	f107 010e 	add.w	r1, r7, #14
 8001940:	f107 000c 	add.w	r0, r7, #12
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	f7ff fda3 	bl	8001492 <bme280_set_regs>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d118      	bne.n	800198a <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001958:	23f4      	movs	r3, #244	; 0xf4
 800195a:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800195c:	7b38      	ldrb	r0, [r7, #12]
 800195e:	f107 010d 	add.w	r1, r7, #13
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	f7ff fd64 	bl	8001432 <bme280_get_regs>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001976:	f107 010d 	add.w	r1, r7, #13
 800197a:	f107 000c 	add.w	r0, r7, #12
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	f7ff fd86 	bl	8001492 <bme280_set_regs>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80019a4:	23f4      	movs	r3, #244	; 0xf4
 80019a6:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80019a8:	7db8      	ldrb	r0, [r7, #22]
 80019aa:	f107 0115 	add.w	r1, r7, #21
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f7ff fd3e 	bl	8001432 <bme280_get_regs>
 80019b6:	4603      	mov	r3, r0
 80019b8:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80019ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11f      	bne.n	8001a02 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80019cc:	f107 0315 	add.w	r3, r7, #21
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f88c 	bl	8001af0 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80019e2:	f107 0315 	add.w	r3, r7, #21
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f89d 	bl	8001b28 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80019ee:	f107 0115 	add.w	r1, r7, #21
 80019f2:	f107 0016 	add.w	r0, r7, #22
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f7ff fd4a 	bl	8001492 <bme280_set_regs>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001a1c:	23f5      	movs	r3, #245	; 0xf5
 8001a1e:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001a20:	7db8      	ldrb	r0, [r7, #22]
 8001a22:	f107 0115 	add.w	r1, r7, #21
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f7ff fd02 	bl	8001432 <bme280_get_regs>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11f      	bne.n	8001a7a <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001a44:	f107 0315 	add.w	r3, r7, #21
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f81b 	bl	8001a86 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001a5a:	f107 0315 	add.w	r3, r7, #21
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f82c 	bl	8001abe <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a66:	f107 0115 	add.w	r1, r7, #21
 8001a6a:	f107 0016 	add.w	r0, r7, #22
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f7ff fd0e 	bl	8001492 <bme280_set_regs>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	f023 031c 	bic.w	r3, r3, #28
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	f003 031c 	and.w	r3, r3, #28
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	701a      	strb	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	f023 031c 	bic.w	r3, r3, #28
 8001b04:	b25a      	sxtb	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	f003 031c 	and.w	r3, r3, #28
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	701a      	strb	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	b25a      	sxtb	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	015b      	lsls	r3, r3, #5
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	701a      	strb	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3302      	adds	r3, #2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	109b      	asrs	r3, r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3303      	adds	r3, #3
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	109b      	asrs	r3, r3, #2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3303      	adds	r3, #3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	711a      	strb	r2, [r3, #4]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001bcc:	23f4      	movs	r3, #244	; 0xf4
 8001bce:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001bd0:	7bb8      	ldrb	r0, [r7, #14]
 8001bd2:	f107 010d 	add.w	r1, r7, #13
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f7ff fc2a 	bl	8001432 <bme280_get_regs>
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d117      	bne.n	8001c1a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001bea:	7b7b      	ldrb	r3, [r7, #13]
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	b25a      	sxtb	r2, r3
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001c06:	f107 010d 	add.w	r1, r7, #13
 8001c0a:	f107 000e 	add.w	r0, r7, #14
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f7ff fc3e 	bl	8001492 <bme280_set_regs>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001c2e:	f107 0110 	add.w	r1, r7, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	20f2      	movs	r0, #242	; 0xf2
 8001c38:	f7ff fbfb 	bl	8001432 <bme280_get_regs>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d118      	bne.n	8001c7a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001c48:	f107 0208 	add.w	r2, r7, #8
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff81 	bl	8001b5a <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fd3f 	bl	80016dc <bme280_soft_reset>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f808 	bl	8001c86 <reload_device_settings>
 8001c76:	4603      	mov	r3, r0
 8001c78:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	201f      	movs	r0, #31
 8001c96:	f7ff fe1d 	bl	80018d4 <set_osr_settings>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	201f      	movs	r0, #31
 8001cac:	f7ff feaf 	bl	8001a0e <set_filter_standby_settings>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <compensate_temperature+0xbc>)
 8001ccc:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001cce:	f242 1334 	movw	r3, #8500	; 0x2134
 8001cd2:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	0052      	lsls	r2, r2, #1
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cea:	461a      	mov	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da01      	bge.n	8001cfa <compensate_temperature+0x3a>
 8001cf6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001cfa:	12db      	asrs	r3, r3, #11
 8001cfc:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	8812      	ldrh	r2, [r2, #0]
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	fb03 f303 	mul.w	r3, r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da01      	bge.n	8001d1a <compensate_temperature+0x5a>
 8001d16:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001d1a:	131b      	asrs	r3, r3, #12
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da02      	bge.n	8001d32 <compensate_temperature+0x72>
 8001d2c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001d30:	333f      	adds	r3, #63	; 0x3f
 8001d32:	139b      	asrs	r3, r3, #14
 8001d34:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3380      	adds	r3, #128	; 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da00      	bge.n	8001d52 <compensate_temperature+0x92>
 8001d50:	33ff      	adds	r3, #255	; 0xff
 8001d52:	121b      	asrs	r3, r3, #8
 8001d54:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	da02      	bge.n	8001d64 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e005      	b.n	8001d70 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dd01      	ble.n	8001d70 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001d70:	69fb      	ldr	r3, [r7, #28]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	fffff060 	.word	0xfffff060

08001d80 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d84:	b0ea      	sub	sp, #424	; 0x1a8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8001d8c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001d90:	4bbe      	ldr	r3, [pc, #760]	; (800208c <compensate_pressure+0x30c>)
 8001d92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 8001d96:	4bbe      	ldr	r3, [pc, #760]	; (8002090 <compensate_pressure+0x310>)
 8001d98:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001d9c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	17da      	asrs	r2, r3, #31
 8001da4:	4698      	mov	r8, r3
 8001da6:	4691      	mov	r9, r2
 8001da8:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001dac:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001db0:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001db4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001db8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dbc:	fb03 f102 	mul.w	r1, r3, r2
 8001dc0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001dc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	18ca      	adds	r2, r1, r3
 8001dce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dd2:	fba3 4503 	umull	r4, r5, r3, r3
 8001dd6:	1953      	adds	r3, r2, r5
 8001dd8:	461d      	mov	r5, r3
 8001dda:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001dde:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	17da      	asrs	r2, r3, #31
 8001de6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dea:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001dee:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001df2:	4603      	mov	r3, r0
 8001df4:	fb03 f205 	mul.w	r2, r3, r5
 8001df8:	460b      	mov	r3, r1
 8001dfa:	fb04 f303 	mul.w	r3, r4, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	4602      	mov	r2, r0
 8001e02:	fba4 2102 	umull	r2, r1, r4, r2
 8001e06:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8001e0a:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8001e0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e12:	4413      	add	r3, r2
 8001e14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e18:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001e1c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8001e20:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001e24:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001e28:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	17da      	asrs	r2, r3, #31
 8001e30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001e34:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e38:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e3c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001e40:	462a      	mov	r2, r5
 8001e42:	fb02 f203 	mul.w	r2, r2, r3
 8001e46:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	441a      	add	r2, r3
 8001e52:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e56:	4621      	mov	r1, r4
 8001e58:	fba3 3101 	umull	r3, r1, r3, r1
 8001e5c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8001e60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001e64:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e68:	18d3      	adds	r3, r2, r3
 8001e6a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001e6e:	f04f 0000 	mov.w	r0, #0
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	0459      	lsls	r1, r3, #17
 8001e7e:	4622      	mov	r2, r4
 8001e80:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001e84:	4623      	mov	r3, r4
 8001e86:	0458      	lsls	r0, r3, #17
 8001e88:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001e8c:	1814      	adds	r4, r2, r0
 8001e8e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001e92:	414b      	adcs	r3, r1
 8001e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e98:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001e9c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001ea0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ea4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	17da      	asrs	r2, r3, #31
 8001eac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001eb0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ec0:	00d9      	lsls	r1, r3, #3
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001ec8:	1814      	adds	r4, r2, r0
 8001eca:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001ece:	414b      	adcs	r3, r1
 8001ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ed4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001ed8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001edc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ee0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ee4:	fb03 f102 	mul.w	r1, r3, r2
 8001ee8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001eec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	18ca      	adds	r2, r1, r3
 8001ef6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001efa:	fba3 3103 	umull	r3, r1, r3, r3
 8001efe:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8001f02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001f06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001f10:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	17da      	asrs	r2, r3, #31
 8001f1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001f20:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001f24:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8001f28:	4622      	mov	r2, r4
 8001f2a:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001f2e:	4641      	mov	r1, r8
 8001f30:	fb01 f202 	mul.w	r2, r1, r2
 8001f34:	464d      	mov	r5, r9
 8001f36:	4618      	mov	r0, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	fb03 f305 	mul.w	r3, r3, r5
 8001f40:	4413      	add	r3, r2
 8001f42:	4602      	mov	r2, r0
 8001f44:	4641      	mov	r1, r8
 8001f46:	fba2 2101 	umull	r2, r1, r2, r1
 8001f4a:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8001f4e:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001f52:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001f56:	4413      	add	r3, r2
 8001f58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f5c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da09      	bge.n	8001f78 <compensate_pressure+0x1f8>
 8001f64:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001f68:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001f6c:	f143 0300 	adc.w	r3, r3, #0
 8001f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f74:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001f78:	f04f 0000 	mov.w	r0, #0
 8001f7c:	f04f 0100 	mov.w	r1, #0
 8001f80:	0a10      	lsrs	r0, r2, #8
 8001f82:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f86:	1219      	asrs	r1, r3, #8
 8001f88:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	17da      	asrs	r2, r3, #31
 8001f94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001f98:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001f9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001fa0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001fa4:	464a      	mov	r2, r9
 8001fa6:	fb02 f203 	mul.w	r2, r2, r3
 8001faa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fae:	4644      	mov	r4, r8
 8001fb0:	fb04 f303 	mul.w	r3, r4, r3
 8001fb4:	441a      	add	r2, r3
 8001fb6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001fba:	4644      	mov	r4, r8
 8001fbc:	fba3 3404 	umull	r3, r4, r3, r4
 8001fc0:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8001fc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fc8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001fde:	464c      	mov	r4, r9
 8001fe0:	0323      	lsls	r3, r4, #12
 8001fe2:	46c4      	mov	ip, r8
 8001fe4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001fe8:	4644      	mov	r4, r8
 8001fea:	0322      	lsls	r2, r4, #12
 8001fec:	1884      	adds	r4, r0, r2
 8001fee:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001ff2:	eb41 0303 	adc.w	r3, r1, r3
 8001ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ffa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001ffe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800200a:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 800200e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8002012:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002016:	1884      	adds	r4, r0, r2
 8002018:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800201c:	eb41 0303 	adc.w	r3, r1, r3
 8002020:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002024:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002028:	88db      	ldrh	r3, [r3, #6]
 800202a:	b29b      	uxth	r3, r3
 800202c:	2200      	movs	r2, #0
 800202e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002032:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002036:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800203a:	4622      	mov	r2, r4
 800203c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002040:	4641      	mov	r1, r8
 8002042:	fb01 f202 	mul.w	r2, r1, r2
 8002046:	464d      	mov	r5, r9
 8002048:	4618      	mov	r0, r3
 800204a:	4621      	mov	r1, r4
 800204c:	4603      	mov	r3, r0
 800204e:	fb03 f305 	mul.w	r3, r3, r5
 8002052:	4413      	add	r3, r2
 8002054:	4602      	mov	r2, r0
 8002056:	4641      	mov	r1, r8
 8002058:	fba2 2101 	umull	r2, r1, r2, r1
 800205c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8002060:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002064:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002068:	4413      	add	r3, r2
 800206a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800206e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8002072:	2b00      	cmp	r3, #0
 8002074:	da0e      	bge.n	8002094 <compensate_pressure+0x314>
 8002076:	1e51      	subs	r1, r2, #1
 8002078:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800207c:	f143 0301 	adc.w	r3, r3, #1
 8002080:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002084:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002088:	e004      	b.n	8002094 <compensate_pressure+0x314>
 800208a:	bf00      	nop
 800208c:	002dc6c0 	.word	0x002dc6c0
 8002090:	00a7d8c0 	.word	0x00a7d8c0
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	1058      	asrs	r0, r3, #1
 800209e:	17d9      	asrs	r1, r3, #31
 80020a0:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 80020a4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f000 81fa 	beq.w	80024a2 <compensate_pressure+0x722>
		var4 = 1048576 - uncomp_data->pressure;
 80020ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80020b8:	2200      	movs	r2, #0
 80020ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020be:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80020c2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80020c6:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 80020ca:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80020ce:	f04f 0000 	mov.w	r0, #0
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	07d9      	lsls	r1, r3, #31
 80020d8:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80020dc:	07d0      	lsls	r0, r2, #31
 80020de:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80020e2:	1a84      	subs	r4, r0, r2
 80020e4:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 80020e8:	eb61 0303 	sbc.w	r3, r1, r3
 80020ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80020f0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020f4:	4622      	mov	r2, r4
 80020f6:	462b      	mov	r3, r5
 80020f8:	1891      	adds	r1, r2, r2
 80020fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80020fc:	415b      	adcs	r3, r3
 80020fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002100:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002104:	4621      	mov	r1, r4
 8002106:	1851      	adds	r1, r2, r1
 8002108:	6739      	str	r1, [r7, #112]	; 0x70
 800210a:	4629      	mov	r1, r5
 800210c:	414b      	adcs	r3, r1
 800210e:	677b      	str	r3, [r7, #116]	; 0x74
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800211c:	4649      	mov	r1, r9
 800211e:	018b      	lsls	r3, r1, #6
 8002120:	4641      	mov	r1, r8
 8002122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002126:	4641      	mov	r1, r8
 8002128:	018a      	lsls	r2, r1, #6
 800212a:	4641      	mov	r1, r8
 800212c:	1889      	adds	r1, r1, r2
 800212e:	66b9      	str	r1, [r7, #104]	; 0x68
 8002130:	4649      	mov	r1, r9
 8002132:	eb43 0101 	adc.w	r1, r3, r1
 8002136:	66f9      	str	r1, [r7, #108]	; 0x6c
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002144:	4649      	mov	r1, r9
 8002146:	008b      	lsls	r3, r1, #2
 8002148:	46c4      	mov	ip, r8
 800214a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800214e:	4641      	mov	r1, r8
 8002150:	008a      	lsls	r2, r1, #2
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	4603      	mov	r3, r0
 8002158:	4622      	mov	r2, r4
 800215a:	189b      	adds	r3, r3, r2
 800215c:	663b      	str	r3, [r7, #96]	; 0x60
 800215e:	460b      	mov	r3, r1
 8002160:	462a      	mov	r2, r5
 8002162:	eb42 0303 	adc.w	r3, r2, r3
 8002166:	667b      	str	r3, [r7, #100]	; 0x64
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002174:	4649      	mov	r1, r9
 8002176:	008b      	lsls	r3, r1, #2
 8002178:	46c4      	mov	ip, r8
 800217a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800217e:	4641      	mov	r1, r8
 8002180:	008a      	lsls	r2, r1, #2
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	4603      	mov	r3, r0
 8002188:	4622      	mov	r2, r4
 800218a:	189b      	adds	r3, r3, r2
 800218c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002190:	462b      	mov	r3, r5
 8002192:	460a      	mov	r2, r1
 8002194:	eb42 0303 	adc.w	r3, r2, r3
 8002198:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800219c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80021a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021a4:	f7fe ff3e 	bl	8001024 <__aeabi_ldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 80021b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80021b4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	17da      	asrs	r2, r3, #31
 80021bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021c4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da08      	bge.n	80021de <compensate_pressure+0x45e>
 80021cc:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80021d0:	1851      	adds	r1, r2, r1
 80021d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80021d4:	f143 0300 	adc.w	r3, r3, #0
 80021d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	0b50      	lsrs	r0, r2, #13
 80021e8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80021ec:	1359      	asrs	r1, r3, #13
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80021f6:	4629      	mov	r1, r5
 80021f8:	fb02 f001 	mul.w	r0, r2, r1
 80021fc:	4621      	mov	r1, r4
 80021fe:	fb01 f103 	mul.w	r1, r1, r3
 8002202:	4401      	add	r1, r0
 8002204:	4620      	mov	r0, r4
 8002206:	fba0 3202 	umull	r3, r2, r0, r2
 800220a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800220e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002212:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002216:	18cb      	adds	r3, r1, r3
 8002218:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800221c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002220:	2b00      	cmp	r3, #0
 8002222:	da08      	bge.n	8002236 <compensate_pressure+0x4b6>
 8002224:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8002228:	1851      	adds	r1, r2, r1
 800222a:	6539      	str	r1, [r7, #80]	; 0x50
 800222c:	f143 0300 	adc.w	r3, r3, #0
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
 8002232:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002236:	f04f 0000 	mov.w	r0, #0
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	0b50      	lsrs	r0, r2, #13
 8002240:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002244:	1359      	asrs	r1, r3, #13
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800224e:	4629      	mov	r1, r5
 8002250:	fb02 f001 	mul.w	r0, r2, r1
 8002254:	4621      	mov	r1, r4
 8002256:	fb01 f103 	mul.w	r1, r1, r3
 800225a:	4401      	add	r1, r0
 800225c:	4620      	mov	r0, r4
 800225e:	fba0 3202 	umull	r3, r2, r0, r2
 8002262:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002266:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800226a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800226e:	18cb      	adds	r3, r1, r3
 8002270:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002274:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002278:	2b00      	cmp	r3, #0
 800227a:	da08      	bge.n	800228e <compensate_pressure+0x50e>
 800227c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8002280:	1851      	adds	r1, r2, r1
 8002282:	64b9      	str	r1, [r7, #72]	; 0x48
 8002284:	f143 0300 	adc.w	r3, r3, #0
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800228a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0e50      	lsrs	r0, r2, #25
 8002298:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 800229c:	1659      	asrs	r1, r3, #25
 800229e:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 80022a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80022a6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	17da      	asrs	r2, r3, #31
 80022ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022b2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022b6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80022ba:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80022be:	462a      	mov	r2, r5
 80022c0:	fb02 f203 	mul.w	r2, r2, r3
 80022c4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80022c8:	4621      	mov	r1, r4
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	441a      	add	r2, r3
 80022d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80022d4:	4621      	mov	r1, r4
 80022d6:	fba3 3101 	umull	r3, r1, r3, r1
 80022da:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80022de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80022e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80022ec:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da07      	bge.n	8002304 <compensate_pressure+0x584>
 80022f4:	4971      	ldr	r1, [pc, #452]	; (80024bc <compensate_pressure+0x73c>)
 80022f6:	1851      	adds	r1, r2, r1
 80022f8:	6439      	str	r1, [r7, #64]	; 0x40
 80022fa:	f143 0300 	adc.w	r3, r3, #0
 80022fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002300:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	0cd0      	lsrs	r0, r2, #19
 800230e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002312:	14d9      	asrs	r1, r3, #19
 8002314:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8002318:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800231c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002320:	1884      	adds	r4, r0, r2
 8002322:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8002326:	eb41 0303 	adc.w	r3, r1, r3
 800232a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800232e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002332:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002336:	4621      	mov	r1, r4
 8002338:	1889      	adds	r1, r1, r2
 800233a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800233e:	4629      	mov	r1, r5
 8002340:	eb43 0101 	adc.w	r1, r3, r1
 8002344:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8002348:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800234c:	2b00      	cmp	r3, #0
 800234e:	da07      	bge.n	8002360 <compensate_pressure+0x5e0>
 8002350:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8002354:	63b9      	str	r1, [r7, #56]	; 0x38
 8002356:	f143 0300 	adc.w	r3, r3, #0
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0a10      	lsrs	r0, r2, #8
 800236a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800236e:	1219      	asrs	r1, r3, #8
 8002370:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002374:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002378:	b21b      	sxth	r3, r3
 800237a:	17da      	asrs	r2, r3, #31
 800237c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002390:	464c      	mov	r4, r9
 8002392:	0123      	lsls	r3, r4, #4
 8002394:	46c4      	mov	ip, r8
 8002396:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800239a:	4644      	mov	r4, r8
 800239c:	0122      	lsls	r2, r4, #4
 800239e:	1884      	adds	r4, r0, r2
 80023a0:	633c      	str	r4, [r7, #48]	; 0x30
 80023a2:	eb41 0303 	adc.w	r3, r1, r3
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
 80023a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80023ac:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80023b0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80023b4:	0fd9      	lsrs	r1, r3, #31
 80023b6:	2000      	movs	r0, #0
 80023b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80023ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80023bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80023c0:	4621      	mov	r1, r4
 80023c2:	1889      	adds	r1, r1, r2
 80023c4:	6239      	str	r1, [r7, #32]
 80023c6:	4629      	mov	r1, r5
 80023c8:	eb43 0101 	adc.w	r1, r3, r1
 80023cc:	6279      	str	r1, [r7, #36]	; 0x24
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023da:	4621      	mov	r1, r4
 80023dc:	084a      	lsrs	r2, r1, #1
 80023de:	4620      	mov	r0, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	460c      	mov	r4, r1
 80023e4:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 80023e8:	104b      	asrs	r3, r1, #1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	1894      	adds	r4, r2, r2
 80023f4:	61bc      	str	r4, [r7, #24]
 80023f6:	415b      	adcs	r3, r3
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fe:	1814      	adds	r4, r2, r0
 8002400:	613c      	str	r4, [r7, #16]
 8002402:	414b      	adcs	r3, r1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002412:	464c      	mov	r4, r9
 8002414:	0163      	lsls	r3, r4, #5
 8002416:	4644      	mov	r4, r8
 8002418:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800241c:	4644      	mov	r4, r8
 800241e:	0162      	lsls	r2, r4, #5
 8002420:	4644      	mov	r4, r8
 8002422:	18a4      	adds	r4, r4, r2
 8002424:	60bc      	str	r4, [r7, #8]
 8002426:	464c      	mov	r4, r9
 8002428:	eb43 0404 	adc.w	r4, r3, r4
 800242c:	60fc      	str	r4, [r7, #12]
 800242e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002432:	4623      	mov	r3, r4
 8002434:	181b      	adds	r3, r3, r0
 8002436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800243a:	462b      	mov	r3, r5
 800243c:	eb41 0303 	adc.w	r3, r1, r3
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002444:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002448:	2b00      	cmp	r3, #0
 800244a:	da07      	bge.n	800245c <compensate_pressure+0x6dc>
 800244c:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	f143 0300 	adc.w	r3, r3, #0
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800245c:	f04f 0000 	mov.w	r0, #0
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	09d0      	lsrs	r0, r2, #7
 8002466:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800246a:	11d9      	asrs	r1, r3, #7
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4613      	mov	r3, r2
 8002472:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 8002476:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800247a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800247e:	429a      	cmp	r2, r3
 8002480:	d204      	bcs.n	800248c <compensate_pressure+0x70c>
			pressure = pressure_min;
 8002482:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002486:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800248a:	e00e      	b.n	80024aa <compensate_pressure+0x72a>
		else if (pressure > pressure_max)
 800248c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002490:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002494:	429a      	cmp	r2, r3
 8002496:	d908      	bls.n	80024aa <compensate_pressure+0x72a>
			pressure = pressure_max;
 8002498:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800249c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024a0:	e003      	b.n	80024aa <compensate_pressure+0x72a>
	} else {
		pressure = pressure_min;
 80024a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 80024aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ba:	bf00      	nop
 80024bc:	0007ffff 	.word	0x0007ffff

080024c0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 80024ca:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80024ce:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80024d8:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	039b      	lsls	r3, r3, #14
 80024e0:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80024e8:	051b      	lsls	r3, r3, #20
 80024ea:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80024f2:	461a      	mov	r2, r3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad2      	subs	r2, r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800250a:	2b00      	cmp	r3, #0
 800250c:	da02      	bge.n	8002514 <compensate_humidity+0x54>
 800250e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002512:	337f      	adds	r3, #127	; 0x7f
 8002514:	13db      	asrs	r3, r3, #15
 8002516:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 800251e:	461a      	mov	r2, r3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	da01      	bge.n	800252e <compensate_humidity+0x6e>
 800252a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800252e:	129b      	asrs	r3, r3, #10
 8002530:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7f1b      	ldrb	r3, [r3, #28]
 8002536:	461a      	mov	r2, r3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	da01      	bge.n	8002546 <compensate_humidity+0x86>
 8002542:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002546:	12db      	asrs	r3, r3, #11
 8002548:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	da01      	bge.n	800255e <compensate_humidity+0x9e>
 800255a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800255e:	129b      	asrs	r3, r3, #10
 8002560:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002564:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800256c:	461a      	mov	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002578:	2b00      	cmp	r3, #0
 800257a:	da02      	bge.n	8002582 <compensate_humidity+0xc2>
 800257c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002580:	333f      	adds	r3, #63	; 0x3f
 8002582:	139b      	asrs	r3, r3, #14
 8002584:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	da02      	bge.n	800259c <compensate_humidity+0xdc>
 8002596:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800259a:	337f      	adds	r3, #127	; 0x7f
 800259c:	13db      	asrs	r3, r3, #15
 800259e:	461a      	mov	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da02      	bge.n	80025ac <compensate_humidity+0xec>
 80025a6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80025aa:	337f      	adds	r3, #127	; 0x7f
 80025ac:	13db      	asrs	r3, r3, #15
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da00      	bge.n	80025b8 <compensate_humidity+0xf8>
 80025b6:	337f      	adds	r3, #127	; 0x7f
 80025b8:	11db      	asrs	r3, r3, #7
 80025ba:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	461a      	mov	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da00      	bge.n	80025ce <compensate_humidity+0x10e>
 80025cc:	330f      	adds	r3, #15
 80025ce:	111b      	asrs	r3, r3, #4
 80025d0:	425b      	negs	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025e0:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80025e8:	bfa8      	it	ge
 80025ea:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80025ee:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da01      	bge.n	80025fa <compensate_humidity+0x13a>
 80025f6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80025fa:	131b      	asrs	r3, r3, #12
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	429a      	cmp	r2, r3
 8002604:	d901      	bls.n	800260a <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800260c:	4618      	mov	r0, r3
 800260e:	372c      	adds	r7, #44	; 0x2c
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	; 0x28
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800261e:	2388      	movs	r3, #136	; 0x88
 8002620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800263a:	f107 010c 	add.w	r1, r7, #12
 800263e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	221a      	movs	r2, #26
 8002646:	f7fe fef4 	bl	8001432 <bme280_get_regs>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8002650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11d      	bne.n	8002694 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f849 	bl	80026f6 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8002664:	23e1      	movs	r3, #225	; 0xe1
 8002666:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800266a:	f107 010c 	add.w	r1, r7, #12
 800266e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2207      	movs	r2, #7
 8002676:	f7fe fedc 	bl	8001432 <bme280_get_regs>
 800267a:	4603      	mov	r3, r0
 800267c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8002680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8df 	bl	8002852 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
 80026b2:	e016      	b.n	80026e2 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	441a      	add	r2, r3
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	440b      	add	r3, r1
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	441a      	add	r2, r3
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4619      	mov	r1, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	440b      	add	r3, r1
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	3301      	adds	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
 80026e2:	7dfa      	ldrb	r2, [r7, #23]
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3e4      	bcc.n	80026b4 <interleave_reg_addr+0x14>
	}
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	3310      	adds	r3, #16
 8002704:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3301      	adds	r3, #1
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b21b      	sxth	r3, r3
 8002716:	4313      	orrs	r3, r2
 8002718:	b21b      	sxth	r3, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3303      	adds	r3, #3
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	b21a      	sxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3302      	adds	r3, #2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b21b      	sxth	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	b21a      	sxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3305      	adds	r3, #5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b21a      	sxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21a      	sxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3307      	adds	r3, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	b21a      	sxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3306      	adds	r3, #6
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b21b      	sxth	r3, r3
 8002766:	4313      	orrs	r3, r2
 8002768:	b21b      	sxth	r3, r3
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3309      	adds	r3, #9
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3308      	adds	r3, #8
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21a      	sxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	330b      	adds	r3, #11
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b21a      	sxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	330a      	adds	r3, #10
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b21b      	sxth	r3, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	b21a      	sxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	330d      	adds	r3, #13
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	330c      	adds	r3, #12
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	330f      	adds	r3, #15
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	b21a      	sxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	330e      	adds	r3, #14
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3311      	adds	r3, #17
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3310      	adds	r3, #16
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3313      	adds	r3, #19
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3312      	adds	r3, #18
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b21b      	sxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b21a      	sxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3315      	adds	r3, #21
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3314      	adds	r3, #20
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	b21b      	sxth	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	b21a      	sxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3317      	adds	r3, #23
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b21a      	sxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3316      	adds	r3, #22
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b21b      	sxth	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	b21a      	sxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7e5a      	ldrb	r2, [r3, #25]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	761a      	strb	r2, [r3, #24]

}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002852:	b480      	push	{r7}
 8002854:	b087      	sub	sp, #28
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3310      	adds	r3, #16
 8002860:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3301      	adds	r3, #1
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	b21a      	sxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b21b      	sxth	r3, r3
 8002872:	4313      	orrs	r3, r2
 8002874:	b21a      	sxth	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	789a      	ldrb	r2, [r3, #2]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3303      	adds	r3, #3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b25b      	sxtb	r3, r3
 800288a:	b29b      	uxth	r3, r3
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	b29b      	uxth	r3, r3
 8002890:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b21b      	sxth	r3, r3
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80028a0:	8a7a      	ldrh	r2, [r7, #18]
 80028a2:	8a3b      	ldrh	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3305      	adds	r3, #5
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80028c8:	89fa      	ldrh	r2, [r7, #14]
 80028ca:	89bb      	ldrh	r3, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3306      	adds	r3, #6
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	460a      	mov	r2, r1
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	79bb      	ldrb	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e001      	b.n	8002916 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <null_ptr_check+0x26>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <null_ptr_check+0x26>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <null_ptr_check+0x26>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002948:	23ff      	movs	r3, #255	; 0xff
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	e001      	b.n	8002952 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <user_i2c_read>:
char temp_string[50];
char press_string[50];
char duty_string[50];

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af02      	add	r7, sp, #8
 8002966:	603a      	str	r2, [r7, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
 800296e:	460b      	mov	r3, r1
 8002970:	71bb      	strb	r3, [r7, #6]
 8002972:	4613      	mov	r3, r2
 8002974:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	b29b      	uxth	r3, r3
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	b299      	uxth	r1, r3
 800297e:	1dba      	adds	r2, r7, #6
 8002980:	230a      	movs	r3, #10
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2301      	movs	r3, #1
 8002986:	4811      	ldr	r0, [pc, #68]	; (80029cc <user_i2c_read+0x6c>)
 8002988:	f001 ffc0 	bl	800490c <HAL_I2C_Master_Transmit>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <user_i2c_read+0x38>
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e014      	b.n	80029c2 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	b21b      	sxth	r3, r3
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	b299      	uxth	r1, r3
 80029a6:	88bb      	ldrh	r3, [r7, #4]
 80029a8:	220a      	movs	r2, #10
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4807      	ldr	r0, [pc, #28]	; (80029cc <user_i2c_read+0x6c>)
 80029b0:	f002 f8aa 	bl	8004b08 <HAL_I2C_Master_Receive>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <user_i2c_read+0x60>
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	e000      	b.n	80029c2 <user_i2c_read+0x62>

  return 0;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000200 	.word	0x20000200

080029d0 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f001 f9b5 	bl	8003d48 <HAL_Delay>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	603a      	str	r2, [r7, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	460b      	mov	r3, r1
 80029f8:	71bb      	strb	r3, [r7, #6]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 80029fe:	88bb      	ldrh	r3, [r7, #4]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 f89e 	bl	8006b44 <malloc>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002a0c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3301      	adds	r3, #1
 8002a18:	88ba      	ldrh	r2, [r7, #4]
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 f8a1 	bl	8006b64 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	b299      	uxth	r1, r3
 8002a2a:	88bb      	ldrh	r3, [r7, #4]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	9200      	str	r2, [sp, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4808      	ldr	r0, [pc, #32]	; (8002a5c <user_i2c_write+0x74>)
 8002a3a:	f001 ff67 	bl	800490c <HAL_I2C_Master_Transmit>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <user_i2c_write+0x62>
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	e003      	b.n	8002a52 <user_i2c_write+0x6a>

  free(buf);
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f004 f882 	bl	8006b54 <free>
  return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000200 	.word	0x20000200

08002a60 <zeroSoftPWM>:

void zeroSoftPWM(uint32_t softpwmbuffer[])
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e008      	b.n	8002a80 <zeroSoftPWM+0x20>
	{
			softpwmbuffer[i]=0;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b63      	cmp	r3, #99	; 0x63
 8002a84:	d9f3      	bls.n	8002a6e <zeroSoftPWM+0xe>
	}
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <setSoftPWM>:

void setSoftPWM(uint16_t pin, uint32_t duty ,uint32_t *softpwmbuffer)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e03d      	b.n	8002b22 <setSoftPWM+0x90>
	{
		if(i<duty)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d21b      	bcs.n	8002ae6 <setSoftPWM+0x54>
		{//set pin
			softpwmbuffer[i]&=(uint32_t)~(pin<<16);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	89fb      	ldrh	r3, [r7, #14]
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	440b      	add	r3, r1
 8002ac8:	4002      	ands	r2, r0
 8002aca:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	89fa      	ldrh	r2, [r7, #14]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4403      	add	r3, r0
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e01a      	b.n	8002b1c <setSoftPWM+0x8a>
		}
		else
		{//reset pin
			softpwmbuffer[i]&=(uint32_t)~(pin);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	4618      	mov	r0, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	440b      	add	r3, r1
 8002afe:	4002      	ands	r2, r0
 8002b00:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i]|=(uint32_t)pin<<16;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	041a      	lsls	r2, r3, #16
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4403      	add	r3, r0
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0;  i < lengthSoftPWMbuffer; ++ i)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b63      	cmp	r3, #99	; 0x63
 8002b26:	d9be      	bls.n	8002aa6 <setSoftPWM+0x14>
		}
	}

}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	0000      	movs	r0, r0
	...

08002b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b3c:	f001 f8a2 	bl	8003c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b40:	f000 f94a 	bl	8002dd8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b44:	f000 faca 	bl	80030dc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b48:	f000 faaa 	bl	80030a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b4c:	f000 f98a 	bl	8002e64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b50:	f000 fa52 	bl	8002ff8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b54:	f000 fa7a 	bl	800304c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002b58:	f000 f9b2 	bl	8002ec0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b5c:	f000 fa00 	bl	8002f60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* OLED init */
  SSD1306_Init();
 8002b60:	f000 fb54 	bl	800320c <SSD1306_Init>

  /* BME280 init */
  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002b64:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <main+0x238>)
 8002b66:	2276      	movs	r2, #118	; 0x76
 8002b68:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 8002b6a:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <main+0x238>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 8002b70:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <main+0x238>)
 8002b72:	4a80      	ldr	r2, [pc, #512]	; (8002d74 <main+0x23c>)
 8002b74:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8002b76:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <main+0x238>)
 8002b78:	4a7f      	ldr	r2, [pc, #508]	; (8002d78 <main+0x240>)
 8002b7a:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8002b7c:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <main+0x238>)
 8002b7e:	4a7f      	ldr	r2, [pc, #508]	; (8002d7c <main+0x244>)
 8002b80:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8002b82:	487b      	ldr	r0, [pc, #492]	; (8002d70 <main+0x238>)
 8002b84:	f7fe fc0a 	bl	800139c <bme280_init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b7c      	ldr	r3, [pc, #496]	; (8002d80 <main+0x248>)
 8002b8e:	701a      	strb	r2, [r3, #0]

  /* BME280 settings */
  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002b90:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <main+0x238>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002b98:	4b75      	ldr	r3, [pc, #468]	; (8002d70 <main+0x238>)
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002ba0:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <main+0x238>)
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8002ba8:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <main+0x238>)
 8002baa:	2204      	movs	r2, #4
 8002bac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002bb0:	496f      	ldr	r1, [pc, #444]	; (8002d70 <main+0x238>)
 8002bb2:	200f      	movs	r0, #15
 8002bb4:	f7fe fce6 	bl	8001584 <bme280_set_sensor_settings>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <main+0x248>)
 8002bbe:	701a      	strb	r2, [r3, #0]

  /* DMA init (SoftPWM) */
  HAL_TIM_Base_Start(&htim1);
 8002bc0:	4870      	ldr	r0, [pc, #448]	; (8002d84 <main+0x24c>)
 8002bc2:	f003 fac5 	bl	8006150 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8002bc6:	4870      	ldr	r0, [pc, #448]	; (8002d88 <main+0x250>)
 8002bc8:	f003 fb0c 	bl	80061e4 <HAL_TIM_Base_Start_IT>
  HAL_DMA_Start(&hdma_tim1_up, 	(uint32_t)&(dataC[0]), (uint32_t)&(GPIOC->BSRR), sizeof(dataC)/sizeof(dataC[0]));
 8002bcc:	496f      	ldr	r1, [pc, #444]	; (8002d8c <main+0x254>)
 8002bce:	2364      	movs	r3, #100	; 0x64
 8002bd0:	4a6f      	ldr	r2, [pc, #444]	; (8002d90 <main+0x258>)
 8002bd2:	4870      	ldr	r0, [pc, #448]	; (8002d94 <main+0x25c>)
 8002bd4:	f001 fa44 	bl	8004060 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <main+0x24c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <main+0x24c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	60da      	str	r2, [r3, #12]
  zeroSoftPWM(dataC);
 8002be8:	4868      	ldr	r0, [pc, #416]	; (8002d8c <main+0x254>)
 8002bea:	f7ff ff39 	bl	8002a60 <zeroSoftPWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* Forced mode setting, switched to SLEEP mode after measurement */
	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002bee:	4960      	ldr	r1, [pc, #384]	; (8002d70 <main+0x238>)
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fe fd1c 	bl	800162e <bme280_set_sensor_mode>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b61      	ldr	r3, [pc, #388]	; (8002d80 <main+0x248>)
 8002bfc:	701a      	strb	r2, [r3, #0]
	dev.delay_ms(40);
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <main+0x238>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2028      	movs	r0, #40	; 0x28
 8002c04:	4798      	blx	r3
	/*Get Data */
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002c06:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <main+0x238>)
 8002c08:	4963      	ldr	r1, [pc, #396]	; (8002d98 <main+0x260>)
 8002c0a:	2007      	movs	r0, #7
 8002c0c:	f7fe fd8b 	bl	8001726 <bme280_get_sensor_data>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <main+0x248>)
 8002c16:	701a      	strb	r2, [r3, #0]
	if(rslt == BME280_OK)
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <main+0x248>)
 8002c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 809b 	bne.w	8002d5a <main+0x222>
	{
		temperature = comp_data.temperature / 100.0;
 8002c24:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <main+0x260>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fbeb 	bl	8000404 <__aeabi_i2d>
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <main+0x264>)
 8002c34:	f7fd fd7a 	bl	800072c <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd ff22 	bl	8000a88 <__aeabi_d2f>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <main+0x268>)
 8002c48:	6013      	str	r3, [r2, #0]
		humidity = comp_data.humidity / 1024.0;
 8002c4a:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <main+0x260>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fbc8 	bl	80003e4 <__aeabi_ui2d>
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <main+0x26c>)
 8002c5a:	f7fd fd67 	bl	800072c <__aeabi_ddiv>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4610      	mov	r0, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	f7fd ff0f 	bl	8000a88 <__aeabi_d2f>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4a4e      	ldr	r2, [pc, #312]	; (8002da8 <main+0x270>)
 8002c6e:	6013      	str	r3, [r2, #0]
		pressure = comp_data.pressure / 10000.0;
 8002c70:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <main+0x260>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fbb5 	bl	80003e4 <__aeabi_ui2d>
 8002c7a:	a33b      	add	r3, pc, #236	; (adr r3, 8002d68 <main+0x230>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fd54 	bl	800072c <__aeabi_ddiv>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fd fefc 	bl	8000a88 <__aeabi_d2f>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a46      	ldr	r2, [pc, #280]	; (8002dac <main+0x274>)
 8002c94:	6013      	str	r3, [r2, #0]

		/*Display Data */
		memset(hum_string, 0, sizeof(hum_string));
 8002c96:	2232      	movs	r2, #50	; 0x32
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4845      	ldr	r0, [pc, #276]	; (8002db0 <main+0x278>)
 8002c9c:	f003 ff70 	bl	8006b80 <memset>
		memset(temp_string, 0, sizeof(temp_string));
 8002ca0:	2232      	movs	r2, #50	; 0x32
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4843      	ldr	r0, [pc, #268]	; (8002db4 <main+0x27c>)
 8002ca6:	f003 ff6b 	bl	8006b80 <memset>
		memset(press_string, 0, sizeof(press_string));
 8002caa:	2232      	movs	r2, #50	; 0x32
 8002cac:	2100      	movs	r1, #0
 8002cae:	4842      	ldr	r0, [pc, #264]	; (8002db8 <main+0x280>)
 8002cb0:	f003 ff66 	bl	8006b80 <memset>
		memset(duty_string, 0, sizeof(duty_string));
 8002cb4:	2232      	movs	r2, #50	; 0x32
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4840      	ldr	r0, [pc, #256]	; (8002dbc <main+0x284>)
 8002cba:	f003 ff61 	bl	8006b80 <memset>

		sprintf(hum_string, "H:%03.1f %% ", humidity);
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <main+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fbb0 	bl	8000428 <__aeabi_f2d>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	493c      	ldr	r1, [pc, #240]	; (8002dc0 <main+0x288>)
 8002cce:	4838      	ldr	r0, [pc, #224]	; (8002db0 <main+0x278>)
 8002cd0:	f004 fcaa 	bl	8007628 <siprintf>
		sprintf(temp_string, "T:%03.1f C ", temperature);
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <main+0x268>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fba5 	bl	8000428 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4938      	ldr	r1, [pc, #224]	; (8002dc4 <main+0x28c>)
 8002ce4:	4833      	ldr	r0, [pc, #204]	; (8002db4 <main+0x27c>)
 8002ce6:	f004 fc9f 	bl	8007628 <siprintf>
		sprintf(press_string, "P:%03.1f hPa ", pressure);
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <main+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fb9a 	bl	8000428 <__aeabi_f2d>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4933      	ldr	r1, [pc, #204]	; (8002dc8 <main+0x290>)
 8002cfa:	482f      	ldr	r0, [pc, #188]	; (8002db8 <main+0x280>)
 8002cfc:	f004 fc94 	bl	8007628 <siprintf>
		sprintf(duty_string, "D:%hu %% ", duty);
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <main+0x294>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4932      	ldr	r1, [pc, #200]	; (8002dd0 <main+0x298>)
 8002d08:	482c      	ldr	r0, [pc, #176]	; (8002dbc <main+0x284>)
 8002d0a:	f004 fc8d 	bl	8007628 <siprintf>

		SSD1306_GotoXY (0, 0);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2000      	movs	r0, #0
 8002d12:	f000 fbe3 	bl	80034dc <SSD1306_GotoXY>
		SSD1306_Puts (hum_string, &Font_11x18, 1);
 8002d16:	2201      	movs	r2, #1
 8002d18:	492e      	ldr	r1, [pc, #184]	; (8002dd4 <main+0x29c>)
 8002d1a:	4825      	ldr	r0, [pc, #148]	; (8002db0 <main+0x278>)
 8002d1c:	f000 fc74 	bl	8003608 <SSD1306_Puts>
		SSD1306_GotoXY (0, 20);
 8002d20:	2114      	movs	r1, #20
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 fbda 	bl	80034dc <SSD1306_GotoXY>
		SSD1306_Puts (temp_string, &Font_11x18, 1);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	492a      	ldr	r1, [pc, #168]	; (8002dd4 <main+0x29c>)
 8002d2c:	4821      	ldr	r0, [pc, #132]	; (8002db4 <main+0x27c>)
 8002d2e:	f000 fc6b 	bl	8003608 <SSD1306_Puts>
		SSD1306_GotoXY (0, 40);
 8002d32:	2128      	movs	r1, #40	; 0x28
 8002d34:	2000      	movs	r0, #0
 8002d36:	f000 fbd1 	bl	80034dc <SSD1306_GotoXY>
		SSD1306_Puts (press_string, &Font_11x18, 1);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4925      	ldr	r1, [pc, #148]	; (8002dd4 <main+0x29c>)
 8002d3e:	481e      	ldr	r0, [pc, #120]	; (8002db8 <main+0x280>)
 8002d40:	f000 fc62 	bl	8003608 <SSD1306_Puts>
		SSD1306_GotoXY (0, 60);
 8002d44:	213c      	movs	r1, #60	; 0x3c
 8002d46:	2000      	movs	r0, #0
 8002d48:	f000 fbc8 	bl	80034dc <SSD1306_GotoXY>
		SSD1306_Puts (duty_string, &Font_11x18, 1);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4921      	ldr	r1, [pc, #132]	; (8002dd4 <main+0x29c>)
 8002d50:	481a      	ldr	r0, [pc, #104]	; (8002dbc <main+0x284>)
 8002d52:	f000 fc59 	bl	8003608 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002d56:	f000 fb1d 	bl	8003394 <SSD1306_UpdateScreen>
	}
	HAL_Delay(100);
 8002d5a:	2064      	movs	r0, #100	; 0x64
 8002d5c:	f000 fff4 	bl	8003d48 <HAL_Delay>
	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002d60:	e745      	b.n	8002bee <main+0xb6>
 8002d62:	bf00      	nop
 8002d64:	f3af 8000 	nop.w
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	40c38800 	.word	0x40c38800
 8002d70:	20000550 	.word	0x20000550
 8002d74:	08002961 	.word	0x08002961
 8002d78:	080029e9 	.word	0x080029e9
 8002d7c:	080029d1 	.word	0x080029d1
 8002d80:	2000059c 	.word	0x2000059c
 8002d84:	20000254 	.word	0x20000254
 8002d88:	2000029c 	.word	0x2000029c
 8002d8c:	200003b0 	.word	0x200003b0
 8002d90:	40011010 	.word	0x40011010
 8002d94:	200002e4 	.word	0x200002e4
 8002d98:	20000590 	.word	0x20000590
 8002d9c:	40590000 	.word	0x40590000
 8002da0:	20000544 	.word	0x20000544
 8002da4:	40900000 	.word	0x40900000
 8002da8:	20000548 	.word	0x20000548
 8002dac:	2000054c 	.word	0x2000054c
 8002db0:	200005a0 	.word	0x200005a0
 8002db4:	200005d4 	.word	0x200005d4
 8002db8:	20000608 	.word	0x20000608
 8002dbc:	2000063c 	.word	0x2000063c
 8002dc0:	08009930 	.word	0x08009930
 8002dc4:	08009940 	.word	0x08009940
 8002dc8:	0800994c 	.word	0x0800994c
 8002dcc:	20000540 	.word	0x20000540
 8002dd0:	0800995c 	.word	0x0800995c
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b090      	sub	sp, #64	; 0x40
 8002ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dde:	f107 0318 	add.w	r3, r7, #24
 8002de2:	2228      	movs	r2, #40	; 0x28
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 feca 	bl	8006b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e1c:	f107 0318 	add.w	r3, r7, #24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 fd2b 	bl	800587c <HAL_RCC_OscConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002e2c:	f000 f9e8 	bl	8003200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e30:	230f      	movs	r3, #15
 8002e32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e34:	2302      	movs	r3, #2
 8002e36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 ff98 	bl	8005d80 <HAL_RCC_ClockConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002e56:	f000 f9d3 	bl	8003200 <Error_Handler>
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3740      	adds	r7, #64	; 0x40
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <MX_I2C1_Init+0x54>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <MX_I2C1_Init+0x58>)
 8002e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e94:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ea0:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <MX_I2C1_Init+0x50>)
 8002ea2:	f001 fbef 	bl	8004684 <HAL_I2C_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002eac:	f000 f9a8 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000200 	.word	0x20000200
 8002eb8:	40005400 	.word	0x40005400
 8002ebc:	00061a80 	.word	0x00061a80

08002ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <MX_TIM1_Init+0x9c>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ef0:	2263      	movs	r2, #99	; 0x63
 8002ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f06:	4814      	ldr	r0, [pc, #80]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f08:	f003 f8d2 	bl	80060b0 <HAL_TIM_Base_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8002f12:	f000 f975 	bl	8003200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	4619      	mov	r1, r3
 8002f22:	480d      	ldr	r0, [pc, #52]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f24:	f003 fab8 	bl	8006498 <HAL_TIM_ConfigClockSource>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8002f2e:	f000 f967 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f32:	2320      	movs	r3, #32
 8002f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4806      	ldr	r0, [pc, #24]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f40:	f003 fc8a 	bl	8006858 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002f4a:	f000 f959 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000254 	.word	0x20000254
 8002f5c:	40012c00 	.word	0x40012c00

08002f60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f74:	463b      	mov	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6000-1;
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f86:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12-1;
 8002f92:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f94:	220b      	movs	r2, #11
 8002f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fa4:	4813      	ldr	r0, [pc, #76]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fa6:	f003 f883 	bl	80060b0 <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fb0:	f000 f926 	bl	8003200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fc2:	f003 fa69 	bl	8006498 <HAL_TIM_ConfigClockSource>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fcc:	f000 f918 	bl	8003200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fd8:	463b      	mov	r3, r7
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fde:	f003 fc3b 	bl	8006858 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fe8:	f000 f90a 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000029c 	.word	0x2000029c

08002ff8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <MX_USART1_UART_Init+0x50>)
 8003000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 800301e:	220c      	movs	r2, #12
 8003020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800302e:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003030:	f003 fc82 	bl	8006938 <HAL_UART_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800303a:	f000 f8e1 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000328 	.word	0x20000328
 8003048:	40013800 	.word	0x40013800

0800304c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <MX_USART2_UART_Init+0x50>)
 8003054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_USART2_UART_Init+0x4c>)
 8003084:	f003 fc58 	bl	8006938 <HAL_UART_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800308e:	f000 f8b7 	bl	8003200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000036c 	.word	0x2000036c
 800309c:	40004400 	.word	0x40004400

080030a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <MX_DMA_Init+0x38>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <MX_DMA_Init+0x38>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6153      	str	r3, [r2, #20]
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <MX_DMA_Init+0x38>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	200f      	movs	r0, #15
 80030c4:	f000 ff3b 	bl	8003f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80030c8:	200f      	movs	r0, #15
 80030ca:	f000 ff54 	bl	8003f76 <HAL_NVIC_EnableIRQ>

}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000

080030dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <MX_GPIO_Init+0xa8>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a23      	ldr	r2, [pc, #140]	; (8003184 <MX_GPIO_Init+0xa8>)
 80030f6:	f043 0310 	orr.w	r3, r3, #16
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <MX_GPIO_Init+0xa8>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <MX_GPIO_Init+0xa8>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <MX_GPIO_Init+0xa8>)
 800310e:	f043 0320 	orr.w	r3, r3, #32
 8003112:	6193      	str	r3, [r2, #24]
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <MX_GPIO_Init+0xa8>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <MX_GPIO_Init+0xa8>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4a17      	ldr	r2, [pc, #92]	; (8003184 <MX_GPIO_Init+0xa8>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	4b15      	ldr	r3, [pc, #84]	; (8003184 <MX_GPIO_Init+0xa8>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <MX_GPIO_Init+0xa8>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a11      	ldr	r2, [pc, #68]	; (8003184 <MX_GPIO_Init+0xa8>)
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_GPIO_Init+0xa8>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003150:	2200      	movs	r2, #0
 8003152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003156:	480c      	ldr	r0, [pc, #48]	; (8003188 <MX_GPIO_Init+0xac>)
 8003158:	f001 fa7c 	bl	8004654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800315c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003162:	2301      	movs	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	2302      	movs	r3, #2
 800316c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	4619      	mov	r1, r3
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <MX_GPIO_Init+0xac>)
 8003176:	f001 f8e9 	bl	800434c <HAL_GPIO_Init>

}
 800317a:	bf00      	nop
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	40011000 	.word	0x40011000

0800318c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d11f      	bne.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		duty=(-100*temperature/3)+(2500/3);
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4912      	ldr	r1, [pc, #72]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd fdce 	bl	8000d44 <__aeabi_fmul>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4911      	ldr	r1, [pc, #68]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd fe7d 	bl	8000eac <__aeabi_fdiv>
 80031b2:	4603      	mov	r3, r0
 80031b4:	490f      	ldr	r1, [pc, #60]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fcbc 	bl	8000b34 <__addsf3>
 80031bc:	4603      	mov	r3, r0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd ff10 	bl	8000fe4 <__aeabi_f2uiz>
 80031c4:	4603      	mov	r3, r0
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80031ca:	801a      	strh	r2, [r3, #0]
		setSoftPWM(GPIO_PIN_13, duty, (uint32_t*)&dataC);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80031d2:	4619      	mov	r1, r3
 80031d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031d8:	f7ff fc5b 	bl	8002a92 <setSoftPWM>
		{
			duty_down=0;
		}
		*/
	}
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000029c 	.word	0x2000029c
 80031e8:	20000544 	.word	0x20000544
 80031ec:	c2c80000 	.word	0xc2c80000
 80031f0:	40400000 	.word	0x40400000
 80031f4:	44504000 	.word	0x44504000
 80031f8:	20000540 	.word	0x20000540
 80031fc:	200003b0 	.word	0x200003b0

08003200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003208:	e7fe      	b.n	8003208 <Error_Handler+0x8>
	...

0800320c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003212:	f000 fa1f 	bl	8003654 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003216:	f644 6320 	movw	r3, #20000	; 0x4e20
 800321a:	2201      	movs	r2, #1
 800321c:	2178      	movs	r1, #120	; 0x78
 800321e:	485b      	ldr	r0, [pc, #364]	; (800338c <SSD1306_Init+0x180>)
 8003220:	f001 fed2 	bl	8004fc8 <HAL_I2C_IsDeviceReady>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800322a:	2300      	movs	r3, #0
 800322c:	e0a9      	b.n	8003382 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800322e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003232:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003234:	e002      	b.n	800323c <SSD1306_Init+0x30>
		p--;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3b01      	subs	r3, #1
 800323a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003242:	22ae      	movs	r2, #174	; 0xae
 8003244:	2100      	movs	r1, #0
 8003246:	2078      	movs	r0, #120	; 0x78
 8003248:	f000 fa7e 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800324c:	2220      	movs	r2, #32
 800324e:	2100      	movs	r1, #0
 8003250:	2078      	movs	r0, #120	; 0x78
 8003252:	f000 fa79 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003256:	2210      	movs	r2, #16
 8003258:	2100      	movs	r1, #0
 800325a:	2078      	movs	r0, #120	; 0x78
 800325c:	f000 fa74 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003260:	22b0      	movs	r2, #176	; 0xb0
 8003262:	2100      	movs	r1, #0
 8003264:	2078      	movs	r0, #120	; 0x78
 8003266:	f000 fa6f 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800326a:	22c8      	movs	r2, #200	; 0xc8
 800326c:	2100      	movs	r1, #0
 800326e:	2078      	movs	r0, #120	; 0x78
 8003270:	f000 fa6a 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2078      	movs	r0, #120	; 0x78
 800327a:	f000 fa65 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800327e:	2210      	movs	r2, #16
 8003280:	2100      	movs	r1, #0
 8003282:	2078      	movs	r0, #120	; 0x78
 8003284:	f000 fa60 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	2100      	movs	r1, #0
 800328c:	2078      	movs	r0, #120	; 0x78
 800328e:	f000 fa5b 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003292:	2281      	movs	r2, #129	; 0x81
 8003294:	2100      	movs	r1, #0
 8003296:	2078      	movs	r0, #120	; 0x78
 8003298:	f000 fa56 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	2100      	movs	r1, #0
 80032a0:	2078      	movs	r0, #120	; 0x78
 80032a2:	f000 fa51 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80032a6:	22a1      	movs	r2, #161	; 0xa1
 80032a8:	2100      	movs	r1, #0
 80032aa:	2078      	movs	r0, #120	; 0x78
 80032ac:	f000 fa4c 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80032b0:	22a6      	movs	r2, #166	; 0xa6
 80032b2:	2100      	movs	r1, #0
 80032b4:	2078      	movs	r0, #120	; 0x78
 80032b6:	f000 fa47 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80032ba:	22a8      	movs	r2, #168	; 0xa8
 80032bc:	2100      	movs	r1, #0
 80032be:	2078      	movs	r0, #120	; 0x78
 80032c0:	f000 fa42 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80032c4:	223f      	movs	r2, #63	; 0x3f
 80032c6:	2100      	movs	r1, #0
 80032c8:	2078      	movs	r0, #120	; 0x78
 80032ca:	f000 fa3d 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80032ce:	22a4      	movs	r2, #164	; 0xa4
 80032d0:	2100      	movs	r1, #0
 80032d2:	2078      	movs	r0, #120	; 0x78
 80032d4:	f000 fa38 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80032d8:	22d3      	movs	r2, #211	; 0xd3
 80032da:	2100      	movs	r1, #0
 80032dc:	2078      	movs	r0, #120	; 0x78
 80032de:	f000 fa33 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	2078      	movs	r0, #120	; 0x78
 80032e8:	f000 fa2e 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80032ec:	22d5      	movs	r2, #213	; 0xd5
 80032ee:	2100      	movs	r1, #0
 80032f0:	2078      	movs	r0, #120	; 0x78
 80032f2:	f000 fa29 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80032f6:	22f0      	movs	r2, #240	; 0xf0
 80032f8:	2100      	movs	r1, #0
 80032fa:	2078      	movs	r0, #120	; 0x78
 80032fc:	f000 fa24 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003300:	22d9      	movs	r2, #217	; 0xd9
 8003302:	2100      	movs	r1, #0
 8003304:	2078      	movs	r0, #120	; 0x78
 8003306:	f000 fa1f 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800330a:	2222      	movs	r2, #34	; 0x22
 800330c:	2100      	movs	r1, #0
 800330e:	2078      	movs	r0, #120	; 0x78
 8003310:	f000 fa1a 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003314:	22da      	movs	r2, #218	; 0xda
 8003316:	2100      	movs	r1, #0
 8003318:	2078      	movs	r0, #120	; 0x78
 800331a:	f000 fa15 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800331e:	2212      	movs	r2, #18
 8003320:	2100      	movs	r1, #0
 8003322:	2078      	movs	r0, #120	; 0x78
 8003324:	f000 fa10 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003328:	22db      	movs	r2, #219	; 0xdb
 800332a:	2100      	movs	r1, #0
 800332c:	2078      	movs	r0, #120	; 0x78
 800332e:	f000 fa0b 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003332:	2220      	movs	r2, #32
 8003334:	2100      	movs	r1, #0
 8003336:	2078      	movs	r0, #120	; 0x78
 8003338:	f000 fa06 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800333c:	228d      	movs	r2, #141	; 0x8d
 800333e:	2100      	movs	r1, #0
 8003340:	2078      	movs	r0, #120	; 0x78
 8003342:	f000 fa01 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003346:	2214      	movs	r2, #20
 8003348:	2100      	movs	r1, #0
 800334a:	2078      	movs	r0, #120	; 0x78
 800334c:	f000 f9fc 	bl	8003748 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003350:	22af      	movs	r2, #175	; 0xaf
 8003352:	2100      	movs	r1, #0
 8003354:	2078      	movs	r0, #120	; 0x78
 8003356:	f000 f9f7 	bl	8003748 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800335a:	222e      	movs	r2, #46	; 0x2e
 800335c:	2100      	movs	r1, #0
 800335e:	2078      	movs	r0, #120	; 0x78
 8003360:	f000 f9f2 	bl	8003748 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003364:	2000      	movs	r0, #0
 8003366:	f000 f843 	bl	80033f0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800336a:	f000 f813 	bl	8003394 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <SSD1306_Init+0x184>)
 8003370:	2200      	movs	r2, #0
 8003372:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <SSD1306_Init+0x184>)
 8003376:	2200      	movs	r2, #0
 8003378:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <SSD1306_Init+0x184>)
 800337c:	2201      	movs	r2, #1
 800337e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000200 	.word	0x20000200
 8003390:	20000a70 	.word	0x20000a70

08003394 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800339a:	2300      	movs	r3, #0
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	e01d      	b.n	80033dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	3b50      	subs	r3, #80	; 0x50
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	2100      	movs	r1, #0
 80033aa:	2078      	movs	r0, #120	; 0x78
 80033ac:	f000 f9cc 	bl	8003748 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2078      	movs	r0, #120	; 0x78
 80033b6:	f000 f9c7 	bl	8003748 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80033ba:	2210      	movs	r2, #16
 80033bc:	2100      	movs	r1, #0
 80033be:	2078      	movs	r0, #120	; 0x78
 80033c0:	f000 f9c2 	bl	8003748 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	4a08      	ldr	r2, [pc, #32]	; (80033ec <SSD1306_UpdateScreen+0x58>)
 80033ca:	441a      	add	r2, r3
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	2078      	movs	r0, #120	; 0x78
 80033d2:	f000 f953 	bl	800367c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	3301      	adds	r3, #1
 80033da:	71fb      	strb	r3, [r7, #7]
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d9de      	bls.n	80033a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000670 	.word	0x20000670

080033f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <SSD1306_Fill+0x14>
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <SSD1306_Fill+0x16>
 8003404:	23ff      	movs	r3, #255	; 0xff
 8003406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800340a:	4619      	mov	r1, r3
 800340c:	4803      	ldr	r0, [pc, #12]	; (800341c <SSD1306_Fill+0x2c>)
 800340e:	f003 fbb7 	bl	8006b80 <memset>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000670 	.word	0x20000670

08003420 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	460b      	mov	r3, r1
 800342c:	80bb      	strh	r3, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	70fb      	strb	r3, [r7, #3]
	if (
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b7f      	cmp	r3, #127	; 0x7f
 8003436:	d848      	bhi.n	80034ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003438:	88bb      	ldrh	r3, [r7, #4]
 800343a:	2b3f      	cmp	r3, #63	; 0x3f
 800343c:	d845      	bhi.n	80034ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <SSD1306_DrawPixel+0xb4>)
 8003440:	791b      	ldrb	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11a      	bne.n	8003490 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	b298      	uxth	r0, r3
 8003462:	4603      	mov	r3, r0
 8003464:	01db      	lsls	r3, r3, #7
 8003466:	4413      	add	r3, r2
 8003468:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <SSD1306_DrawPixel+0xb8>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	b25a      	sxtb	r2, r3
 800346e:	88bb      	ldrh	r3, [r7, #4]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	b25b      	sxtb	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	b259      	sxtb	r1, r3
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	4603      	mov	r3, r0
 8003484:	01db      	lsls	r3, r3, #7
 8003486:	4413      	add	r3, r2
 8003488:	b2c9      	uxtb	r1, r1
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <SSD1306_DrawPixel+0xb8>)
 800348c:	54d1      	strb	r1, [r2, r3]
 800348e:	e01d      	b.n	80034cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	b298      	uxth	r0, r3
 8003498:	4603      	mov	r3, r0
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	4413      	add	r3, r2
 800349e:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <SSD1306_DrawPixel+0xb8>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	b25a      	sxtb	r2, r3
 80034a4:	88bb      	ldrh	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	4013      	ands	r3, r2
 80034b8:	b259      	sxtb	r1, r3
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	4603      	mov	r3, r0
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	4413      	add	r3, r2
 80034c2:	b2c9      	uxtb	r1, r1
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <SSD1306_DrawPixel+0xb8>)
 80034c6:	54d1      	strb	r1, [r2, r3]
 80034c8:	e000      	b.n	80034cc <SSD1306_DrawPixel+0xac>
		return;
 80034ca:	bf00      	nop
	}
}
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	20000a70 	.word	0x20000a70
 80034d8:	20000670 	.word	0x20000670

080034dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	460a      	mov	r2, r1
 80034e6:	80fb      	strh	r3, [r7, #6]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <SSD1306_GotoXY+0x28>)
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80034f2:	4a04      	ldr	r2, [pc, #16]	; (8003504 <SSD1306_GotoXY+0x28>)
 80034f4:	88bb      	ldrh	r3, [r7, #4]
 80034f6:	8053      	strh	r3, [r2, #2]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000a70 	.word	0x20000a70

08003508 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4613      	mov	r3, r2
 8003516:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <SSD1306_Putc+0xfc>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4413      	add	r3, r2
	if (
 8003524:	2b7f      	cmp	r3, #127	; 0x7f
 8003526:	dc07      	bgt.n	8003538 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <SSD1306_Putc+0xfc>)
 800352a:	885b      	ldrh	r3, [r3, #2]
 800352c:	461a      	mov	r2, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003534:	2b3f      	cmp	r3, #63	; 0x3f
 8003536:	dd01      	ble.n	800353c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003538:	2300      	movs	r3, #0
 800353a:	e05e      	b.n	80035fa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e04b      	b.n	80035da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	3b20      	subs	r3, #32
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	7849      	ldrb	r1, [r1, #1]
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4619      	mov	r1, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	440b      	add	r3, r1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e030      	b.n	80035c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d010      	beq.n	8003598 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <SSD1306_Putc+0xfc>)
 8003578:	881a      	ldrh	r2, [r3, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	b29b      	uxth	r3, r3
 800357e:	4413      	add	r3, r2
 8003580:	b298      	uxth	r0, r3
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <SSD1306_Putc+0xfc>)
 8003584:	885a      	ldrh	r2, [r3, #2]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	b29b      	uxth	r3, r3
 800358a:	4413      	add	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	79ba      	ldrb	r2, [r7, #6]
 8003590:	4619      	mov	r1, r3
 8003592:	f7ff ff45 	bl	8003420 <SSD1306_DrawPixel>
 8003596:	e014      	b.n	80035c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <SSD1306_Putc+0xfc>)
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	b298      	uxth	r0, r3
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <SSD1306_Putc+0xfc>)
 80035a6:	885a      	ldrh	r2, [r3, #2]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	b299      	uxth	r1, r3
 80035b0:	79bb      	ldrb	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	f7ff ff2f 	bl	8003420 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3301      	adds	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d3c8      	bcc.n	8003566 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	461a      	mov	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d3ad      	bcc.n	8003542 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <SSD1306_Putc+0xfc>)
 80035e8:	881a      	ldrh	r2, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <SSD1306_Putc+0xfc>)
 80035f6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80035f8:	79fb      	ldrb	r3, [r7, #7]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000a70 	.word	0x20000a70

08003608 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003616:	e012      	b.n	800363e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	79fa      	ldrb	r2, [r7, #7]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff71 	bl	8003508 <SSD1306_Putc>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d002      	beq.n	8003638 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	e008      	b.n	800364a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e8      	bne.n	8003618 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	781b      	ldrb	r3, [r3, #0]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <ssd1306_I2C_Init+0x24>)
 800365c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800365e:	e002      	b.n	8003666 <ssd1306_I2C_Init+0x12>
		p--;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f9      	bne.n	8003660 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	0003d090 	.word	0x0003d090

0800367c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b0c7      	sub	sp, #284	; 0x11c
 8003680:	af02      	add	r7, sp, #8
 8003682:	4604      	mov	r4, r0
 8003684:	4608      	mov	r0, r1
 8003686:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800368a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800368e:	600a      	str	r2, [r1, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003696:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800369a:	4622      	mov	r2, r4
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036a2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80036a6:	4602      	mov	r2, r0
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036b2:	460a      	mov	r2, r1
 80036b4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80036b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036c2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80036c6:	7812      	ldrb	r2, [r2, #0]
 80036c8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80036d0:	e015      	b.n	80036fe <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80036d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80036d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036da:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	441a      	add	r2, r3
 80036e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80036e6:	3301      	adds	r3, #1
 80036e8:	7811      	ldrb	r1, [r2, #0]
 80036ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036ee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80036f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80036f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80036f8:	3301      	adds	r3, #1
 80036fa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80036fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003702:	b29b      	uxth	r3, r3
 8003704:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003708:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d8df      	bhi.n	80036d2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003716:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	b299      	uxth	r1, r3
 800371e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003722:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	b29b      	uxth	r3, r3
 800372c:	f107 020c 	add.w	r2, r7, #12
 8003730:	200a      	movs	r0, #10
 8003732:	9000      	str	r0, [sp, #0]
 8003734:	4803      	ldr	r0, [pc, #12]	; (8003744 <ssd1306_I2C_WriteMulti+0xc8>)
 8003736:	f001 f8e9 	bl	800490c <HAL_I2C_Master_Transmit>
}
 800373a:	bf00      	nop
 800373c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	20000200 	.word	0x20000200

08003748 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
 8003752:	460b      	mov	r3, r1
 8003754:	71bb      	strb	r3, [r7, #6]
 8003756:	4613      	mov	r3, r2
 8003758:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800375a:	79bb      	ldrb	r3, [r7, #6]
 800375c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800375e:	797b      	ldrb	r3, [r7, #5]
 8003760:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	b299      	uxth	r1, r3
 8003766:	f107 020c 	add.w	r2, r7, #12
 800376a:	230a      	movs	r3, #10
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2302      	movs	r3, #2
 8003770:	4803      	ldr	r0, [pc, #12]	; (8003780 <ssd1306_I2C_Write+0x38>)
 8003772:	f001 f8cb 	bl	800490c <HAL_I2C_Master_Transmit>
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000200 	.word	0x20000200

08003784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_MspInit+0x5c>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <HAL_MspInit+0x5c>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6193      	str	r3, [r2, #24]
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_MspInit+0x5c>)
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_MspInit+0x5c>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_MspInit+0x5c>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	61d3      	str	r3, [r2, #28]
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_MspInit+0x5c>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037ba:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_MspInit+0x60>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_MspInit+0x60>)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010000 	.word	0x40010000

080037e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_I2C_MspInit+0x70>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d123      	bne.n	8003850 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_I2C_MspInit+0x74>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <HAL_I2C_MspInit+0x74>)
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	6193      	str	r3, [r2, #24]
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_I2C_MspInit+0x74>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003820:	23c0      	movs	r3, #192	; 0xc0
 8003822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003824:	2312      	movs	r3, #18
 8003826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4619      	mov	r1, r3
 8003832:	480b      	ldr	r0, [pc, #44]	; (8003860 <HAL_I2C_MspInit+0x78>)
 8003834:	f000 fd8a 	bl	800434c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_I2C_MspInit+0x74>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <HAL_I2C_MspInit+0x74>)
 800383e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003842:	61d3      	str	r3, [r2, #28]
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_I2C_MspInit+0x74>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003850:	bf00      	nop
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40005400 	.word	0x40005400
 800385c:	40021000 	.word	0x40021000
 8003860:	40010c00 	.word	0x40010c00

08003864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2a      	ldr	r2, [pc, #168]	; (800391c <HAL_TIM_Base_MspInit+0xb8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d134      	bne.n	80038e0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_TIM_Base_MspInit+0xbc>)
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_TIM_Base_MspInit+0xbc>)
 800387c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003880:	6193      	str	r3, [r2, #24]
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_TIM_Base_MspInit+0xbc>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 8003890:	4a25      	ldr	r2, [pc, #148]	; (8003928 <HAL_TIM_Base_MspInit+0xc4>)
 8003892:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 8003896:	2210      	movs	r2, #16
 8003898:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80038a0:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038a6:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ac:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038b8:	2220      	movs	r2, #32
 80038ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80038c2:	4818      	ldr	r0, [pc, #96]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038c4:	f000 fb72 	bl	8003fac <HAL_DMA_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80038ce:	f7ff fc97 	bl	8003200 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a13      	ldr	r2, [pc, #76]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038d6:	621a      	str	r2, [r3, #32]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_TIM_Base_MspInit+0xc0>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038de:	e018      	b.n	8003912 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d113      	bne.n	8003912 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_TIM_Base_MspInit+0xbc>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_TIM_Base_MspInit+0xbc>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	61d3      	str	r3, [r2, #28]
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_TIM_Base_MspInit+0xbc>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2100      	movs	r1, #0
 8003906:	201c      	movs	r0, #28
 8003908:	f000 fb19 	bl	8003f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800390c:	201c      	movs	r0, #28
 800390e:	f000 fb32 	bl	8003f76 <HAL_NVIC_EnableIRQ>
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40021000 	.word	0x40021000
 8003924:	200002e4 	.word	0x200002e4
 8003928:	40020058 	.word	0x40020058

0800392c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003934:	f107 0318 	add.w	r3, r7, #24
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a37      	ldr	r2, [pc, #220]	; (8003a24 <HAL_UART_MspInit+0xf8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d132      	bne.n	80039b2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 8003952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003956:	6193      	str	r3, [r2, #24]
 8003958:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6193      	str	r3, [r2, #24]
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800397c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398a:	f107 0318 	add.w	r3, r7, #24
 800398e:	4619      	mov	r1, r3
 8003990:	4826      	ldr	r0, [pc, #152]	; (8003a2c <HAL_UART_MspInit+0x100>)
 8003992:	f000 fcdb 	bl	800434c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800399a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 0318 	add.w	r3, r7, #24
 80039a8:	4619      	mov	r1, r3
 80039aa:	4820      	ldr	r0, [pc, #128]	; (8003a2c <HAL_UART_MspInit+0x100>)
 80039ac:	f000 fcce 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039b0:	e034      	b.n	8003a1c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <HAL_UART_MspInit+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d12f      	bne.n	8003a1c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c6:	61d3      	str	r3, [r2, #28]
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	6193      	str	r3, [r2, #24]
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_UART_MspInit+0xfc>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039ec:	2304      	movs	r3, #4
 80039ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	2302      	movs	r3, #2
 80039f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f8:	f107 0318 	add.w	r3, r7, #24
 80039fc:	4619      	mov	r1, r3
 80039fe:	480b      	ldr	r0, [pc, #44]	; (8003a2c <HAL_UART_MspInit+0x100>)
 8003a00:	f000 fca4 	bl	800434c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a04:	2308      	movs	r3, #8
 8003a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a10:	f107 0318 	add.w	r3, r7, #24
 8003a14:	4619      	mov	r1, r3
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <HAL_UART_MspInit+0x100>)
 8003a18:	f000 fc98 	bl	800434c <HAL_GPIO_Init>
}
 8003a1c:	bf00      	nop
 8003a1e:	3728      	adds	r7, #40	; 0x28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40010800 	.word	0x40010800
 8003a30:	40004400 	.word	0x40004400

08003a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <NMI_Handler+0x4>

08003a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3e:	e7fe      	b.n	8003a3e <HardFault_Handler+0x4>

08003a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <MemManage_Handler+0x4>

08003a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a4a:	e7fe      	b.n	8003a4a <BusFault_Handler+0x4>

08003a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a50:	e7fe      	b.n	8003a50 <UsageFault_Handler+0x4>

08003a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a7a:	f000 f949 	bl	8003d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <DMA1_Channel5_IRQHandler+0x10>)
 8003a8a:	f000 fb2b 	bl	80040e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200002e4 	.word	0x200002e4

08003a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <TIM2_IRQHandler+0x10>)
 8003a9e:	f002 fbf3 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000029c 	.word	0x2000029c

08003aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
	return 1;
 8003ab0:	2301      	movs	r3, #1
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <_kill>:

int _kill(int pid, int sig)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ac4:	f003 f814 	bl	8006af0 <__errno>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2216      	movs	r2, #22
 8003acc:	601a      	str	r2, [r3, #0]
	return -1;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_exit>:

void _exit (int status)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ffe7 	bl	8003aba <_kill>
	while (1) {}		/* Make sure we hang here */
 8003aec:	e7fe      	b.n	8003aec <_exit+0x12>

08003aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e00a      	b.n	8003b16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b00:	f3af 8000 	nop.w
 8003b04:	4601      	mov	r1, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	60ba      	str	r2, [r7, #8]
 8003b0c:	b2ca      	uxtb	r2, r1
 8003b0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3301      	adds	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dbf0      	blt.n	8003b00 <_read+0x12>
	}

return len;
 8003b1e:	687b      	ldr	r3, [r7, #4]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e009      	b.n	8003b4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	60ba      	str	r2, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	dbf1      	blt.n	8003b3a <_write+0x12>
	}
	return len;
 8003b56:	687b      	ldr	r3, [r7, #4]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_close>:

int _close(int file)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	return -1;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b86:	605a      	str	r2, [r3, #4]
	return 0;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <_isatty>:

int _isatty(int file)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	return 1;
 8003b9c:	2301      	movs	r3, #1
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <_sbrk+0x5c>)
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <_sbrk+0x60>)
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <_sbrk+0x64>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <_sbrk+0x64>)
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <_sbrk+0x68>)
 8003be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <_sbrk+0x64>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d207      	bcs.n	8003c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bf0:	f002 ff7e 	bl	8006af0 <__errno>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e009      	b.n	8003c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c06:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <_sbrk+0x64>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <_sbrk+0x64>)
 8003c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c12:	68fb      	ldr	r3, [r7, #12]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20005000 	.word	0x20005000
 8003c20:	00000400 	.word	0x00000400
 8003c24:	20000a78 	.word	0x20000a78
 8003c28:	20000a90 	.word	0x20000a90

08003c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c38:	480c      	ldr	r0, [pc, #48]	; (8003c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c3a:	490d      	ldr	r1, [pc, #52]	; (8003c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c40:	e002      	b.n	8003c48 <LoopCopyDataInit>

08003c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c46:	3304      	adds	r3, #4

08003c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c4c:	d3f9      	bcc.n	8003c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c50:	4c0a      	ldr	r4, [pc, #40]	; (8003c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c54:	e001      	b.n	8003c5a <LoopFillZerobss>

08003c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c58:	3204      	adds	r2, #4

08003c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c5c:	d3fb      	bcc.n	8003c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c5e:	f7ff ffe5 	bl	8003c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c62:	f002 ff4b 	bl	8006afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c66:	f7fe ff67 	bl	8002b38 <main>
  bx lr
 8003c6a:	4770      	bx	lr
  ldr r0, =_sdata
 8003c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c70:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003c74:	0800aad4 	.word	0x0800aad4
  ldr r2, =_sbss
 8003c78:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003c7c:	20000a90 	.word	0x20000a90

08003c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c80:	e7fe      	b.n	8003c80 <ADC1_2_IRQHandler>
	...

08003c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_Init+0x28>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_Init+0x28>)
 8003c8e:	f043 0310 	orr.w	r3, r3, #16
 8003c92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c94:	2003      	movs	r0, #3
 8003c96:	f000 f947 	bl	8003f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c9a:	200f      	movs	r0, #15
 8003c9c:	f000 f808 	bl	8003cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca0:	f7ff fd70 	bl	8003784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40022000 	.word	0x40022000

08003cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_InitTick+0x54>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_InitTick+0x58>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f95f 	bl	8003f92 <HAL_SYSTICK_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00e      	b.n	8003cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d80a      	bhi.n	8003cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f000 f927 	bl	8003f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf0:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <HAL_InitTick+0x5c>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000008 	.word	0x20000008
 8003d08:	20000010 	.word	0x20000010
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_IncTick+0x1c>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_IncTick+0x20>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4413      	add	r3, r2
 8003d20:	4a03      	ldr	r2, [pc, #12]	; (8003d30 <HAL_IncTick+0x20>)
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	20000010 	.word	0x20000010
 8003d30:	20000a7c 	.word	0x20000a7c

08003d34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return uwTick;
 8003d38:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <HAL_GetTick+0x10>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	20000a7c 	.word	0x20000a7c

08003d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d005      	beq.n	8003d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_Delay+0x44>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d6e:	bf00      	nop
 8003d70:	f7ff ffe0 	bl	8003d34 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d8f7      	bhi.n	8003d70 <HAL_Delay+0x28>
  {
  }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000010 	.word	0x20000010

08003d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc2:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	60d3      	str	r3, [r2, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4906      	ldr	r1, [pc, #24]	; (8003e28 <__NVIC_EnableIRQ+0x34>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	6039      	str	r1, [r7, #0]
 8003e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db0a      	blt.n	8003e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <__NVIC_SetPriority+0x4c>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	0112      	lsls	r2, r2, #4
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e54:	e00a      	b.n	8003e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <__NVIC_SetPriority+0x50>)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	3b04      	subs	r3, #4
 8003e64:	0112      	lsls	r2, r2, #4
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	440b      	add	r3, r1
 8003e6a:	761a      	strb	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e100 	.word	0xe000e100
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f1c3 0307 	rsb	r3, r3, #7
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf28      	it	cs
 8003e9e:	2304      	movcs	r3, #4
 8003ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d902      	bls.n	8003eb0 <NVIC_EncodePriority+0x30>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3b03      	subs	r3, #3
 8003eae:	e000      	b.n	8003eb2 <NVIC_EncodePriority+0x32>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	4313      	orrs	r3, r2
         );
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef4:	d301      	bcc.n	8003efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00f      	b.n	8003f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <SysTick_Config+0x40>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f02:	210f      	movs	r1, #15
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	f7ff ff90 	bl	8003e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <SysTick_Config+0x40>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <SysTick_Config+0x40>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	e000e010 	.word	0xe000e010

08003f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff2d 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	4603      	mov	r3, r0
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f50:	f7ff ff42 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ff90 	bl	8003e80 <NVIC_EncodePriority>
 8003f60:	4602      	mov	r2, r0
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff ff5f 	bl	8003e2c <__NVIC_SetPriority>
}
 8003f6e:	bf00      	nop
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff35 	bl	8003df4 <__NVIC_EnableIRQ>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ffa2 	bl	8003ee4 <SysTick_Config>
 8003fa0:	4603      	mov	r3, r0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e043      	b.n	800404a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <HAL_DMA_Init+0xa8>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <HAL_DMA_Init+0xac>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <HAL_DMA_Init+0xb0>)
 8003fde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ff6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ffa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	bffdfff8 	.word	0xbffdfff8
 8004058:	cccccccd 	.word	0xcccccccd
 800405c:	40020000 	.word	0x40020000

08004060 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_DMA_Start+0x20>
 800407c:	2302      	movs	r3, #2
 800407e:	e02d      	b.n	80040dc <HAL_DMA_Start+0x7c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800408e:	2b01      	cmp	r3, #1
 8004090:	d11d      	bne.n	80040ce <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f91a 	bl	80042f0 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e005      	b.n	80040da <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
 80040d8:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	2204      	movs	r2, #4
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d04f      	beq.n	80041ac <HAL_DMA_IRQHandler+0xc8>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04a      	beq.n	80041ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a66      	ldr	r2, [pc, #408]	; (80042d4 <HAL_DMA_IRQHandler+0x1f0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d029      	beq.n	8004192 <HAL_DMA_IRQHandler+0xae>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_DMA_IRQHandler+0x1f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d022      	beq.n	800418e <HAL_DMA_IRQHandler+0xaa>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a63      	ldr	r2, [pc, #396]	; (80042dc <HAL_DMA_IRQHandler+0x1f8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01a      	beq.n	8004188 <HAL_DMA_IRQHandler+0xa4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a62      	ldr	r2, [pc, #392]	; (80042e0 <HAL_DMA_IRQHandler+0x1fc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d012      	beq.n	8004182 <HAL_DMA_IRQHandler+0x9e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a60      	ldr	r2, [pc, #384]	; (80042e4 <HAL_DMA_IRQHandler+0x200>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00a      	beq.n	800417c <HAL_DMA_IRQHandler+0x98>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5f      	ldr	r2, [pc, #380]	; (80042e8 <HAL_DMA_IRQHandler+0x204>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d102      	bne.n	8004176 <HAL_DMA_IRQHandler+0x92>
 8004170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004174:	e00e      	b.n	8004194 <HAL_DMA_IRQHandler+0xb0>
 8004176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800417a:	e00b      	b.n	8004194 <HAL_DMA_IRQHandler+0xb0>
 800417c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004180:	e008      	b.n	8004194 <HAL_DMA_IRQHandler+0xb0>
 8004182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004186:	e005      	b.n	8004194 <HAL_DMA_IRQHandler+0xb0>
 8004188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800418c:	e002      	b.n	8004194 <HAL_DMA_IRQHandler+0xb0>
 800418e:	2340      	movs	r3, #64	; 0x40
 8004190:	e000      	b.n	8004194 <HAL_DMA_IRQHandler+0xb0>
 8004192:	2304      	movs	r3, #4
 8004194:	4a55      	ldr	r2, [pc, #340]	; (80042ec <HAL_DMA_IRQHandler+0x208>)
 8004196:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8094 	beq.w	80042ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041aa:	e08e      	b.n	80042ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2202      	movs	r2, #2
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d056      	beq.n	800426a <HAL_DMA_IRQHandler+0x186>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d051      	beq.n	800426a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 020a 	bic.w	r2, r2, #10
 80041e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a38      	ldr	r2, [pc, #224]	; (80042d4 <HAL_DMA_IRQHandler+0x1f0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d029      	beq.n	800424a <HAL_DMA_IRQHandler+0x166>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <HAL_DMA_IRQHandler+0x1f4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <HAL_DMA_IRQHandler+0x162>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a35      	ldr	r2, [pc, #212]	; (80042dc <HAL_DMA_IRQHandler+0x1f8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x15c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a34      	ldr	r2, [pc, #208]	; (80042e0 <HAL_DMA_IRQHandler+0x1fc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d012      	beq.n	800423a <HAL_DMA_IRQHandler+0x156>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a32      	ldr	r2, [pc, #200]	; (80042e4 <HAL_DMA_IRQHandler+0x200>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00a      	beq.n	8004234 <HAL_DMA_IRQHandler+0x150>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HAL_DMA_IRQHandler+0x204>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d102      	bne.n	800422e <HAL_DMA_IRQHandler+0x14a>
 8004228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800422c:	e00e      	b.n	800424c <HAL_DMA_IRQHandler+0x168>
 800422e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004232:	e00b      	b.n	800424c <HAL_DMA_IRQHandler+0x168>
 8004234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004238:	e008      	b.n	800424c <HAL_DMA_IRQHandler+0x168>
 800423a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800423e:	e005      	b.n	800424c <HAL_DMA_IRQHandler+0x168>
 8004240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004244:	e002      	b.n	800424c <HAL_DMA_IRQHandler+0x168>
 8004246:	2320      	movs	r3, #32
 8004248:	e000      	b.n	800424c <HAL_DMA_IRQHandler+0x168>
 800424a:	2302      	movs	r3, #2
 800424c:	4a27      	ldr	r2, [pc, #156]	; (80042ec <HAL_DMA_IRQHandler+0x208>)
 800424e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d034      	beq.n	80042ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004268:	e02f      	b.n	80042ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2208      	movs	r2, #8
 8004270:	409a      	lsls	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d028      	beq.n	80042cc <HAL_DMA_IRQHandler+0x1e8>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d023      	beq.n	80042cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 020e 	bic.w	r2, r2, #14
 8004292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
    }
  }
  return;
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
}
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40020008 	.word	0x40020008
 80042d8:	4002001c 	.word	0x4002001c
 80042dc:	40020030 	.word	0x40020030
 80042e0:	40020044 	.word	0x40020044
 80042e4:	40020058 	.word	0x40020058
 80042e8:	4002006c 	.word	0x4002006c
 80042ec:	40020000 	.word	0x40020000

080042f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b10      	cmp	r3, #16
 800431c:	d108      	bne.n	8004330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800432e:	e007      	b.n	8004340 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	60da      	str	r2, [r3, #12]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
	...

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b480      	push	{r7}
 800434e:	b08b      	sub	sp, #44	; 0x2c
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800435e:	e169      	b.n	8004634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004360:	2201      	movs	r2, #1
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	429a      	cmp	r2, r3
 800437a:	f040 8158 	bne.w	800462e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a9a      	ldr	r2, [pc, #616]	; (80045ec <HAL_GPIO_Init+0x2a0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d05e      	beq.n	8004446 <HAL_GPIO_Init+0xfa>
 8004388:	4a98      	ldr	r2, [pc, #608]	; (80045ec <HAL_GPIO_Init+0x2a0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d875      	bhi.n	800447a <HAL_GPIO_Init+0x12e>
 800438e:	4a98      	ldr	r2, [pc, #608]	; (80045f0 <HAL_GPIO_Init+0x2a4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d058      	beq.n	8004446 <HAL_GPIO_Init+0xfa>
 8004394:	4a96      	ldr	r2, [pc, #600]	; (80045f0 <HAL_GPIO_Init+0x2a4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d86f      	bhi.n	800447a <HAL_GPIO_Init+0x12e>
 800439a:	4a96      	ldr	r2, [pc, #600]	; (80045f4 <HAL_GPIO_Init+0x2a8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d052      	beq.n	8004446 <HAL_GPIO_Init+0xfa>
 80043a0:	4a94      	ldr	r2, [pc, #592]	; (80045f4 <HAL_GPIO_Init+0x2a8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d869      	bhi.n	800447a <HAL_GPIO_Init+0x12e>
 80043a6:	4a94      	ldr	r2, [pc, #592]	; (80045f8 <HAL_GPIO_Init+0x2ac>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d04c      	beq.n	8004446 <HAL_GPIO_Init+0xfa>
 80043ac:	4a92      	ldr	r2, [pc, #584]	; (80045f8 <HAL_GPIO_Init+0x2ac>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d863      	bhi.n	800447a <HAL_GPIO_Init+0x12e>
 80043b2:	4a92      	ldr	r2, [pc, #584]	; (80045fc <HAL_GPIO_Init+0x2b0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d046      	beq.n	8004446 <HAL_GPIO_Init+0xfa>
 80043b8:	4a90      	ldr	r2, [pc, #576]	; (80045fc <HAL_GPIO_Init+0x2b0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d85d      	bhi.n	800447a <HAL_GPIO_Init+0x12e>
 80043be:	2b12      	cmp	r3, #18
 80043c0:	d82a      	bhi.n	8004418 <HAL_GPIO_Init+0xcc>
 80043c2:	2b12      	cmp	r3, #18
 80043c4:	d859      	bhi.n	800447a <HAL_GPIO_Init+0x12e>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_GPIO_Init+0x80>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	08004447 	.word	0x08004447
 80043d0:	08004421 	.word	0x08004421
 80043d4:	08004433 	.word	0x08004433
 80043d8:	08004475 	.word	0x08004475
 80043dc:	0800447b 	.word	0x0800447b
 80043e0:	0800447b 	.word	0x0800447b
 80043e4:	0800447b 	.word	0x0800447b
 80043e8:	0800447b 	.word	0x0800447b
 80043ec:	0800447b 	.word	0x0800447b
 80043f0:	0800447b 	.word	0x0800447b
 80043f4:	0800447b 	.word	0x0800447b
 80043f8:	0800447b 	.word	0x0800447b
 80043fc:	0800447b 	.word	0x0800447b
 8004400:	0800447b 	.word	0x0800447b
 8004404:	0800447b 	.word	0x0800447b
 8004408:	0800447b 	.word	0x0800447b
 800440c:	0800447b 	.word	0x0800447b
 8004410:	08004429 	.word	0x08004429
 8004414:	0800443d 	.word	0x0800443d
 8004418:	4a79      	ldr	r2, [pc, #484]	; (8004600 <HAL_GPIO_Init+0x2b4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800441e:	e02c      	b.n	800447a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	623b      	str	r3, [r7, #32]
          break;
 8004426:	e029      	b.n	800447c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	3304      	adds	r3, #4
 800442e:	623b      	str	r3, [r7, #32]
          break;
 8004430:	e024      	b.n	800447c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	3308      	adds	r3, #8
 8004438:	623b      	str	r3, [r7, #32]
          break;
 800443a:	e01f      	b.n	800447c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	330c      	adds	r3, #12
 8004442:	623b      	str	r3, [r7, #32]
          break;
 8004444:	e01a      	b.n	800447c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800444e:	2304      	movs	r3, #4
 8004450:	623b      	str	r3, [r7, #32]
          break;
 8004452:	e013      	b.n	800447c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800445c:	2308      	movs	r3, #8
 800445e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	611a      	str	r2, [r3, #16]
          break;
 8004466:	e009      	b.n	800447c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004468:	2308      	movs	r3, #8
 800446a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	615a      	str	r2, [r3, #20]
          break;
 8004472:	e003      	b.n	800447c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
          break;
 8004478:	e000      	b.n	800447c <HAL_GPIO_Init+0x130>
          break;
 800447a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2bff      	cmp	r3, #255	; 0xff
 8004480:	d801      	bhi.n	8004486 <HAL_GPIO_Init+0x13a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	e001      	b.n	800448a <HAL_GPIO_Init+0x13e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d802      	bhi.n	8004498 <HAL_GPIO_Init+0x14c>
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	e002      	b.n	800449e <HAL_GPIO_Init+0x152>
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	3b08      	subs	r3, #8
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	210f      	movs	r1, #15
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	6a39      	ldr	r1, [r7, #32]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80b1 	beq.w	800462e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044cc:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <HAL_GPIO_Init+0x2b8>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4a4c      	ldr	r2, [pc, #304]	; (8004604 <HAL_GPIO_Init+0x2b8>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6193      	str	r3, [r2, #24]
 80044d8:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_GPIO_Init+0x2b8>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044e4:	4a48      	ldr	r2, [pc, #288]	; (8004608 <HAL_GPIO_Init+0x2bc>)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	3302      	adds	r3, #2
 80044ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	220f      	movs	r2, #15
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a40      	ldr	r2, [pc, #256]	; (800460c <HAL_GPIO_Init+0x2c0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_GPIO_Init+0x1ec>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3f      	ldr	r2, [pc, #252]	; (8004610 <HAL_GPIO_Init+0x2c4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00d      	beq.n	8004534 <HAL_GPIO_Init+0x1e8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3e      	ldr	r2, [pc, #248]	; (8004614 <HAL_GPIO_Init+0x2c8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d007      	beq.n	8004530 <HAL_GPIO_Init+0x1e4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3d      	ldr	r2, [pc, #244]	; (8004618 <HAL_GPIO_Init+0x2cc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_GPIO_Init+0x1e0>
 8004528:	2303      	movs	r3, #3
 800452a:	e006      	b.n	800453a <HAL_GPIO_Init+0x1ee>
 800452c:	2304      	movs	r3, #4
 800452e:	e004      	b.n	800453a <HAL_GPIO_Init+0x1ee>
 8004530:	2302      	movs	r3, #2
 8004532:	e002      	b.n	800453a <HAL_GPIO_Init+0x1ee>
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_GPIO_Init+0x1ee>
 8004538:	2300      	movs	r3, #0
 800453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453c:	f002 0203 	and.w	r2, r2, #3
 8004540:	0092      	lsls	r2, r2, #2
 8004542:	4093      	lsls	r3, r2
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800454a:	492f      	ldr	r1, [pc, #188]	; (8004608 <HAL_GPIO_Init+0x2bc>)
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	3302      	adds	r3, #2
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_GPIO_Init+0x2d0>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	492c      	ldr	r1, [pc, #176]	; (800461c <HAL_GPIO_Init+0x2d0>)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	e006      	b.n	8004580 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_GPIO_Init+0x2d0>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	43db      	mvns	r3, r3
 800457a:	4928      	ldr	r1, [pc, #160]	; (800461c <HAL_GPIO_Init+0x2d0>)
 800457c:	4013      	ands	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d006      	beq.n	800459a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_GPIO_Init+0x2d0>)
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	4922      	ldr	r1, [pc, #136]	; (800461c <HAL_GPIO_Init+0x2d0>)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]
 8004598:	e006      	b.n	80045a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_GPIO_Init+0x2d0>)
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	491e      	ldr	r1, [pc, #120]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	4918      	ldr	r1, [pc, #96]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]
 80045c0:	e006      	b.n	80045d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045c2:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	4914      	ldr	r1, [pc, #80]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d021      	beq.n	8004620 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_GPIO_Init+0x2d0>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60cb      	str	r3, [r1, #12]
 80045e8:	e021      	b.n	800462e <HAL_GPIO_Init+0x2e2>
 80045ea:	bf00      	nop
 80045ec:	10320000 	.word	0x10320000
 80045f0:	10310000 	.word	0x10310000
 80045f4:	10220000 	.word	0x10220000
 80045f8:	10210000 	.word	0x10210000
 80045fc:	10120000 	.word	0x10120000
 8004600:	10110000 	.word	0x10110000
 8004604:	40021000 	.word	0x40021000
 8004608:	40010000 	.word	0x40010000
 800460c:	40010800 	.word	0x40010800
 8004610:	40010c00 	.word	0x40010c00
 8004614:	40011000 	.word	0x40011000
 8004618:	40011400 	.word	0x40011400
 800461c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_GPIO_Init+0x304>)
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	43db      	mvns	r3, r3
 8004628:	4909      	ldr	r1, [pc, #36]	; (8004650 <HAL_GPIO_Init+0x304>)
 800462a:	4013      	ands	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	3301      	adds	r3, #1
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	f47f ae8e 	bne.w	8004360 <HAL_GPIO_Init+0x14>
  }
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	372c      	adds	r7, #44	; 0x2c
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40010400 	.word	0x40010400

08004654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
 8004660:	4613      	mov	r3, r2
 8004662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004664:	787b      	ldrb	r3, [r7, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800466a:	887a      	ldrh	r2, [r7, #2]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004670:	e003      	b.n	800467a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004672:	887b      	ldrh	r3, [r7, #2]
 8004674:	041a      	lsls	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	611a      	str	r2, [r3, #16]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e12b      	b.n	80048ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff f89c 	bl	80037e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046e8:	f001 fc9c 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 80046ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a81      	ldr	r2, [pc, #516]	; (80048f8 <HAL_I2C_Init+0x274>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d807      	bhi.n	8004708 <HAL_I2C_Init+0x84>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a80      	ldr	r2, [pc, #512]	; (80048fc <HAL_I2C_Init+0x278>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf94      	ite	ls
 8004700:	2301      	movls	r3, #1
 8004702:	2300      	movhi	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e006      	b.n	8004716 <HAL_I2C_Init+0x92>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a7d      	ldr	r2, [pc, #500]	; (8004900 <HAL_I2C_Init+0x27c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	bf94      	ite	ls
 8004710:	2301      	movls	r3, #1
 8004712:	2300      	movhi	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0e7      	b.n	80048ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a78      	ldr	r2, [pc, #480]	; (8004904 <HAL_I2C_Init+0x280>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9b      	lsrs	r3, r3, #18
 8004728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a6a      	ldr	r2, [pc, #424]	; (80048f8 <HAL_I2C_Init+0x274>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d802      	bhi.n	8004758 <HAL_I2C_Init+0xd4>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3301      	adds	r3, #1
 8004756:	e009      	b.n	800476c <HAL_I2C_Init+0xe8>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	4a69      	ldr	r2, [pc, #420]	; (8004908 <HAL_I2C_Init+0x284>)
 8004764:	fba2 2303 	umull	r2, r3, r2, r3
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	3301      	adds	r3, #1
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	430b      	orrs	r3, r1
 8004772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800477e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	495c      	ldr	r1, [pc, #368]	; (80048f8 <HAL_I2C_Init+0x274>)
 8004788:	428b      	cmp	r3, r1
 800478a:	d819      	bhi.n	80047c0 <HAL_I2C_Init+0x13c>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e59      	subs	r1, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	fbb1 f3f3 	udiv	r3, r1, r3
 800479a:	1c59      	adds	r1, r3, #1
 800479c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a0:	400b      	ands	r3, r1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_I2C_Init+0x138>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1e59      	subs	r1, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	e051      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 80047bc:	2304      	movs	r3, #4
 80047be:	e04f      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d111      	bne.n	80047ec <HAL_I2C_Init+0x168>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e58      	subs	r0, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	440b      	add	r3, r1
 80047d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e012      	b.n	8004812 <HAL_I2C_Init+0x18e>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e58      	subs	r0, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	0099      	lsls	r1, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Init+0x196>
 8004816:	2301      	movs	r3, #1
 8004818:	e022      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10e      	bne.n	8004840 <HAL_I2C_Init+0x1bc>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1e58      	subs	r0, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	440b      	add	r3, r1
 8004830:	fbb0 f3f3 	udiv	r3, r0, r3
 8004834:	3301      	adds	r3, #1
 8004836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Init+0x1dc>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e58      	subs	r0, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	0099      	lsls	r1, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	fbb0 f3f3 	udiv	r3, r0, r3
 8004856:	3301      	adds	r3, #1
 8004858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	6809      	ldr	r1, [r1, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800488e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6911      	ldr	r1, [r2, #16]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	000186a0 	.word	0x000186a0
 80048fc:	001e847f 	.word	0x001e847f
 8004900:	003d08ff 	.word	0x003d08ff
 8004904:	431bde83 	.word	0x431bde83
 8004908:	10624dd3 	.word	0x10624dd3

0800490c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	461a      	mov	r2, r3
 8004918:	460b      	mov	r3, r1
 800491a:	817b      	strh	r3, [r7, #10]
 800491c:	4613      	mov	r3, r2
 800491e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004920:	f7ff fa08 	bl	8003d34 <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	f040 80e0 	bne.w	8004af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2319      	movs	r3, #25
 800493a:	2201      	movs	r2, #1
 800493c:	4970      	ldr	r1, [pc, #448]	; (8004b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fdc0 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
 800494c:	e0d3      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_I2C_Master_Transmit+0x50>
 8004958:	2302      	movs	r3, #2
 800495a:	e0cc      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d007      	beq.n	8004982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	; 0x21
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2210      	movs	r2, #16
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	893a      	ldrh	r2, [r7, #8]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a50      	ldr	r2, [pc, #320]	; (8004b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80049c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049c4:	8979      	ldrh	r1, [r7, #10]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fc2a 	bl	8005224 <I2C_MasterRequestWrite>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e08d      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049f0:	e066      	b.n	8004ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fe3a 	bl	8005670 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06b      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_I2C_Master_Transmit+0x188>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	6a39      	ldr	r1, [r7, #32]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fe2a 	bl	80056f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d107      	bne.n	8004abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e01a      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d194      	bne.n	80049f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	00100002 	.word	0x00100002
 8004b04:	ffff0000 	.word	0xffff0000

08004b08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	461a      	mov	r2, r3
 8004b14:	460b      	mov	r3, r1
 8004b16:	817b      	strh	r3, [r7, #10]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b20:	f7ff f908 	bl	8003d34 <HAL_GetTick>
 8004b24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	f040 823f 	bne.w	8004fb2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2319      	movs	r3, #25
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	497f      	ldr	r1, [pc, #508]	; (8004d3c <HAL_I2C_Master_Receive+0x234>)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fcc0 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e232      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_I2C_Master_Receive+0x54>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e22b      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d007      	beq.n	8004b82 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2222      	movs	r2, #34	; 0x22
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2210      	movs	r2, #16
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	893a      	ldrh	r2, [r7, #8]
 8004bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a5f      	ldr	r2, [pc, #380]	; (8004d40 <HAL_I2C_Master_Receive+0x238>)
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bc4:	8979      	ldrh	r1, [r7, #10]
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fbac 	bl	8005328 <I2C_MasterRequestRead>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e1ec      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d113      	bne.n	8004c0a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e1c0      	b.n	8004f8c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d11e      	bne.n	8004c50 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c22:	b672      	cpsid	i
}
 8004c24:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c4c:	b662      	cpsie	i
}
 8004c4e:	e035      	b.n	8004cbc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d11e      	bne.n	8004c96 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c68:	b672      	cpsid	i
}
 8004c6a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c92:	b662      	cpsie	i
}
 8004c94:	e012      	b.n	8004cbc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004cbc:	e166      	b.n	8004f8c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	f200 811f 	bhi.w	8004f06 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d123      	bne.n	8004d18 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fd4d 	bl	8005774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e167      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d16:	e139      	b.n	8004f8c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d152      	bne.n	8004dc6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2200      	movs	r2, #0
 8004d28:	4906      	ldr	r1, [pc, #24]	; (8004d44 <HAL_I2C_Master_Receive+0x23c>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fbca 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e13c      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
 8004d3a:	bf00      	nop
 8004d3c:	00100002 	.word	0x00100002
 8004d40:	ffff0000 	.word	0xffff0000
 8004d44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d48:	b672      	cpsid	i
}
 8004d4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d8e:	b662      	cpsie	i
}
 8004d90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc4:	e0e2      	b.n	8004f8c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	497b      	ldr	r1, [pc, #492]	; (8004fbc <HAL_I2C_Master_Receive+0x4b4>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fb77 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0e9      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004df0:	b672      	cpsid	i
}
 8004df2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e26:	4b66      	ldr	r3, [pc, #408]	; (8004fc0 <HAL_I2C_Master_Receive+0x4b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	08db      	lsrs	r3, r3, #3
 8004e2c:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_I2C_Master_Receive+0x4bc>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	0a1a      	lsrs	r2, r3, #8
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	00da      	lsls	r2, r3, #3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d118      	bne.n	8004e7e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e6e:	b662      	cpsie	i
}
 8004e70:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e09a      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d1d9      	bne.n	8004e40 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ece:	b662      	cpsie	i
}
 8004ed0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f04:	e042      	b.n	8004f8c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fc32 	bl	8005774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e04c      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d118      	bne.n	8004f8c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f47f ae94 	bne.w	8004cbe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3728      	adds	r7, #40	; 0x28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	00010004 	.word	0x00010004
 8004fc0:	20000008 	.word	0x20000008
 8004fc4:	14f8b589 	.word	0x14f8b589

08004fc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004fd8:	f7fe feac 	bl	8003d34 <HAL_GetTick>
 8004fdc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	f040 8111 	bne.w	8005212 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2319      	movs	r3, #25
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4988      	ldr	r1, [pc, #544]	; (800521c <HAL_I2C_IsDeviceReady+0x254>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fa62 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
 8005008:	e104      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_I2C_IsDeviceReady+0x50>
 8005014:	2302      	movs	r3, #2
 8005016:	e0fd      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d007      	beq.n	800503e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800504c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2224      	movs	r2, #36	; 0x24
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a70      	ldr	r2, [pc, #448]	; (8005220 <HAL_I2C_IsDeviceReady+0x258>)
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005070:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fa20 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005098:	d103      	bne.n	80050a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0b6      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fe fe3d 	bl	8003d34 <HAL_GetTick>
 80050ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050ea:	e025      	b.n	8005138 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050ec:	f7fe fe22 	bl	8003d34 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <HAL_I2C_IsDeviceReady+0x13a>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	22a0      	movs	r2, #160	; 0xa0
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2ba0      	cmp	r3, #160	; 0xa0
 8005142:	d005      	beq.n	8005150 <HAL_I2C_IsDeviceReady+0x188>
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <HAL_I2C_IsDeviceReady+0x188>
 800514a:	7dbb      	ldrb	r3, [r7, #22]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0cd      	beq.n	80050ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d129      	bne.n	80051ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2319      	movs	r3, #25
 8005192:	2201      	movs	r2, #1
 8005194:	4921      	ldr	r1, [pc, #132]	; (800521c <HAL_I2C_IsDeviceReady+0x254>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f994 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e036      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e02c      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	2319      	movs	r3, #25
 80051da:	2201      	movs	r2, #1
 80051dc:	490f      	ldr	r1, [pc, #60]	; (800521c <HAL_I2C_IsDeviceReady+0x254>)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f970 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e012      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	3301      	adds	r3, #1
 80051f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	f4ff af32 	bcc.w	8005062 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	00100002 	.word	0x00100002
 8005220:	ffff0000 	.word	0xffff0000

08005224 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	460b      	mov	r3, r1
 8005232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d006      	beq.n	800524e <I2C_MasterRequestWrite+0x2a>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d003      	beq.n	800524e <I2C_MasterRequestWrite+0x2a>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800524c:	d108      	bne.n	8005260 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e00b      	b.n	8005278 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	2b12      	cmp	r3, #18
 8005266:	d107      	bne.n	8005278 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f91d 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529e:	d103      	bne.n	80052a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e035      	b.n	8005318 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b4:	d108      	bne.n	80052c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c4:	611a      	str	r2, [r3, #16]
 80052c6:	e01b      	b.n	8005300 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052c8:	897b      	ldrh	r3, [r7, #10]
 80052ca:	11db      	asrs	r3, r3, #7
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0306 	and.w	r3, r3, #6
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f063 030f 	orn	r3, r3, #15
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	490e      	ldr	r1, [pc, #56]	; (8005320 <I2C_MasterRequestWrite+0xfc>)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f943 	bl	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e010      	b.n	8005318 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052f6:	897b      	ldrh	r3, [r7, #10]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	4907      	ldr	r1, [pc, #28]	; (8005324 <I2C_MasterRequestWrite+0x100>)
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f933 	bl	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	00010008 	.word	0x00010008
 8005324:	00010002 	.word	0x00010002

08005328 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	460b      	mov	r3, r1
 8005336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d006      	beq.n	8005362 <I2C_MasterRequestRead+0x3a>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d003      	beq.n	8005362 <I2C_MasterRequestRead+0x3a>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005360:	d108      	bne.n	8005374 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e00b      	b.n	800538c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	2b11      	cmp	r3, #17
 800537a:	d107      	bne.n	800538c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800538a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f893 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d103      	bne.n	80053bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e079      	b.n	80054b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c8:	d108      	bne.n	80053dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053ca:	897b      	ldrh	r3, [r7, #10]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]
 80053da:	e05f      	b.n	800549c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053dc:	897b      	ldrh	r3, [r7, #10]
 80053de:	11db      	asrs	r3, r3, #7
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0306 	and.w	r3, r3, #6
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f063 030f 	orn	r3, r3, #15
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4930      	ldr	r1, [pc, #192]	; (80054bc <I2C_MasterRequestRead+0x194>)
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f8b9 	bl	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e054      	b.n	80054b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4929      	ldr	r1, [pc, #164]	; (80054c0 <I2C_MasterRequestRead+0x198>)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f8a9 	bl	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e044      	b.n	80054b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f831 	bl	80054c4 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00d      	beq.n	8005484 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d103      	bne.n	8005480 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e017      	b.n	80054b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005484:	897b      	ldrh	r3, [r7, #10]
 8005486:	11db      	asrs	r3, r3, #7
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 0306 	and.w	r3, r3, #6
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f063 030e 	orn	r3, r3, #14
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4907      	ldr	r1, [pc, #28]	; (80054c0 <I2C_MasterRequestRead+0x198>)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f865 	bl	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	00010008 	.word	0x00010008
 80054c0:	00010002 	.word	0x00010002

080054c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d4:	e025      	b.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d021      	beq.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054de:	f7fe fc29 	bl	8003d34 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d302      	bcc.n	80054f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d116      	bne.n	8005522 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e023      	b.n	800556a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10d      	bne.n	8005548 <I2C_WaitOnFlagUntilTimeout+0x84>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	43da      	mvns	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	bf0c      	ite	eq
 800553e:	2301      	moveq	r3, #1
 8005540:	2300      	movne	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	e00c      	b.n	8005562 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	43da      	mvns	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4013      	ands	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	bf0c      	ite	eq
 800555a:	2301      	moveq	r3, #1
 800555c:	2300      	movne	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	429a      	cmp	r2, r3
 8005566:	d0b6      	beq.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005580:	e051      	b.n	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005590:	d123      	bne.n	80055da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f043 0204 	orr.w	r2, r3, #4
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e046      	b.n	8005668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d021      	beq.n	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fe fba7 	bl	8003d34 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e020      	b.n	8005668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d10c      	bne.n	800564a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	43da      	mvns	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf14      	ite	ne
 8005642:	2301      	movne	r3, #1
 8005644:	2300      	moveq	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	e00b      	b.n	8005662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	43da      	mvns	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4013      	ands	r3, r2
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d18d      	bne.n	8005582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800567c:	e02d      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f8ce 	bl	8005820 <I2C_IsAcknowledgeFailed>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e02d      	b.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d021      	beq.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fe fb4d 	bl	8003d34 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d116      	bne.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f043 0220 	orr.w	r2, r3, #32
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e007      	b.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d1ca      	bne.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056fe:	e02d      	b.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f88d 	bl	8005820 <I2C_IsAcknowledgeFailed>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e02d      	b.n	800576c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d021      	beq.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005718:	f7fe fb0c 	bl	8003d34 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d116      	bne.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e007      	b.n	800576c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b04      	cmp	r3, #4
 8005768:	d1ca      	bne.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005780:	e042      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b10      	cmp	r3, #16
 800578e:	d119      	bne.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0210 	mvn.w	r2, #16
 8005798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e029      	b.n	8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fe fab6 	bl	8003d34 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e007      	b.n	8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d1b5      	bne.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d11b      	bne.n	8005870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f043 0204 	orr.w	r2, r3, #4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e272      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8087 	beq.w	80059aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800589c:	4b92      	ldr	r3, [pc, #584]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d00c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058a8:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d112      	bne.n	80058da <HAL_RCC_OscConfig+0x5e>
 80058b4:	4b8c      	ldr	r3, [pc, #560]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d10b      	bne.n	80058da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c2:	4b89      	ldr	r3, [pc, #548]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d06c      	beq.n	80059a8 <HAL_RCC_OscConfig+0x12c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d168      	bne.n	80059a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e24c      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x76>
 80058e4:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a7f      	ldr	r2, [pc, #508]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e02e      	b.n	8005950 <HAL_RCC_OscConfig+0xd4>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x98>
 80058fa:	4b7b      	ldr	r3, [pc, #492]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7a      	ldr	r2, [pc, #488]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	4b78      	ldr	r3, [pc, #480]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a77      	ldr	r2, [pc, #476]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800590c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e01d      	b.n	8005950 <HAL_RCC_OscConfig+0xd4>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0xbc>
 800591e:	4b72      	ldr	r3, [pc, #456]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a71      	ldr	r2, [pc, #452]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4b6f      	ldr	r3, [pc, #444]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6e      	ldr	r2, [pc, #440]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e00b      	b.n	8005950 <HAL_RCC_OscConfig+0xd4>
 8005938:	4b6b      	ldr	r3, [pc, #428]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a6a      	ldr	r2, [pc, #424]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b68      	ldr	r3, [pc, #416]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a67      	ldr	r2, [pc, #412]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800594a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005958:	f7fe f9ec 	bl	8003d34 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005960:	f7fe f9e8 	bl	8003d34 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e200      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	4b5d      	ldr	r3, [pc, #372]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0xe4>
 800597e:	e014      	b.n	80059aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fe f9d8 	bl	8003d34 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fe f9d4 	bl	8003d34 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	; 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e1ec      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599a:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x10c>
 80059a6:	e000      	b.n	80059aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d063      	beq.n	8005a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059b6:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059c2:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d11c      	bne.n	8005a08 <HAL_RCC_OscConfig+0x18c>
 80059ce:	4b46      	ldr	r3, [pc, #280]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d116      	bne.n	8005a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059da:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_RCC_OscConfig+0x176>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d001      	beq.n	80059f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e1c0      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f2:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4939      	ldr	r1, [pc, #228]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a06:	e03a      	b.n	8005a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a10:	4b36      	ldr	r3, [pc, #216]	; (8005aec <HAL_RCC_OscConfig+0x270>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a16:	f7fe f98d 	bl	8003d34 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1e:	f7fe f989 	bl	8003d34 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1a1      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4927      	ldr	r1, [pc, #156]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	600b      	str	r3, [r1, #0]
 8005a50:	e015      	b.n	8005a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a52:	4b26      	ldr	r3, [pc, #152]	; (8005aec <HAL_RCC_OscConfig+0x270>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fe f96c 	bl	8003d34 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a60:	f7fe f968 	bl	8003d34 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e180      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d03a      	beq.n	8005b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d019      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a98:	f7fe f94c 	bl	8003d34 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fe f948 	bl	8003d34 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e160      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f000 fad8 	bl	8006074 <RCC_Delay>
 8005ac4:	e01c      	b.n	8005b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005acc:	f7fe f932 	bl	8003d34 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad2:	e00f      	b.n	8005af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fe f92e 	bl	8003d34 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d908      	bls.n	8005af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e146      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	42420000 	.word	0x42420000
 8005af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af4:	4b92      	ldr	r3, [pc, #584]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e9      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80a6 	beq.w	8005c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b12:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10d      	bne.n	8005b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	4a87      	ldr	r2, [pc, #540]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b28:	61d3      	str	r3, [r2, #28]
 8005b2a:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3a:	4b82      	ldr	r3, [pc, #520]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d118      	bne.n	8005b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b46:	4b7f      	ldr	r3, [pc, #508]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7e      	ldr	r2, [pc, #504]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b52:	f7fe f8ef 	bl	8003d34 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5a:	f7fe f8eb 	bl	8003d34 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b64      	cmp	r3, #100	; 0x64
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e103      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6c:	4b75      	ldr	r3, [pc, #468]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCC_OscConfig+0x312>
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	4a6e      	ldr	r2, [pc, #440]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	6213      	str	r3, [r2, #32]
 8005b8c:	e02d      	b.n	8005bea <HAL_RCC_OscConfig+0x36e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x334>
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4a69      	ldr	r2, [pc, #420]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	6213      	str	r3, [r2, #32]
 8005ba2:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	4a66      	ldr	r2, [pc, #408]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	6213      	str	r3, [r2, #32]
 8005bae:	e01c      	b.n	8005bea <HAL_RCC_OscConfig+0x36e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x356>
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4a60      	ldr	r2, [pc, #384]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bbe:	f043 0304 	orr.w	r3, r3, #4
 8005bc2:	6213      	str	r3, [r2, #32]
 8005bc4:	4b5e      	ldr	r3, [pc, #376]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	4a5d      	ldr	r2, [pc, #372]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6213      	str	r3, [r2, #32]
 8005bd0:	e00b      	b.n	8005bea <HAL_RCC_OscConfig+0x36e>
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	4a5a      	ldr	r2, [pc, #360]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	6213      	str	r3, [r2, #32]
 8005bde:	4b58      	ldr	r3, [pc, #352]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4a57      	ldr	r2, [pc, #348]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d015      	beq.n	8005c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf2:	f7fe f89f 	bl	8003d34 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf8:	e00a      	b.n	8005c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfa:	f7fe f89b 	bl	8003d34 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0b1      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c10:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ee      	beq.n	8005bfa <HAL_RCC_OscConfig+0x37e>
 8005c1c:	e014      	b.n	8005c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1e:	f7fe f889 	bl	8003d34 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fe f885 	bl	8003d34 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e09b      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3c:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ee      	bne.n	8005c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d105      	bne.n	8005c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4e:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	4a3b      	ldr	r2, [pc, #236]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8087 	beq.w	8005d72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d061      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d146      	bne.n	8005d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c78:	4b33      	ldr	r3, [pc, #204]	; (8005d48 <HAL_RCC_OscConfig+0x4cc>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fe f859 	bl	8003d34 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c86:	f7fe f855 	bl	8003d34 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e06d      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d108      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	4921      	ldr	r1, [pc, #132]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a19      	ldr	r1, [r3, #32]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	491b      	ldr	r1, [pc, #108]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <HAL_RCC_OscConfig+0x4cc>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cde:	f7fe f829 	bl	8003d34 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fe f825 	bl	8003d34 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e03d      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x46a>
 8005d04:	e035      	b.n	8005d72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <HAL_RCC_OscConfig+0x4cc>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0c:	f7fe f812 	bl	8003d34 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fe f80e 	bl	8003d34 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e026      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x498>
 8005d32:	e01e      	b.n	8005d72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e019      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40007000 	.word	0x40007000
 8005d48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_OscConfig+0x500>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d106      	bne.n	8005d6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000

08005d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0d0      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d94:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d910      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 0207 	bic.w	r2, r3, #7
 8005daa:	4965      	ldr	r1, [pc, #404]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0b8      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d020      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ddc:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a58      	ldr	r2, [pc, #352]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df4:	4b53      	ldr	r3, [pc, #332]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e00:	4b50      	ldr	r3, [pc, #320]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	494d      	ldr	r1, [pc, #308]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d040      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d115      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e07f      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e3e:	4b41      	ldr	r3, [pc, #260]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e073      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e06b      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e5e:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f023 0203 	bic.w	r2, r3, #3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4936      	ldr	r1, [pc, #216]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e70:	f7fd ff60 	bl	8003d34 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	e00a      	b.n	8005e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e78:	f7fd ff5c 	bl	8003d34 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e053      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 020c 	and.w	r2, r3, #12
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1eb      	bne.n	8005e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d210      	bcs.n	8005ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eae:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 0207 	bic.w	r2, r3, #7
 8005eb6:	4922      	ldr	r1, [pc, #136]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e032      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4916      	ldr	r1, [pc, #88]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	490e      	ldr	r1, [pc, #56]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f0e:	f000 f821 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8005f12:	4602      	mov	r2, r0
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	490a      	ldr	r1, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x1c8>)
 8005f20:	5ccb      	ldrb	r3, [r1, r3]
 8005f22:	fa22 f303 	lsr.w	r3, r2, r3
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <HAL_RCC_ClockConfig+0x1cc>)
 8005f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_ClockConfig+0x1d0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd febe 	bl	8003cb0 <HAL_InitTick>

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40022000 	.word	0x40022000
 8005f44:	40021000 	.word	0x40021000
 8005f48:	0800a6d4 	.word	0x0800a6d4
 8005f4c:	20000008 	.word	0x20000008
 8005f50:	2000000c 	.word	0x2000000c

08005f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f54:	b490      	push	{r4, r7}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f5a:	4b29      	ldr	r3, [pc, #164]	; (8006000 <HAL_RCC_GetSysClockFreq+0xac>)
 8005f5c:	1d3c      	adds	r4, r7, #4
 8005f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f64:	f240 2301 	movw	r3, #513	; 0x201
 8005f68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f7e:	4b21      	ldr	r3, [pc, #132]	; (8006004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 030c 	and.w	r3, r3, #12
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d002      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x40>
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0x46>
 8005f92:	e02b      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f94:	4b1c      	ldr	r3, [pc, #112]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f96:	623b      	str	r3, [r7, #32]
      break;
 8005f98:	e02b      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	0c9b      	lsrs	r3, r3, #18
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3328      	adds	r3, #40	; 0x28
 8005fa4:	443b      	add	r3, r7
 8005fa6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005faa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d012      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	0c5b      	lsrs	r3, r3, #17
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	3328      	adds	r3, #40	; 0x28
 8005fc2:	443b      	add	r3, r7
 8005fc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005fce:	fb03 f202 	mul.w	r2, r3, r2
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fda:	e004      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4a0b      	ldr	r2, [pc, #44]	; (800600c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	623b      	str	r3, [r7, #32]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005fee:	623b      	str	r3, [r7, #32]
      break;
 8005ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc90      	pop	{r4, r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	08009968 	.word	0x08009968
 8006004:	40021000 	.word	0x40021000
 8006008:	007a1200 	.word	0x007a1200
 800600c:	003d0900 	.word	0x003d0900

08006010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <HAL_RCC_GetHCLKFreq+0x10>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	20000008 	.word	0x20000008

08006024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006028:	f7ff fff2 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4903      	ldr	r1, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40021000 	.word	0x40021000
 8006048:	0800a6e4 	.word	0x0800a6e4

0800604c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006050:	f7ff ffde 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	0adb      	lsrs	r3, r3, #11
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4903      	ldr	r1, [pc, #12]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000
 8006070:	0800a6e4 	.word	0x0800a6e4

08006074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <RCC_Delay+0x34>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <RCC_Delay+0x38>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0a5b      	lsrs	r3, r3, #9
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006090:	bf00      	nop
  }
  while (Delay --);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	60fa      	str	r2, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f9      	bne.n	8006090 <RCC_Delay+0x1c>
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	20000008 	.word	0x20000008
 80060ac:	10624dd3 	.word	0x10624dd3

080060b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e041      	b.n	8006146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fd fbc4 	bl	8003864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f000 faba 	bl	8006668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d001      	beq.n	8006168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e032      	b.n	80061ce <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_TIM_Base_Start+0x88>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00e      	beq.n	8006198 <HAL_TIM_Base_Start+0x48>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006182:	d009      	beq.n	8006198 <HAL_TIM_Base_Start+0x48>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a14      	ldr	r2, [pc, #80]	; (80061dc <HAL_TIM_Base_Start+0x8c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <HAL_TIM_Base_Start+0x48>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <HAL_TIM_Base_Start+0x90>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d111      	bne.n	80061bc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d010      	beq.n	80061cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ba:	e007      	b.n	80061cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr
 80061d8:	40012c00 	.word	0x40012c00
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800

080061e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d001      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e03a      	b.n	8006272 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIM_Base_Start_IT+0x98>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x58>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d009      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x58>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a14      	ldr	r2, [pc, #80]	; (8006280 <HAL_TIM_Base_Start_IT+0x9c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x58>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <HAL_TIM_Base_Start_IT+0xa0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d111      	bne.n	8006260 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b06      	cmp	r3, #6
 800624c:	d010      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	e007      	b.n	8006270 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800

08006288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b02      	cmp	r3, #2
 800629c:	d122      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d11b      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0202 	mvn.w	r2, #2
 80062b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9b1 	bl	8006632 <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9a4 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9b3 	bl	8006644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d122      	bne.n	8006338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d11b      	bne.n	8006338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0204 	mvn.w	r2, #4
 8006308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f987 	bl	8006632 <HAL_TIM_IC_CaptureCallback>
 8006324:	e005      	b.n	8006332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f97a 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f989 	bl	8006644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b08      	cmp	r3, #8
 8006344:	d122      	bne.n	800638c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d11b      	bne.n	800638c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0208 	mvn.w	r2, #8
 800635c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2204      	movs	r2, #4
 8006362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f95d 	bl	8006632 <HAL_TIM_IC_CaptureCallback>
 8006378:	e005      	b.n	8006386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f950 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f95f 	bl	8006644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b10      	cmp	r3, #16
 8006398:	d122      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d11b      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0210 	mvn.w	r2, #16
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2208      	movs	r2, #8
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f933 	bl	8006632 <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f926 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f935 	bl	8006644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d10e      	bne.n	800640c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d107      	bne.n	800640c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0201 	mvn.w	r2, #1
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc fec0 	bl	800318c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d10e      	bne.n	8006438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d107      	bne.n	8006438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa77 	bl	8006926 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d10e      	bne.n	8006464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b40      	cmp	r3, #64	; 0x40
 8006452:	d107      	bne.n	8006464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800645c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8f9 	bl	8006656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b20      	cmp	r3, #32
 8006470:	d10e      	bne.n	8006490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b20      	cmp	r3, #32
 800647e:	d107      	bne.n	8006490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0220 	mvn.w	r2, #32
 8006488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa42 	bl	8006914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_ConfigClockSource+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0b3      	b.n	8006618 <HAL_TIM_ConfigClockSource+0x180>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e8:	d03e      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0xd0>
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ee:	f200 8087 	bhi.w	8006600 <HAL_TIM_ConfigClockSource+0x168>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	f000 8085 	beq.w	8006604 <HAL_TIM_ConfigClockSource+0x16c>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d87f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006500:	2b70      	cmp	r3, #112	; 0x70
 8006502:	d01a      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xa2>
 8006504:	2b70      	cmp	r3, #112	; 0x70
 8006506:	d87b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006508:	2b60      	cmp	r3, #96	; 0x60
 800650a:	d050      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x116>
 800650c:	2b60      	cmp	r3, #96	; 0x60
 800650e:	d877      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006510:	2b50      	cmp	r3, #80	; 0x50
 8006512:	d03c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0xf6>
 8006514:	2b50      	cmp	r3, #80	; 0x50
 8006516:	d873      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d058      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x136>
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d86f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006520:	2b30      	cmp	r3, #48	; 0x30
 8006522:	d064      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
 8006524:	2b30      	cmp	r3, #48	; 0x30
 8006526:	d86b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d060      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d867      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d05a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006538:	e062      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f000 f966 	bl	800681a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800655c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	609a      	str	r2, [r3, #8]
      break;
 8006566:	e04e      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f000 f94f 	bl	800681a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e03b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 f8c6 	bl	800672c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2150      	movs	r1, #80	; 0x50
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f91d 	bl	80067e6 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e02b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 f8e4 	bl	8006788 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2160      	movs	r1, #96	; 0x60
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f90d 	bl	80067e6 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e01b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 f8a6 	bl	800672c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f8fd 	bl	80067e6 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e00b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 f8f4 	bl	80067e6 <TIM_ITRx_SetConfig>
        break;
 80065fe:	e002      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006604:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr

08006656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr

08006668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a29      	ldr	r2, [pc, #164]	; (8006720 <TIM_Base_SetConfig+0xb8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00b      	beq.n	8006698 <TIM_Base_SetConfig+0x30>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0x30>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a26      	ldr	r2, [pc, #152]	; (8006724 <TIM_Base_SetConfig+0xbc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0x30>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a25      	ldr	r2, [pc, #148]	; (8006728 <TIM_Base_SetConfig+0xc0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d108      	bne.n	80066aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <TIM_Base_SetConfig+0xb8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00b      	beq.n	80066ca <TIM_Base_SetConfig+0x62>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d007      	beq.n	80066ca <TIM_Base_SetConfig+0x62>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <TIM_Base_SetConfig+0xbc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d003      	beq.n	80066ca <TIM_Base_SetConfig+0x62>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a18      	ldr	r2, [pc, #96]	; (8006728 <TIM_Base_SetConfig+0xc0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d108      	bne.n	80066dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a07      	ldr	r2, [pc, #28]	; (8006720 <TIM_Base_SetConfig+0xb8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d103      	bne.n	8006710 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	615a      	str	r2, [r3, #20]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800

0800672c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 030a 	bic.w	r3, r3, #10
 8006768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f023 0210 	bic.w	r2, r3, #16
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	031b      	lsls	r3, r3, #12
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr

080067e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	f043 0307 	orr.w	r3, r3, #7
 8006808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	609a      	str	r2, [r3, #8]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800681a:	b480      	push	{r7}
 800681c:	b087      	sub	sp, #28
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	021a      	lsls	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	431a      	orrs	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4313      	orrs	r3, r2
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	609a      	str	r2, [r3, #8]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800686c:	2302      	movs	r3, #2
 800686e:	e046      	b.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a16      	ldr	r2, [pc, #88]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d009      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a12      	ldr	r2, [pc, #72]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a10      	ldr	r2, [pc, #64]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10c      	bne.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800

08006914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr

08006926 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr

08006938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e03f      	b.n	80069ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fc ffe4 	bl	800392c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2224      	movs	r2, #36	; 0x24
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800697a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f829 	bl	80069d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a0e:	f023 030c 	bic.w	r3, r3, #12
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2c      	ldr	r2, [pc, #176]	; (8006ae8 <UART_SetConfig+0x114>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d103      	bne.n	8006a44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a3c:	f7ff fb06 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	e002      	b.n	8006a4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a44:	f7ff faee 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8006a48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009a      	lsls	r2, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <UART_SetConfig+0x118>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	0119      	lsls	r1, r3, #4
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009a      	lsls	r2, r3, #2
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <UART_SetConfig+0x118>)
 8006a82:	fba3 0302 	umull	r0, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2064      	movs	r0, #100	; 0x64
 8006a8a:	fb00 f303 	mul.w	r3, r0, r3
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	3332      	adds	r3, #50	; 0x32
 8006a94:	4a15      	ldr	r2, [pc, #84]	; (8006aec <UART_SetConfig+0x118>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa0:	4419      	add	r1, r3
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009a      	lsls	r2, r3, #2
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <UART_SetConfig+0x118>)
 8006aba:	fba3 0302 	umull	r0, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2064      	movs	r0, #100	; 0x64
 8006ac2:	fb00 f303 	mul.w	r3, r0, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	3332      	adds	r3, #50	; 0x32
 8006acc:	4a07      	ldr	r2, [pc, #28]	; (8006aec <UART_SetConfig+0x118>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	440a      	add	r2, r1
 8006ade:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40013800 	.word	0x40013800
 8006aec:	51eb851f 	.word	0x51eb851f

08006af0 <__errno>:
 8006af0:	4b01      	ldr	r3, [pc, #4]	; (8006af8 <__errno+0x8>)
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000014 	.word	0x20000014

08006afc <__libc_init_array>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	2600      	movs	r6, #0
 8006b00:	4d0c      	ldr	r5, [pc, #48]	; (8006b34 <__libc_init_array+0x38>)
 8006b02:	4c0d      	ldr	r4, [pc, #52]	; (8006b38 <__libc_init_array+0x3c>)
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	42a6      	cmp	r6, r4
 8006b0a:	d109      	bne.n	8006b20 <__libc_init_array+0x24>
 8006b0c:	f002 ff02 	bl	8009914 <_init>
 8006b10:	2600      	movs	r6, #0
 8006b12:	4d0a      	ldr	r5, [pc, #40]	; (8006b3c <__libc_init_array+0x40>)
 8006b14:	4c0a      	ldr	r4, [pc, #40]	; (8006b40 <__libc_init_array+0x44>)
 8006b16:	1b64      	subs	r4, r4, r5
 8006b18:	10a4      	asrs	r4, r4, #2
 8006b1a:	42a6      	cmp	r6, r4
 8006b1c:	d105      	bne.n	8006b2a <__libc_init_array+0x2e>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b24:	4798      	blx	r3
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7ee      	b.n	8006b08 <__libc_init_array+0xc>
 8006b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2e:	4798      	blx	r3
 8006b30:	3601      	adds	r6, #1
 8006b32:	e7f2      	b.n	8006b1a <__libc_init_array+0x1e>
 8006b34:	0800aacc 	.word	0x0800aacc
 8006b38:	0800aacc 	.word	0x0800aacc
 8006b3c:	0800aacc 	.word	0x0800aacc
 8006b40:	0800aad0 	.word	0x0800aad0

08006b44 <malloc>:
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <malloc+0xc>)
 8006b46:	4601      	mov	r1, r0
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	f000 b889 	b.w	8006c60 <_malloc_r>
 8006b4e:	bf00      	nop
 8006b50:	20000014 	.word	0x20000014

08006b54 <free>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <free+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f000 b819 	b.w	8006b90 <_free_r>
 8006b5e:	bf00      	nop
 8006b60:	20000014 	.word	0x20000014

08006b64 <memcpy>:
 8006b64:	440a      	add	r2, r1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b6c:	d100      	bne.n	8006b70 <memcpy+0xc>
 8006b6e:	4770      	bx	lr
 8006b70:	b510      	push	{r4, lr}
 8006b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b76:	4291      	cmp	r1, r2
 8006b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b7c:	d1f9      	bne.n	8006b72 <memcpy+0xe>
 8006b7e:	bd10      	pop	{r4, pc}

08006b80 <memset>:
 8006b80:	4603      	mov	r3, r0
 8006b82:	4402      	add	r2, r0
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <memset+0xa>
 8006b88:	4770      	bx	lr
 8006b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8e:	e7f9      	b.n	8006b84 <memset+0x4>

08006b90 <_free_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4605      	mov	r5, r0
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d040      	beq.n	8006c1a <_free_r+0x8a>
 8006b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9c:	1f0c      	subs	r4, r1, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bfb8      	it	lt
 8006ba2:	18e4      	addlt	r4, r4, r3
 8006ba4:	f001 fbec 	bl	8008380 <__malloc_lock>
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <_free_r+0x8c>)
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	b933      	cbnz	r3, 8006bbc <_free_r+0x2c>
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	6014      	str	r4, [r2, #0]
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb8:	f001 bbe8 	b.w	800838c <__malloc_unlock>
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d908      	bls.n	8006bd2 <_free_r+0x42>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	1821      	adds	r1, r4, r0
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1809      	addeq	r1, r1, r0
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	e7ed      	b.n	8006bae <_free_r+0x1e>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b10b      	cbz	r3, 8006bdc <_free_r+0x4c>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d9fa      	bls.n	8006bd2 <_free_r+0x42>
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	1850      	adds	r0, r2, r1
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d10b      	bne.n	8006bfc <_free_r+0x6c>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	4401      	add	r1, r0
 8006be8:	1850      	adds	r0, r2, r1
 8006bea:	4283      	cmp	r3, r0
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	d1e0      	bne.n	8006bb2 <_free_r+0x22>
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	4401      	add	r1, r0
 8006bf6:	6011      	str	r1, [r2, #0]
 8006bf8:	6053      	str	r3, [r2, #4]
 8006bfa:	e7da      	b.n	8006bb2 <_free_r+0x22>
 8006bfc:	d902      	bls.n	8006c04 <_free_r+0x74>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	602b      	str	r3, [r5, #0]
 8006c02:	e7d6      	b.n	8006bb2 <_free_r+0x22>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	1821      	adds	r1, r4, r0
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf01      	itttt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	1809      	addeq	r1, r1, r0
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	6054      	str	r4, [r2, #4]
 8006c18:	e7cb      	b.n	8006bb2 <_free_r+0x22>
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20000a80 	.word	0x20000a80

08006c20 <sbrk_aligned>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4e0e      	ldr	r6, [pc, #56]	; (8006c5c <sbrk_aligned+0x3c>)
 8006c24:	460c      	mov	r4, r1
 8006c26:	6831      	ldr	r1, [r6, #0]
 8006c28:	4605      	mov	r5, r0
 8006c2a:	b911      	cbnz	r1, 8006c32 <sbrk_aligned+0x12>
 8006c2c:	f000 fcec 	bl	8007608 <_sbrk_r>
 8006c30:	6030      	str	r0, [r6, #0]
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fce7 	bl	8007608 <_sbrk_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d00a      	beq.n	8006c54 <sbrk_aligned+0x34>
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	f024 0403 	bic.w	r4, r4, #3
 8006c44:	42a0      	cmp	r0, r4
 8006c46:	d007      	beq.n	8006c58 <sbrk_aligned+0x38>
 8006c48:	1a21      	subs	r1, r4, r0
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 fcdc 	bl	8007608 <_sbrk_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d101      	bne.n	8006c58 <sbrk_aligned+0x38>
 8006c54:	f04f 34ff 	mov.w	r4, #4294967295
 8006c58:	4620      	mov	r0, r4
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	20000a84 	.word	0x20000a84

08006c60 <_malloc_r>:
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	1ccd      	adds	r5, r1, #3
 8006c66:	f025 0503 	bic.w	r5, r5, #3
 8006c6a:	3508      	adds	r5, #8
 8006c6c:	2d0c      	cmp	r5, #12
 8006c6e:	bf38      	it	cc
 8006c70:	250c      	movcc	r5, #12
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	4607      	mov	r7, r0
 8006c76:	db01      	blt.n	8006c7c <_malloc_r+0x1c>
 8006c78:	42a9      	cmp	r1, r5
 8006c7a:	d905      	bls.n	8006c88 <_malloc_r+0x28>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	2600      	movs	r6, #0
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	4630      	mov	r0, r6
 8006c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c88:	4e2e      	ldr	r6, [pc, #184]	; (8006d44 <_malloc_r+0xe4>)
 8006c8a:	f001 fb79 	bl	8008380 <__malloc_lock>
 8006c8e:	6833      	ldr	r3, [r6, #0]
 8006c90:	461c      	mov	r4, r3
 8006c92:	bb34      	cbnz	r4, 8006ce2 <_malloc_r+0x82>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	f7ff ffc2 	bl	8006c20 <sbrk_aligned>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	d14d      	bne.n	8006d3e <_malloc_r+0xde>
 8006ca2:	6834      	ldr	r4, [r6, #0]
 8006ca4:	4626      	mov	r6, r4
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	d140      	bne.n	8006d2c <_malloc_r+0xcc>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	4631      	mov	r1, r6
 8006cae:	4638      	mov	r0, r7
 8006cb0:	eb04 0803 	add.w	r8, r4, r3
 8006cb4:	f000 fca8 	bl	8007608 <_sbrk_r>
 8006cb8:	4580      	cmp	r8, r0
 8006cba:	d13a      	bne.n	8006d32 <_malloc_r+0xd2>
 8006cbc:	6821      	ldr	r1, [r4, #0]
 8006cbe:	3503      	adds	r5, #3
 8006cc0:	1a6d      	subs	r5, r5, r1
 8006cc2:	f025 0503 	bic.w	r5, r5, #3
 8006cc6:	3508      	adds	r5, #8
 8006cc8:	2d0c      	cmp	r5, #12
 8006cca:	bf38      	it	cc
 8006ccc:	250c      	movcc	r5, #12
 8006cce:	4638      	mov	r0, r7
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7ff ffa5 	bl	8006c20 <sbrk_aligned>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d02b      	beq.n	8006d32 <_malloc_r+0xd2>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	442b      	add	r3, r5
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	e00e      	b.n	8006d00 <_malloc_r+0xa0>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	1b52      	subs	r2, r2, r5
 8006ce6:	d41e      	bmi.n	8006d26 <_malloc_r+0xc6>
 8006ce8:	2a0b      	cmp	r2, #11
 8006cea:	d916      	bls.n	8006d1a <_malloc_r+0xba>
 8006cec:	1961      	adds	r1, r4, r5
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	6025      	str	r5, [r4, #0]
 8006cf2:	bf18      	it	ne
 8006cf4:	6059      	strne	r1, [r3, #4]
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	bf08      	it	eq
 8006cfa:	6031      	streq	r1, [r6, #0]
 8006cfc:	5162      	str	r2, [r4, r5]
 8006cfe:	604b      	str	r3, [r1, #4]
 8006d00:	4638      	mov	r0, r7
 8006d02:	f104 060b 	add.w	r6, r4, #11
 8006d06:	f001 fb41 	bl	800838c <__malloc_unlock>
 8006d0a:	f026 0607 	bic.w	r6, r6, #7
 8006d0e:	1d23      	adds	r3, r4, #4
 8006d10:	1af2      	subs	r2, r6, r3
 8006d12:	d0b6      	beq.n	8006c82 <_malloc_r+0x22>
 8006d14:	1b9b      	subs	r3, r3, r6
 8006d16:	50a3      	str	r3, [r4, r2]
 8006d18:	e7b3      	b.n	8006c82 <_malloc_r+0x22>
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	bf0c      	ite	eq
 8006d20:	6032      	streq	r2, [r6, #0]
 8006d22:	605a      	strne	r2, [r3, #4]
 8006d24:	e7ec      	b.n	8006d00 <_malloc_r+0xa0>
 8006d26:	4623      	mov	r3, r4
 8006d28:	6864      	ldr	r4, [r4, #4]
 8006d2a:	e7b2      	b.n	8006c92 <_malloc_r+0x32>
 8006d2c:	4634      	mov	r4, r6
 8006d2e:	6876      	ldr	r6, [r6, #4]
 8006d30:	e7b9      	b.n	8006ca6 <_malloc_r+0x46>
 8006d32:	230c      	movs	r3, #12
 8006d34:	4638      	mov	r0, r7
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	f001 fb28 	bl	800838c <__malloc_unlock>
 8006d3c:	e7a1      	b.n	8006c82 <_malloc_r+0x22>
 8006d3e:	6025      	str	r5, [r4, #0]
 8006d40:	e7de      	b.n	8006d00 <_malloc_r+0xa0>
 8006d42:	bf00      	nop
 8006d44:	20000a80 	.word	0x20000a80

08006d48 <__cvt>:
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4e:	461f      	mov	r7, r3
 8006d50:	bfbb      	ittet	lt
 8006d52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d56:	461f      	movlt	r7, r3
 8006d58:	2300      	movge	r3, #0
 8006d5a:	232d      	movlt	r3, #45	; 0x2d
 8006d5c:	b088      	sub	sp, #32
 8006d5e:	4614      	mov	r4, r2
 8006d60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d64:	7013      	strb	r3, [r2, #0]
 8006d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d68:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d6c:	f023 0820 	bic.w	r8, r3, #32
 8006d70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d74:	d005      	beq.n	8006d82 <__cvt+0x3a>
 8006d76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d7a:	d100      	bne.n	8006d7e <__cvt+0x36>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e000      	b.n	8006d84 <__cvt+0x3c>
 8006d82:	2303      	movs	r3, #3
 8006d84:	aa07      	add	r2, sp, #28
 8006d86:	9204      	str	r2, [sp, #16]
 8006d88:	aa06      	add	r2, sp, #24
 8006d8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d8e:	e9cd 3500 	strd	r3, r5, [sp]
 8006d92:	4622      	mov	r2, r4
 8006d94:	463b      	mov	r3, r7
 8006d96:	f000 fcf3 	bl	8007780 <_dtoa_r>
 8006d9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d9e:	4606      	mov	r6, r0
 8006da0:	d102      	bne.n	8006da8 <__cvt+0x60>
 8006da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006da4:	07db      	lsls	r3, r3, #31
 8006da6:	d522      	bpl.n	8006dee <__cvt+0xa6>
 8006da8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dac:	eb06 0905 	add.w	r9, r6, r5
 8006db0:	d110      	bne.n	8006dd4 <__cvt+0x8c>
 8006db2:	7833      	ldrb	r3, [r6, #0]
 8006db4:	2b30      	cmp	r3, #48	; 0x30
 8006db6:	d10a      	bne.n	8006dce <__cvt+0x86>
 8006db8:	2200      	movs	r2, #0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	f7f9 fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8006dc4:	b918      	cbnz	r0, 8006dce <__cvt+0x86>
 8006dc6:	f1c5 0501 	rsb	r5, r5, #1
 8006dca:	f8ca 5000 	str.w	r5, [sl]
 8006dce:	f8da 3000 	ldr.w	r3, [sl]
 8006dd2:	4499      	add	r9, r3
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4639      	mov	r1, r7
 8006ddc:	f7f9 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8006de0:	b108      	cbz	r0, 8006de6 <__cvt+0x9e>
 8006de2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006de6:	2230      	movs	r2, #48	; 0x30
 8006de8:	9b07      	ldr	r3, [sp, #28]
 8006dea:	454b      	cmp	r3, r9
 8006dec:	d307      	bcc.n	8006dfe <__cvt+0xb6>
 8006dee:	4630      	mov	r0, r6
 8006df0:	9b07      	ldr	r3, [sp, #28]
 8006df2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006df4:	1b9b      	subs	r3, r3, r6
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	b008      	add	sp, #32
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfe:	1c59      	adds	r1, r3, #1
 8006e00:	9107      	str	r1, [sp, #28]
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	e7f0      	b.n	8006de8 <__cvt+0xa0>

08006e06 <__exponent>:
 8006e06:	4603      	mov	r3, r0
 8006e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	f803 2b02 	strb.w	r2, [r3], #2
 8006e10:	bfb6      	itet	lt
 8006e12:	222d      	movlt	r2, #45	; 0x2d
 8006e14:	222b      	movge	r2, #43	; 0x2b
 8006e16:	4249      	neglt	r1, r1
 8006e18:	2909      	cmp	r1, #9
 8006e1a:	7042      	strb	r2, [r0, #1]
 8006e1c:	dd2b      	ble.n	8006e76 <__exponent+0x70>
 8006e1e:	f10d 0407 	add.w	r4, sp, #7
 8006e22:	46a4      	mov	ip, r4
 8006e24:	270a      	movs	r7, #10
 8006e26:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	46a6      	mov	lr, r4
 8006e2e:	fb07 1516 	mls	r5, r7, r6, r1
 8006e32:	2a63      	cmp	r2, #99	; 0x63
 8006e34:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e38:	4631      	mov	r1, r6
 8006e3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e42:	dcf0      	bgt.n	8006e26 <__exponent+0x20>
 8006e44:	3130      	adds	r1, #48	; 0x30
 8006e46:	f1ae 0502 	sub.w	r5, lr, #2
 8006e4a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e4e:	4629      	mov	r1, r5
 8006e50:	1c44      	adds	r4, r0, #1
 8006e52:	4561      	cmp	r1, ip
 8006e54:	d30a      	bcc.n	8006e6c <__exponent+0x66>
 8006e56:	f10d 0209 	add.w	r2, sp, #9
 8006e5a:	eba2 020e 	sub.w	r2, r2, lr
 8006e5e:	4565      	cmp	r5, ip
 8006e60:	bf88      	it	hi
 8006e62:	2200      	movhi	r2, #0
 8006e64:	4413      	add	r3, r2
 8006e66:	1a18      	subs	r0, r3, r0
 8006e68:	b003      	add	sp, #12
 8006e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e70:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e74:	e7ed      	b.n	8006e52 <__exponent+0x4c>
 8006e76:	2330      	movs	r3, #48	; 0x30
 8006e78:	3130      	adds	r1, #48	; 0x30
 8006e7a:	7083      	strb	r3, [r0, #2]
 8006e7c:	70c1      	strb	r1, [r0, #3]
 8006e7e:	1d03      	adds	r3, r0, #4
 8006e80:	e7f1      	b.n	8006e66 <__exponent+0x60>
	...

08006e84 <_printf_float>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	b091      	sub	sp, #68	; 0x44
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e90:	4616      	mov	r6, r2
 8006e92:	461f      	mov	r7, r3
 8006e94:	4605      	mov	r5, r0
 8006e96:	f001 fa61 	bl	800835c <_localeconv_r>
 8006e9a:	6803      	ldr	r3, [r0, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea0:	f7f9 f956 	bl	8000150 <strlen>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eac:	900a      	str	r0, [sp, #40]	; 0x28
 8006eae:	3307      	adds	r3, #7
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	f103 0208 	add.w	r2, r3, #8
 8006eb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ebc:	f8d4 b000 	ldr.w	fp, [r4]
 8006ec0:	f8c8 2000 	str.w	r2, [r8]
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ecc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ed0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	4640      	mov	r0, r8
 8006edc:	4b9c      	ldr	r3, [pc, #624]	; (8007150 <_printf_float+0x2cc>)
 8006ede:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ee0:	f7f9 fd94 	bl	8000a0c <__aeabi_dcmpun>
 8006ee4:	bb70      	cbnz	r0, 8006f44 <_printf_float+0xc0>
 8006ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eea:	4640      	mov	r0, r8
 8006eec:	4b98      	ldr	r3, [pc, #608]	; (8007150 <_printf_float+0x2cc>)
 8006eee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef0:	f7f9 fd6e 	bl	80009d0 <__aeabi_dcmple>
 8006ef4:	bb30      	cbnz	r0, 8006f44 <_printf_float+0xc0>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4640      	mov	r0, r8
 8006efc:	4651      	mov	r1, sl
 8006efe:	f7f9 fd5d 	bl	80009bc <__aeabi_dcmplt>
 8006f02:	b110      	cbz	r0, 8006f0a <_printf_float+0x86>
 8006f04:	232d      	movs	r3, #45	; 0x2d
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0a:	4b92      	ldr	r3, [pc, #584]	; (8007154 <_printf_float+0x2d0>)
 8006f0c:	4892      	ldr	r0, [pc, #584]	; (8007158 <_printf_float+0x2d4>)
 8006f0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f12:	bf94      	ite	ls
 8006f14:	4698      	movls	r8, r3
 8006f16:	4680      	movhi	r8, r0
 8006f18:	2303      	movs	r3, #3
 8006f1a:	f04f 0a00 	mov.w	sl, #0
 8006f1e:	6123      	str	r3, [r4, #16]
 8006f20:	f02b 0304 	bic.w	r3, fp, #4
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	4633      	mov	r3, r6
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	9700      	str	r7, [sp, #0]
 8006f2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f30:	f000 f9d4 	bl	80072dc <_printf_common>
 8006f34:	3001      	adds	r0, #1
 8006f36:	f040 8090 	bne.w	800705a <_printf_float+0x1d6>
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	b011      	add	sp, #68	; 0x44
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	4642      	mov	r2, r8
 8006f46:	4653      	mov	r3, sl
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	f7f9 fd5e 	bl	8000a0c <__aeabi_dcmpun>
 8006f50:	b148      	cbz	r0, 8006f66 <_printf_float+0xe2>
 8006f52:	f1ba 0f00 	cmp.w	sl, #0
 8006f56:	bfb8      	it	lt
 8006f58:	232d      	movlt	r3, #45	; 0x2d
 8006f5a:	4880      	ldr	r0, [pc, #512]	; (800715c <_printf_float+0x2d8>)
 8006f5c:	bfb8      	it	lt
 8006f5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f62:	4b7f      	ldr	r3, [pc, #508]	; (8007160 <_printf_float+0x2dc>)
 8006f64:	e7d3      	b.n	8006f0e <_printf_float+0x8a>
 8006f66:	6863      	ldr	r3, [r4, #4]
 8006f68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	d142      	bne.n	8006ff6 <_printf_float+0x172>
 8006f70:	2306      	movs	r3, #6
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	9206      	str	r2, [sp, #24]
 8006f78:	aa0e      	add	r2, sp, #56	; 0x38
 8006f7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f7e:	aa0d      	add	r2, sp, #52	; 0x34
 8006f80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f84:	9203      	str	r2, [sp, #12]
 8006f86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	6863      	ldr	r3, [r4, #4]
 8006f92:	4642      	mov	r2, r8
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	4628      	mov	r0, r5
 8006f98:	4653      	mov	r3, sl
 8006f9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f9c:	f7ff fed4 	bl	8006d48 <__cvt>
 8006fa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fa2:	4680      	mov	r8, r0
 8006fa4:	2947      	cmp	r1, #71	; 0x47
 8006fa6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fa8:	d108      	bne.n	8006fbc <_printf_float+0x138>
 8006faa:	1cc8      	adds	r0, r1, #3
 8006fac:	db02      	blt.n	8006fb4 <_printf_float+0x130>
 8006fae:	6863      	ldr	r3, [r4, #4]
 8006fb0:	4299      	cmp	r1, r3
 8006fb2:	dd40      	ble.n	8007036 <_printf_float+0x1b2>
 8006fb4:	f1a9 0902 	sub.w	r9, r9, #2
 8006fb8:	fa5f f989 	uxtb.w	r9, r9
 8006fbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fc0:	d81f      	bhi.n	8007002 <_printf_float+0x17e>
 8006fc2:	464a      	mov	r2, r9
 8006fc4:	3901      	subs	r1, #1
 8006fc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fca:	910d      	str	r1, [sp, #52]	; 0x34
 8006fcc:	f7ff ff1b 	bl	8006e06 <__exponent>
 8006fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	1813      	adds	r3, r2, r0
 8006fd6:	2a01      	cmp	r2, #1
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	dc02      	bgt.n	8006fe2 <_printf_float+0x15e>
 8006fdc:	6822      	ldr	r2, [r4, #0]
 8006fde:	07d2      	lsls	r2, r2, #31
 8006fe0:	d501      	bpl.n	8006fe6 <_printf_float+0x162>
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d09b      	beq.n	8006f26 <_printf_float+0xa2>
 8006fee:	232d      	movs	r3, #45	; 0x2d
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff4:	e797      	b.n	8006f26 <_printf_float+0xa2>
 8006ff6:	2947      	cmp	r1, #71	; 0x47
 8006ff8:	d1bc      	bne.n	8006f74 <_printf_float+0xf0>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1ba      	bne.n	8006f74 <_printf_float+0xf0>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e7b7      	b.n	8006f72 <_printf_float+0xee>
 8007002:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007006:	d118      	bne.n	800703a <_printf_float+0x1b6>
 8007008:	2900      	cmp	r1, #0
 800700a:	6863      	ldr	r3, [r4, #4]
 800700c:	dd0b      	ble.n	8007026 <_printf_float+0x1a2>
 800700e:	6121      	str	r1, [r4, #16]
 8007010:	b913      	cbnz	r3, 8007018 <_printf_float+0x194>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	07d0      	lsls	r0, r2, #31
 8007016:	d502      	bpl.n	800701e <_printf_float+0x19a>
 8007018:	3301      	adds	r3, #1
 800701a:	440b      	add	r3, r1
 800701c:	6123      	str	r3, [r4, #16]
 800701e:	f04f 0a00 	mov.w	sl, #0
 8007022:	65a1      	str	r1, [r4, #88]	; 0x58
 8007024:	e7df      	b.n	8006fe6 <_printf_float+0x162>
 8007026:	b913      	cbnz	r3, 800702e <_printf_float+0x1aa>
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	07d2      	lsls	r2, r2, #31
 800702c:	d501      	bpl.n	8007032 <_printf_float+0x1ae>
 800702e:	3302      	adds	r3, #2
 8007030:	e7f4      	b.n	800701c <_printf_float+0x198>
 8007032:	2301      	movs	r3, #1
 8007034:	e7f2      	b.n	800701c <_printf_float+0x198>
 8007036:	f04f 0967 	mov.w	r9, #103	; 0x67
 800703a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800703c:	4299      	cmp	r1, r3
 800703e:	db05      	blt.n	800704c <_printf_float+0x1c8>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	6121      	str	r1, [r4, #16]
 8007044:	07d8      	lsls	r0, r3, #31
 8007046:	d5ea      	bpl.n	800701e <_printf_float+0x19a>
 8007048:	1c4b      	adds	r3, r1, #1
 800704a:	e7e7      	b.n	800701c <_printf_float+0x198>
 800704c:	2900      	cmp	r1, #0
 800704e:	bfcc      	ite	gt
 8007050:	2201      	movgt	r2, #1
 8007052:	f1c1 0202 	rsble	r2, r1, #2
 8007056:	4413      	add	r3, r2
 8007058:	e7e0      	b.n	800701c <_printf_float+0x198>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	055a      	lsls	r2, r3, #21
 800705e:	d407      	bmi.n	8007070 <_printf_float+0x1ec>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	4642      	mov	r2, r8
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	d12b      	bne.n	80070c6 <_printf_float+0x242>
 800706e:	e764      	b.n	8006f3a <_printf_float+0xb6>
 8007070:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007074:	f240 80dd 	bls.w	8007232 <_printf_float+0x3ae>
 8007078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800707c:	2200      	movs	r2, #0
 800707e:	2300      	movs	r3, #0
 8007080:	f7f9 fc92 	bl	80009a8 <__aeabi_dcmpeq>
 8007084:	2800      	cmp	r0, #0
 8007086:	d033      	beq.n	80070f0 <_printf_float+0x26c>
 8007088:	2301      	movs	r3, #1
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	4a35      	ldr	r2, [pc, #212]	; (8007164 <_printf_float+0x2e0>)
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f af51 	beq.w	8006f3a <_printf_float+0xb6>
 8007098:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800709c:	429a      	cmp	r2, r3
 800709e:	db02      	blt.n	80070a6 <_printf_float+0x222>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	07d8      	lsls	r0, r3, #31
 80070a4:	d50f      	bpl.n	80070c6 <_printf_float+0x242>
 80070a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f af42 	beq.w	8006f3a <_printf_float+0xb6>
 80070b6:	f04f 0800 	mov.w	r8, #0
 80070ba:	f104 091a 	add.w	r9, r4, #26
 80070be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070c0:	3b01      	subs	r3, #1
 80070c2:	4543      	cmp	r3, r8
 80070c4:	dc09      	bgt.n	80070da <_printf_float+0x256>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	079b      	lsls	r3, r3, #30
 80070ca:	f100 8102 	bmi.w	80072d2 <_printf_float+0x44e>
 80070ce:	68e0      	ldr	r0, [r4, #12]
 80070d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d2:	4298      	cmp	r0, r3
 80070d4:	bfb8      	it	lt
 80070d6:	4618      	movlt	r0, r3
 80070d8:	e731      	b.n	8006f3e <_printf_float+0xba>
 80070da:	2301      	movs	r3, #1
 80070dc:	464a      	mov	r2, r9
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f af28 	beq.w	8006f3a <_printf_float+0xb6>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	e7e6      	b.n	80070be <_printf_float+0x23a>
 80070f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	dc38      	bgt.n	8007168 <_printf_float+0x2e4>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <_printf_float+0x2e0>)
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f af1a 	beq.w	8006f3a <_printf_float+0xb6>
 8007106:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800710a:	4313      	orrs	r3, r2
 800710c:	d102      	bne.n	8007114 <_printf_float+0x290>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	07d9      	lsls	r1, r3, #31
 8007112:	d5d8      	bpl.n	80070c6 <_printf_float+0x242>
 8007114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af0b 	beq.w	8006f3a <_printf_float+0xb6>
 8007124:	f04f 0900 	mov.w	r9, #0
 8007128:	f104 0a1a 	add.w	sl, r4, #26
 800712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712e:	425b      	negs	r3, r3
 8007130:	454b      	cmp	r3, r9
 8007132:	dc01      	bgt.n	8007138 <_printf_float+0x2b4>
 8007134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007136:	e794      	b.n	8007062 <_printf_float+0x1de>
 8007138:	2301      	movs	r3, #1
 800713a:	4652      	mov	r2, sl
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	f43f aef9 	beq.w	8006f3a <_printf_float+0xb6>
 8007148:	f109 0901 	add.w	r9, r9, #1
 800714c:	e7ee      	b.n	800712c <_printf_float+0x2a8>
 800714e:	bf00      	nop
 8007150:	7fefffff 	.word	0x7fefffff
 8007154:	0800a6f0 	.word	0x0800a6f0
 8007158:	0800a6f4 	.word	0x0800a6f4
 800715c:	0800a6fc 	.word	0x0800a6fc
 8007160:	0800a6f8 	.word	0x0800a6f8
 8007164:	0800a700 	.word	0x0800a700
 8007168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800716c:	429a      	cmp	r2, r3
 800716e:	bfa8      	it	ge
 8007170:	461a      	movge	r2, r3
 8007172:	2a00      	cmp	r2, #0
 8007174:	4691      	mov	r9, r2
 8007176:	dc37      	bgt.n	80071e8 <_printf_float+0x364>
 8007178:	f04f 0b00 	mov.w	fp, #0
 800717c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007180:	f104 021a 	add.w	r2, r4, #26
 8007184:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007188:	ebaa 0309 	sub.w	r3, sl, r9
 800718c:	455b      	cmp	r3, fp
 800718e:	dc33      	bgt.n	80071f8 <_printf_float+0x374>
 8007190:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007194:	429a      	cmp	r2, r3
 8007196:	db3b      	blt.n	8007210 <_printf_float+0x38c>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	07da      	lsls	r2, r3, #31
 800719c:	d438      	bmi.n	8007210 <_printf_float+0x38c>
 800719e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071a2:	eba3 020a 	sub.w	r2, r3, sl
 80071a6:	eba3 0901 	sub.w	r9, r3, r1
 80071aa:	4591      	cmp	r9, r2
 80071ac:	bfa8      	it	ge
 80071ae:	4691      	movge	r9, r2
 80071b0:	f1b9 0f00 	cmp.w	r9, #0
 80071b4:	dc34      	bgt.n	8007220 <_printf_float+0x39c>
 80071b6:	f04f 0800 	mov.w	r8, #0
 80071ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071be:	f104 0a1a 	add.w	sl, r4, #26
 80071c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	eba3 0309 	sub.w	r3, r3, r9
 80071cc:	4543      	cmp	r3, r8
 80071ce:	f77f af7a 	ble.w	80070c6 <_printf_float+0x242>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f aeac 	beq.w	8006f3a <_printf_float+0xb6>
 80071e2:	f108 0801 	add.w	r8, r8, #1
 80071e6:	e7ec      	b.n	80071c2 <_printf_float+0x33e>
 80071e8:	4613      	mov	r3, r2
 80071ea:	4631      	mov	r1, r6
 80071ec:	4642      	mov	r2, r8
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	d1c0      	bne.n	8007178 <_printf_float+0x2f4>
 80071f6:	e6a0      	b.n	8006f3a <_printf_float+0xb6>
 80071f8:	2301      	movs	r3, #1
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	f43f ae99 	beq.w	8006f3a <_printf_float+0xb6>
 8007208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800720a:	f10b 0b01 	add.w	fp, fp, #1
 800720e:	e7b9      	b.n	8007184 <_printf_float+0x300>
 8007210:	4631      	mov	r1, r6
 8007212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	d1bf      	bne.n	800719e <_printf_float+0x31a>
 800721e:	e68c      	b.n	8006f3a <_printf_float+0xb6>
 8007220:	464b      	mov	r3, r9
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	eb08 020a 	add.w	r2, r8, sl
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	d1c2      	bne.n	80071b6 <_printf_float+0x332>
 8007230:	e683      	b.n	8006f3a <_printf_float+0xb6>
 8007232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007234:	2a01      	cmp	r2, #1
 8007236:	dc01      	bgt.n	800723c <_printf_float+0x3b8>
 8007238:	07db      	lsls	r3, r3, #31
 800723a:	d537      	bpl.n	80072ac <_printf_float+0x428>
 800723c:	2301      	movs	r3, #1
 800723e:	4642      	mov	r2, r8
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	f43f ae77 	beq.w	8006f3a <_printf_float+0xb6>
 800724c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f ae6f 	beq.w	8006f3a <_printf_float+0xb6>
 800725c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	f7f9 fba0 	bl	80009a8 <__aeabi_dcmpeq>
 8007268:	b9d8      	cbnz	r0, 80072a2 <_printf_float+0x41e>
 800726a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800726c:	f108 0201 	add.w	r2, r8, #1
 8007270:	3b01      	subs	r3, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d10e      	bne.n	800729a <_printf_float+0x416>
 800727c:	e65d      	b.n	8006f3a <_printf_float+0xb6>
 800727e:	2301      	movs	r3, #1
 8007280:	464a      	mov	r2, r9
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae56 	beq.w	8006f3a <_printf_float+0xb6>
 800728e:	f108 0801 	add.w	r8, r8, #1
 8007292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007294:	3b01      	subs	r3, #1
 8007296:	4543      	cmp	r3, r8
 8007298:	dcf1      	bgt.n	800727e <_printf_float+0x3fa>
 800729a:	4653      	mov	r3, sl
 800729c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072a0:	e6e0      	b.n	8007064 <_printf_float+0x1e0>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	f104 091a 	add.w	r9, r4, #26
 80072aa:	e7f2      	b.n	8007292 <_printf_float+0x40e>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4642      	mov	r2, r8
 80072b0:	e7df      	b.n	8007272 <_printf_float+0x3ee>
 80072b2:	2301      	movs	r3, #1
 80072b4:	464a      	mov	r2, r9
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f ae3c 	beq.w	8006f3a <_printf_float+0xb6>
 80072c2:	f108 0801 	add.w	r8, r8, #1
 80072c6:	68e3      	ldr	r3, [r4, #12]
 80072c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072ca:	1a5b      	subs	r3, r3, r1
 80072cc:	4543      	cmp	r3, r8
 80072ce:	dcf0      	bgt.n	80072b2 <_printf_float+0x42e>
 80072d0:	e6fd      	b.n	80070ce <_printf_float+0x24a>
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	f104 0919 	add.w	r9, r4, #25
 80072da:	e7f4      	b.n	80072c6 <_printf_float+0x442>

080072dc <_printf_common>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	4616      	mov	r6, r2
 80072e2:	4699      	mov	r9, r3
 80072e4:	688a      	ldr	r2, [r1, #8]
 80072e6:	690b      	ldr	r3, [r1, #16]
 80072e8:	4607      	mov	r7, r0
 80072ea:	4293      	cmp	r3, r2
 80072ec:	bfb8      	it	lt
 80072ee:	4613      	movlt	r3, r2
 80072f0:	6033      	str	r3, [r6, #0]
 80072f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f6:	460c      	mov	r4, r1
 80072f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072fc:	b10a      	cbz	r2, 8007302 <_printf_common+0x26>
 80072fe:	3301      	adds	r3, #1
 8007300:	6033      	str	r3, [r6, #0]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	0699      	lsls	r1, r3, #26
 8007306:	bf42      	ittt	mi
 8007308:	6833      	ldrmi	r3, [r6, #0]
 800730a:	3302      	addmi	r3, #2
 800730c:	6033      	strmi	r3, [r6, #0]
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	f015 0506 	ands.w	r5, r5, #6
 8007314:	d106      	bne.n	8007324 <_printf_common+0x48>
 8007316:	f104 0a19 	add.w	sl, r4, #25
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	6832      	ldr	r2, [r6, #0]
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	42ab      	cmp	r3, r5
 8007322:	dc28      	bgt.n	8007376 <_printf_common+0x9a>
 8007324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007328:	1e13      	subs	r3, r2, #0
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	bf18      	it	ne
 800732e:	2301      	movne	r3, #1
 8007330:	0692      	lsls	r2, r2, #26
 8007332:	d42d      	bmi.n	8007390 <_printf_common+0xb4>
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d020      	beq.n	8007384 <_printf_common+0xa8>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	68e5      	ldr	r5, [r4, #12]
 8007346:	f003 0306 	and.w	r3, r3, #6
 800734a:	2b04      	cmp	r3, #4
 800734c:	bf18      	it	ne
 800734e:	2500      	movne	r5, #0
 8007350:	6832      	ldr	r2, [r6, #0]
 8007352:	f04f 0600 	mov.w	r6, #0
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	bf08      	it	eq
 800735a:	1aad      	subeq	r5, r5, r2
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	bf08      	it	eq
 8007360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007364:	4293      	cmp	r3, r2
 8007366:	bfc4      	itt	gt
 8007368:	1a9b      	subgt	r3, r3, r2
 800736a:	18ed      	addgt	r5, r5, r3
 800736c:	341a      	adds	r4, #26
 800736e:	42b5      	cmp	r5, r6
 8007370:	d11a      	bne.n	80073a8 <_printf_common+0xcc>
 8007372:	2000      	movs	r0, #0
 8007374:	e008      	b.n	8007388 <_printf_common+0xac>
 8007376:	2301      	movs	r3, #1
 8007378:	4652      	mov	r2, sl
 800737a:	4649      	mov	r1, r9
 800737c:	4638      	mov	r0, r7
 800737e:	47c0      	blx	r8
 8007380:	3001      	adds	r0, #1
 8007382:	d103      	bne.n	800738c <_printf_common+0xb0>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738c:	3501      	adds	r5, #1
 800738e:	e7c4      	b.n	800731a <_printf_common+0x3e>
 8007390:	2030      	movs	r0, #48	; 0x30
 8007392:	18e1      	adds	r1, r4, r3
 8007394:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800739e:	4422      	add	r2, r4
 80073a0:	3302      	adds	r3, #2
 80073a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a6:	e7c5      	b.n	8007334 <_printf_common+0x58>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4622      	mov	r2, r4
 80073ac:	4649      	mov	r1, r9
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c0      	blx	r8
 80073b2:	3001      	adds	r0, #1
 80073b4:	d0e6      	beq.n	8007384 <_printf_common+0xa8>
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7d9      	b.n	800736e <_printf_common+0x92>
	...

080073bc <_printf_i>:
 80073bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	7e0f      	ldrb	r7, [r1, #24]
 80073c2:	4691      	mov	r9, r2
 80073c4:	2f78      	cmp	r7, #120	; 0x78
 80073c6:	4680      	mov	r8, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	469a      	mov	sl, r3
 80073cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073d2:	d807      	bhi.n	80073e4 <_printf_i+0x28>
 80073d4:	2f62      	cmp	r7, #98	; 0x62
 80073d6:	d80a      	bhi.n	80073ee <_printf_i+0x32>
 80073d8:	2f00      	cmp	r7, #0
 80073da:	f000 80d9 	beq.w	8007590 <_printf_i+0x1d4>
 80073de:	2f58      	cmp	r7, #88	; 0x58
 80073e0:	f000 80a4 	beq.w	800752c <_printf_i+0x170>
 80073e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073ec:	e03a      	b.n	8007464 <_printf_i+0xa8>
 80073ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073f2:	2b15      	cmp	r3, #21
 80073f4:	d8f6      	bhi.n	80073e4 <_printf_i+0x28>
 80073f6:	a101      	add	r1, pc, #4	; (adr r1, 80073fc <_printf_i+0x40>)
 80073f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073fc:	08007455 	.word	0x08007455
 8007400:	08007469 	.word	0x08007469
 8007404:	080073e5 	.word	0x080073e5
 8007408:	080073e5 	.word	0x080073e5
 800740c:	080073e5 	.word	0x080073e5
 8007410:	080073e5 	.word	0x080073e5
 8007414:	08007469 	.word	0x08007469
 8007418:	080073e5 	.word	0x080073e5
 800741c:	080073e5 	.word	0x080073e5
 8007420:	080073e5 	.word	0x080073e5
 8007424:	080073e5 	.word	0x080073e5
 8007428:	08007577 	.word	0x08007577
 800742c:	08007499 	.word	0x08007499
 8007430:	08007559 	.word	0x08007559
 8007434:	080073e5 	.word	0x080073e5
 8007438:	080073e5 	.word	0x080073e5
 800743c:	08007599 	.word	0x08007599
 8007440:	080073e5 	.word	0x080073e5
 8007444:	08007499 	.word	0x08007499
 8007448:	080073e5 	.word	0x080073e5
 800744c:	080073e5 	.word	0x080073e5
 8007450:	08007561 	.word	0x08007561
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	602a      	str	r2, [r5, #0]
 800745c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007464:	2301      	movs	r3, #1
 8007466:	e0a4      	b.n	80075b2 <_printf_i+0x1f6>
 8007468:	6820      	ldr	r0, [r4, #0]
 800746a:	6829      	ldr	r1, [r5, #0]
 800746c:	0606      	lsls	r6, r0, #24
 800746e:	f101 0304 	add.w	r3, r1, #4
 8007472:	d50a      	bpl.n	800748a <_printf_i+0xce>
 8007474:	680e      	ldr	r6, [r1, #0]
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	2e00      	cmp	r6, #0
 800747a:	da03      	bge.n	8007484 <_printf_i+0xc8>
 800747c:	232d      	movs	r3, #45	; 0x2d
 800747e:	4276      	negs	r6, r6
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007484:	230a      	movs	r3, #10
 8007486:	485e      	ldr	r0, [pc, #376]	; (8007600 <_printf_i+0x244>)
 8007488:	e019      	b.n	80074be <_printf_i+0x102>
 800748a:	680e      	ldr	r6, [r1, #0]
 800748c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	bf18      	it	ne
 8007494:	b236      	sxthne	r6, r6
 8007496:	e7ef      	b.n	8007478 <_printf_i+0xbc>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	6820      	ldr	r0, [r4, #0]
 800749c:	1d19      	adds	r1, r3, #4
 800749e:	6029      	str	r1, [r5, #0]
 80074a0:	0601      	lsls	r1, r0, #24
 80074a2:	d501      	bpl.n	80074a8 <_printf_i+0xec>
 80074a4:	681e      	ldr	r6, [r3, #0]
 80074a6:	e002      	b.n	80074ae <_printf_i+0xf2>
 80074a8:	0646      	lsls	r6, r0, #25
 80074aa:	d5fb      	bpl.n	80074a4 <_printf_i+0xe8>
 80074ac:	881e      	ldrh	r6, [r3, #0]
 80074ae:	2f6f      	cmp	r7, #111	; 0x6f
 80074b0:	bf0c      	ite	eq
 80074b2:	2308      	moveq	r3, #8
 80074b4:	230a      	movne	r3, #10
 80074b6:	4852      	ldr	r0, [pc, #328]	; (8007600 <_printf_i+0x244>)
 80074b8:	2100      	movs	r1, #0
 80074ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074be:	6865      	ldr	r5, [r4, #4]
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	bfa8      	it	ge
 80074c4:	6821      	ldrge	r1, [r4, #0]
 80074c6:	60a5      	str	r5, [r4, #8]
 80074c8:	bfa4      	itt	ge
 80074ca:	f021 0104 	bicge.w	r1, r1, #4
 80074ce:	6021      	strge	r1, [r4, #0]
 80074d0:	b90e      	cbnz	r6, 80074d6 <_printf_i+0x11a>
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	d04d      	beq.n	8007572 <_printf_i+0x1b6>
 80074d6:	4615      	mov	r5, r2
 80074d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80074dc:	fb03 6711 	mls	r7, r3, r1, r6
 80074e0:	5dc7      	ldrb	r7, [r0, r7]
 80074e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074e6:	4637      	mov	r7, r6
 80074e8:	42bb      	cmp	r3, r7
 80074ea:	460e      	mov	r6, r1
 80074ec:	d9f4      	bls.n	80074d8 <_printf_i+0x11c>
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d10b      	bne.n	800750a <_printf_i+0x14e>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	07de      	lsls	r6, r3, #31
 80074f6:	d508      	bpl.n	800750a <_printf_i+0x14e>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	6861      	ldr	r1, [r4, #4]
 80074fc:	4299      	cmp	r1, r3
 80074fe:	bfde      	ittt	le
 8007500:	2330      	movle	r3, #48	; 0x30
 8007502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800750a:	1b52      	subs	r2, r2, r5
 800750c:	6122      	str	r2, [r4, #16]
 800750e:	464b      	mov	r3, r9
 8007510:	4621      	mov	r1, r4
 8007512:	4640      	mov	r0, r8
 8007514:	f8cd a000 	str.w	sl, [sp]
 8007518:	aa03      	add	r2, sp, #12
 800751a:	f7ff fedf 	bl	80072dc <_printf_common>
 800751e:	3001      	adds	r0, #1
 8007520:	d14c      	bne.n	80075bc <_printf_i+0x200>
 8007522:	f04f 30ff 	mov.w	r0, #4294967295
 8007526:	b004      	add	sp, #16
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	4834      	ldr	r0, [pc, #208]	; (8007600 <_printf_i+0x244>)
 800752e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007532:	6829      	ldr	r1, [r5, #0]
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	f851 6b04 	ldr.w	r6, [r1], #4
 800753a:	6029      	str	r1, [r5, #0]
 800753c:	061d      	lsls	r5, r3, #24
 800753e:	d514      	bpl.n	800756a <_printf_i+0x1ae>
 8007540:	07df      	lsls	r7, r3, #31
 8007542:	bf44      	itt	mi
 8007544:	f043 0320 	orrmi.w	r3, r3, #32
 8007548:	6023      	strmi	r3, [r4, #0]
 800754a:	b91e      	cbnz	r6, 8007554 <_printf_i+0x198>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	f023 0320 	bic.w	r3, r3, #32
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	2310      	movs	r3, #16
 8007556:	e7af      	b.n	80074b8 <_printf_i+0xfc>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	f043 0320 	orr.w	r3, r3, #32
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	2378      	movs	r3, #120	; 0x78
 8007562:	4828      	ldr	r0, [pc, #160]	; (8007604 <_printf_i+0x248>)
 8007564:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007568:	e7e3      	b.n	8007532 <_printf_i+0x176>
 800756a:	0659      	lsls	r1, r3, #25
 800756c:	bf48      	it	mi
 800756e:	b2b6      	uxthmi	r6, r6
 8007570:	e7e6      	b.n	8007540 <_printf_i+0x184>
 8007572:	4615      	mov	r5, r2
 8007574:	e7bb      	b.n	80074ee <_printf_i+0x132>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	6826      	ldr	r6, [r4, #0]
 800757a:	1d18      	adds	r0, r3, #4
 800757c:	6961      	ldr	r1, [r4, #20]
 800757e:	6028      	str	r0, [r5, #0]
 8007580:	0635      	lsls	r5, r6, #24
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	d501      	bpl.n	800758a <_printf_i+0x1ce>
 8007586:	6019      	str	r1, [r3, #0]
 8007588:	e002      	b.n	8007590 <_printf_i+0x1d4>
 800758a:	0670      	lsls	r0, r6, #25
 800758c:	d5fb      	bpl.n	8007586 <_printf_i+0x1ca>
 800758e:	8019      	strh	r1, [r3, #0]
 8007590:	2300      	movs	r3, #0
 8007592:	4615      	mov	r5, r2
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	e7ba      	b.n	800750e <_printf_i+0x152>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	2100      	movs	r1, #0
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	602a      	str	r2, [r5, #0]
 80075a0:	681d      	ldr	r5, [r3, #0]
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 fedd 	bl	8008364 <memchr>
 80075aa:	b108      	cbz	r0, 80075b0 <_printf_i+0x1f4>
 80075ac:	1b40      	subs	r0, r0, r5
 80075ae:	6060      	str	r0, [r4, #4]
 80075b0:	6863      	ldr	r3, [r4, #4]
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	2300      	movs	r3, #0
 80075b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ba:	e7a8      	b.n	800750e <_printf_i+0x152>
 80075bc:	462a      	mov	r2, r5
 80075be:	4649      	mov	r1, r9
 80075c0:	4640      	mov	r0, r8
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	47d0      	blx	sl
 80075c6:	3001      	adds	r0, #1
 80075c8:	d0ab      	beq.n	8007522 <_printf_i+0x166>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	079b      	lsls	r3, r3, #30
 80075ce:	d413      	bmi.n	80075f8 <_printf_i+0x23c>
 80075d0:	68e0      	ldr	r0, [r4, #12]
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	4298      	cmp	r0, r3
 80075d6:	bfb8      	it	lt
 80075d8:	4618      	movlt	r0, r3
 80075da:	e7a4      	b.n	8007526 <_printf_i+0x16a>
 80075dc:	2301      	movs	r3, #1
 80075de:	4632      	mov	r2, r6
 80075e0:	4649      	mov	r1, r9
 80075e2:	4640      	mov	r0, r8
 80075e4:	47d0      	blx	sl
 80075e6:	3001      	adds	r0, #1
 80075e8:	d09b      	beq.n	8007522 <_printf_i+0x166>
 80075ea:	3501      	adds	r5, #1
 80075ec:	68e3      	ldr	r3, [r4, #12]
 80075ee:	9903      	ldr	r1, [sp, #12]
 80075f0:	1a5b      	subs	r3, r3, r1
 80075f2:	42ab      	cmp	r3, r5
 80075f4:	dcf2      	bgt.n	80075dc <_printf_i+0x220>
 80075f6:	e7eb      	b.n	80075d0 <_printf_i+0x214>
 80075f8:	2500      	movs	r5, #0
 80075fa:	f104 0619 	add.w	r6, r4, #25
 80075fe:	e7f5      	b.n	80075ec <_printf_i+0x230>
 8007600:	0800a702 	.word	0x0800a702
 8007604:	0800a713 	.word	0x0800a713

08007608 <_sbrk_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	2300      	movs	r3, #0
 800760c:	4d05      	ldr	r5, [pc, #20]	; (8007624 <_sbrk_r+0x1c>)
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7fc fad4 	bl	8003bc0 <_sbrk>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d102      	bne.n	8007622 <_sbrk_r+0x1a>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b103      	cbz	r3, 8007622 <_sbrk_r+0x1a>
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	20000a88 	.word	0x20000a88

08007628 <siprintf>:
 8007628:	b40e      	push	{r1, r2, r3}
 800762a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800762e:	b500      	push	{lr}
 8007630:	b09c      	sub	sp, #112	; 0x70
 8007632:	ab1d      	add	r3, sp, #116	; 0x74
 8007634:	9002      	str	r0, [sp, #8]
 8007636:	9006      	str	r0, [sp, #24]
 8007638:	9107      	str	r1, [sp, #28]
 800763a:	9104      	str	r1, [sp, #16]
 800763c:	4808      	ldr	r0, [pc, #32]	; (8007660 <siprintf+0x38>)
 800763e:	4909      	ldr	r1, [pc, #36]	; (8007664 <siprintf+0x3c>)
 8007640:	f853 2b04 	ldr.w	r2, [r3], #4
 8007644:	9105      	str	r1, [sp, #20]
 8007646:	6800      	ldr	r0, [r0, #0]
 8007648:	a902      	add	r1, sp, #8
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	f001 fa96 	bl	8008b7c <_svfiprintf_r>
 8007650:	2200      	movs	r2, #0
 8007652:	9b02      	ldr	r3, [sp, #8]
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	b01c      	add	sp, #112	; 0x70
 8007658:	f85d eb04 	ldr.w	lr, [sp], #4
 800765c:	b003      	add	sp, #12
 800765e:	4770      	bx	lr
 8007660:	20000014 	.word	0x20000014
 8007664:	ffff0208 	.word	0xffff0208

08007668 <quorem>:
 8007668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	6903      	ldr	r3, [r0, #16]
 800766e:	690c      	ldr	r4, [r1, #16]
 8007670:	4607      	mov	r7, r0
 8007672:	42a3      	cmp	r3, r4
 8007674:	f2c0 8082 	blt.w	800777c <quorem+0x114>
 8007678:	3c01      	subs	r4, #1
 800767a:	f100 0514 	add.w	r5, r0, #20
 800767e:	f101 0814 	add.w	r8, r1, #20
 8007682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800768c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007690:	3301      	adds	r3, #1
 8007692:	429a      	cmp	r2, r3
 8007694:	fbb2 f6f3 	udiv	r6, r2, r3
 8007698:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800769c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076a0:	d331      	bcc.n	8007706 <quorem+0x9e>
 80076a2:	f04f 0e00 	mov.w	lr, #0
 80076a6:	4640      	mov	r0, r8
 80076a8:	46ac      	mov	ip, r5
 80076aa:	46f2      	mov	sl, lr
 80076ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80076b0:	b293      	uxth	r3, r2
 80076b2:	fb06 e303 	mla	r3, r6, r3, lr
 80076b6:	0c12      	lsrs	r2, r2, #16
 80076b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076bc:	b29b      	uxth	r3, r3
 80076be:	fb06 e202 	mla	r2, r6, r2, lr
 80076c2:	ebaa 0303 	sub.w	r3, sl, r3
 80076c6:	f8dc a000 	ldr.w	sl, [ip]
 80076ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ce:	fa1f fa8a 	uxth.w	sl, sl
 80076d2:	4453      	add	r3, sl
 80076d4:	f8dc a000 	ldr.w	sl, [ip]
 80076d8:	b292      	uxth	r2, r2
 80076da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e8:	4581      	cmp	r9, r0
 80076ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076ee:	f84c 3b04 	str.w	r3, [ip], #4
 80076f2:	d2db      	bcs.n	80076ac <quorem+0x44>
 80076f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80076f8:	b92b      	cbnz	r3, 8007706 <quorem+0x9e>
 80076fa:	9b01      	ldr	r3, [sp, #4]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	429d      	cmp	r5, r3
 8007700:	461a      	mov	r2, r3
 8007702:	d32f      	bcc.n	8007764 <quorem+0xfc>
 8007704:	613c      	str	r4, [r7, #16]
 8007706:	4638      	mov	r0, r7
 8007708:	f001 f8c4 	bl	8008894 <__mcmp>
 800770c:	2800      	cmp	r0, #0
 800770e:	db25      	blt.n	800775c <quorem+0xf4>
 8007710:	4628      	mov	r0, r5
 8007712:	f04f 0c00 	mov.w	ip, #0
 8007716:	3601      	adds	r6, #1
 8007718:	f858 1b04 	ldr.w	r1, [r8], #4
 800771c:	f8d0 e000 	ldr.w	lr, [r0]
 8007720:	b28b      	uxth	r3, r1
 8007722:	ebac 0303 	sub.w	r3, ip, r3
 8007726:	fa1f f28e 	uxth.w	r2, lr
 800772a:	4413      	add	r3, r2
 800772c:	0c0a      	lsrs	r2, r1, #16
 800772e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007732:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007736:	b29b      	uxth	r3, r3
 8007738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800773c:	45c1      	cmp	r9, r8
 800773e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007742:	f840 3b04 	str.w	r3, [r0], #4
 8007746:	d2e7      	bcs.n	8007718 <quorem+0xb0>
 8007748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800774c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007750:	b922      	cbnz	r2, 800775c <quorem+0xf4>
 8007752:	3b04      	subs	r3, #4
 8007754:	429d      	cmp	r5, r3
 8007756:	461a      	mov	r2, r3
 8007758:	d30a      	bcc.n	8007770 <quorem+0x108>
 800775a:	613c      	str	r4, [r7, #16]
 800775c:	4630      	mov	r0, r6
 800775e:	b003      	add	sp, #12
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	3b04      	subs	r3, #4
 8007768:	2a00      	cmp	r2, #0
 800776a:	d1cb      	bne.n	8007704 <quorem+0x9c>
 800776c:	3c01      	subs	r4, #1
 800776e:	e7c6      	b.n	80076fe <quorem+0x96>
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	3b04      	subs	r3, #4
 8007774:	2a00      	cmp	r2, #0
 8007776:	d1f0      	bne.n	800775a <quorem+0xf2>
 8007778:	3c01      	subs	r4, #1
 800777a:	e7eb      	b.n	8007754 <quorem+0xec>
 800777c:	2000      	movs	r0, #0
 800777e:	e7ee      	b.n	800775e <quorem+0xf6>

08007780 <_dtoa_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4616      	mov	r6, r2
 8007786:	461f      	mov	r7, r3
 8007788:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800778a:	b099      	sub	sp, #100	; 0x64
 800778c:	4605      	mov	r5, r0
 800778e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007792:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007796:	b974      	cbnz	r4, 80077b6 <_dtoa_r+0x36>
 8007798:	2010      	movs	r0, #16
 800779a:	f7ff f9d3 	bl	8006b44 <malloc>
 800779e:	4602      	mov	r2, r0
 80077a0:	6268      	str	r0, [r5, #36]	; 0x24
 80077a2:	b920      	cbnz	r0, 80077ae <_dtoa_r+0x2e>
 80077a4:	21ea      	movs	r1, #234	; 0xea
 80077a6:	4ba8      	ldr	r3, [pc, #672]	; (8007a48 <_dtoa_r+0x2c8>)
 80077a8:	48a8      	ldr	r0, [pc, #672]	; (8007a4c <_dtoa_r+0x2cc>)
 80077aa:	f001 fae7 	bl	8008d7c <__assert_func>
 80077ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077b2:	6004      	str	r4, [r0, #0]
 80077b4:	60c4      	str	r4, [r0, #12]
 80077b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	b151      	cbz	r1, 80077d2 <_dtoa_r+0x52>
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	2301      	movs	r3, #1
 80077c0:	4093      	lsls	r3, r2
 80077c2:	604a      	str	r2, [r1, #4]
 80077c4:	608b      	str	r3, [r1, #8]
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 fe26 	bl	8008418 <_Bfree>
 80077cc:	2200      	movs	r2, #0
 80077ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	1e3b      	subs	r3, r7, #0
 80077d4:	bfaf      	iteee	ge
 80077d6:	2300      	movge	r3, #0
 80077d8:	2201      	movlt	r2, #1
 80077da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077de:	9305      	strlt	r3, [sp, #20]
 80077e0:	bfa8      	it	ge
 80077e2:	f8c8 3000 	strge.w	r3, [r8]
 80077e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80077ea:	4b99      	ldr	r3, [pc, #612]	; (8007a50 <_dtoa_r+0x2d0>)
 80077ec:	bfb8      	it	lt
 80077ee:	f8c8 2000 	strlt.w	r2, [r8]
 80077f2:	ea33 0309 	bics.w	r3, r3, r9
 80077f6:	d119      	bne.n	800782c <_dtoa_r+0xac>
 80077f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80077fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007804:	4333      	orrs	r3, r6
 8007806:	f000 857f 	beq.w	8008308 <_dtoa_r+0xb88>
 800780a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800780c:	b953      	cbnz	r3, 8007824 <_dtoa_r+0xa4>
 800780e:	4b91      	ldr	r3, [pc, #580]	; (8007a54 <_dtoa_r+0x2d4>)
 8007810:	e022      	b.n	8007858 <_dtoa_r+0xd8>
 8007812:	4b91      	ldr	r3, [pc, #580]	; (8007a58 <_dtoa_r+0x2d8>)
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	3308      	adds	r3, #8
 8007818:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	9803      	ldr	r0, [sp, #12]
 800781e:	b019      	add	sp, #100	; 0x64
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	4b8b      	ldr	r3, [pc, #556]	; (8007a54 <_dtoa_r+0x2d4>)
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	3303      	adds	r3, #3
 800782a:	e7f5      	b.n	8007818 <_dtoa_r+0x98>
 800782c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007830:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007838:	2200      	movs	r2, #0
 800783a:	2300      	movs	r3, #0
 800783c:	f7f9 f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8007840:	4680      	mov	r8, r0
 8007842:	b158      	cbz	r0, 800785c <_dtoa_r+0xdc>
 8007844:	2301      	movs	r3, #1
 8007846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8558 	beq.w	8008302 <_dtoa_r+0xb82>
 8007852:	4882      	ldr	r0, [pc, #520]	; (8007a5c <_dtoa_r+0x2dc>)
 8007854:	6018      	str	r0, [r3, #0]
 8007856:	1e43      	subs	r3, r0, #1
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	e7df      	b.n	800781c <_dtoa_r+0x9c>
 800785c:	ab16      	add	r3, sp, #88	; 0x58
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	ab17      	add	r3, sp, #92	; 0x5c
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4628      	mov	r0, r5
 8007866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800786a:	f001 f8bb 	bl	80089e4 <__d2b>
 800786e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007872:	4683      	mov	fp, r0
 8007874:	2c00      	cmp	r4, #0
 8007876:	d07f      	beq.n	8007978 <_dtoa_r+0x1f8>
 8007878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800787c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800787e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007886:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800788a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800788e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007892:	2200      	movs	r2, #0
 8007894:	4b72      	ldr	r3, [pc, #456]	; (8007a60 <_dtoa_r+0x2e0>)
 8007896:	f7f8 fc67 	bl	8000168 <__aeabi_dsub>
 800789a:	a365      	add	r3, pc, #404	; (adr r3, 8007a30 <_dtoa_r+0x2b0>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fe1a 	bl	80004d8 <__aeabi_dmul>
 80078a4:	a364      	add	r3, pc, #400	; (adr r3, 8007a38 <_dtoa_r+0x2b8>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fc5f 	bl	800016c <__adddf3>
 80078ae:	4606      	mov	r6, r0
 80078b0:	4620      	mov	r0, r4
 80078b2:	460f      	mov	r7, r1
 80078b4:	f7f8 fda6 	bl	8000404 <__aeabi_i2d>
 80078b8:	a361      	add	r3, pc, #388	; (adr r3, 8007a40 <_dtoa_r+0x2c0>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fc4f 	bl	800016c <__adddf3>
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f9 f8b1 	bl	8000a38 <__aeabi_d2iz>
 80078d6:	2200      	movs	r2, #0
 80078d8:	4682      	mov	sl, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f86c 	bl	80009bc <__aeabi_dcmplt>
 80078e4:	b148      	cbz	r0, 80078fa <_dtoa_r+0x17a>
 80078e6:	4650      	mov	r0, sl
 80078e8:	f7f8 fd8c 	bl	8000404 <__aeabi_i2d>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	f7f9 f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80078f4:	b908      	cbnz	r0, 80078fa <_dtoa_r+0x17a>
 80078f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078fa:	f1ba 0f16 	cmp.w	sl, #22
 80078fe:	d858      	bhi.n	80079b2 <_dtoa_r+0x232>
 8007900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007904:	4b57      	ldr	r3, [pc, #348]	; (8007a64 <_dtoa_r+0x2e4>)
 8007906:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f9 f855 	bl	80009bc <__aeabi_dcmplt>
 8007912:	2800      	cmp	r0, #0
 8007914:	d04f      	beq.n	80079b6 <_dtoa_r+0x236>
 8007916:	2300      	movs	r3, #0
 8007918:	f10a 3aff 	add.w	sl, sl, #4294967295
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007920:	1b1c      	subs	r4, r3, r4
 8007922:	1e63      	subs	r3, r4, #1
 8007924:	9309      	str	r3, [sp, #36]	; 0x24
 8007926:	bf49      	itett	mi
 8007928:	f1c4 0301 	rsbmi	r3, r4, #1
 800792c:	2300      	movpl	r3, #0
 800792e:	9306      	strmi	r3, [sp, #24]
 8007930:	2300      	movmi	r3, #0
 8007932:	bf54      	ite	pl
 8007934:	9306      	strpl	r3, [sp, #24]
 8007936:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007938:	f1ba 0f00 	cmp.w	sl, #0
 800793c:	db3d      	blt.n	80079ba <_dtoa_r+0x23a>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007944:	4453      	add	r3, sl
 8007946:	9309      	str	r3, [sp, #36]	; 0x24
 8007948:	2300      	movs	r3, #0
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800794e:	2b09      	cmp	r3, #9
 8007950:	f200 808c 	bhi.w	8007a6c <_dtoa_r+0x2ec>
 8007954:	2b05      	cmp	r3, #5
 8007956:	bfc4      	itt	gt
 8007958:	3b04      	subgt	r3, #4
 800795a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800795c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795e:	bfc8      	it	gt
 8007960:	2400      	movgt	r4, #0
 8007962:	f1a3 0302 	sub.w	r3, r3, #2
 8007966:	bfd8      	it	le
 8007968:	2401      	movle	r4, #1
 800796a:	2b03      	cmp	r3, #3
 800796c:	f200 808a 	bhi.w	8007a84 <_dtoa_r+0x304>
 8007970:	e8df f003 	tbb	[pc, r3]
 8007974:	5b4d4f2d 	.word	0x5b4d4f2d
 8007978:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800797c:	441c      	add	r4, r3
 800797e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007982:	2b20      	cmp	r3, #32
 8007984:	bfc3      	ittte	gt
 8007986:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800798a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800798e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007992:	f1c3 0320 	rsble	r3, r3, #32
 8007996:	bfc6      	itte	gt
 8007998:	fa26 f000 	lsrgt.w	r0, r6, r0
 800799c:	4318      	orrgt	r0, r3
 800799e:	fa06 f003 	lslle.w	r0, r6, r3
 80079a2:	f7f8 fd1f 	bl	80003e4 <__aeabi_ui2d>
 80079a6:	2301      	movs	r3, #1
 80079a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80079ac:	3c01      	subs	r4, #1
 80079ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80079b0:	e76f      	b.n	8007892 <_dtoa_r+0x112>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7b2      	b.n	800791c <_dtoa_r+0x19c>
 80079b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80079b8:	e7b1      	b.n	800791e <_dtoa_r+0x19e>
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	eba3 030a 	sub.w	r3, r3, sl
 80079c0:	9306      	str	r3, [sp, #24]
 80079c2:	f1ca 0300 	rsb	r3, sl, #0
 80079c6:	930a      	str	r3, [sp, #40]	; 0x28
 80079c8:	2300      	movs	r3, #0
 80079ca:	930e      	str	r3, [sp, #56]	; 0x38
 80079cc:	e7be      	b.n	800794c <_dtoa_r+0x1cc>
 80079ce:	2300      	movs	r3, #0
 80079d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dc58      	bgt.n	8007a8a <_dtoa_r+0x30a>
 80079d8:	f04f 0901 	mov.w	r9, #1
 80079dc:	464b      	mov	r3, r9
 80079de:	f8cd 9020 	str.w	r9, [sp, #32]
 80079e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80079e6:	2200      	movs	r2, #0
 80079e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80079ea:	6042      	str	r2, [r0, #4]
 80079ec:	2204      	movs	r2, #4
 80079ee:	f102 0614 	add.w	r6, r2, #20
 80079f2:	429e      	cmp	r6, r3
 80079f4:	6841      	ldr	r1, [r0, #4]
 80079f6:	d94e      	bls.n	8007a96 <_dtoa_r+0x316>
 80079f8:	4628      	mov	r0, r5
 80079fa:	f000 fccd 	bl	8008398 <_Balloc>
 80079fe:	9003      	str	r0, [sp, #12]
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d14c      	bne.n	8007a9e <_dtoa_r+0x31e>
 8007a04:	4602      	mov	r2, r0
 8007a06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a0a:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <_dtoa_r+0x2e8>)
 8007a0c:	e6cc      	b.n	80077a8 <_dtoa_r+0x28>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e7de      	b.n	80079d0 <_dtoa_r+0x250>
 8007a12:	2300      	movs	r3, #0
 8007a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a18:	eb0a 0903 	add.w	r9, sl, r3
 8007a1c:	f109 0301 	add.w	r3, r9, #1
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	9308      	str	r3, [sp, #32]
 8007a24:	bfb8      	it	lt
 8007a26:	2301      	movlt	r3, #1
 8007a28:	e7dd      	b.n	80079e6 <_dtoa_r+0x266>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e7f2      	b.n	8007a14 <_dtoa_r+0x294>
 8007a2e:	bf00      	nop
 8007a30:	636f4361 	.word	0x636f4361
 8007a34:	3fd287a7 	.word	0x3fd287a7
 8007a38:	8b60c8b3 	.word	0x8b60c8b3
 8007a3c:	3fc68a28 	.word	0x3fc68a28
 8007a40:	509f79fb 	.word	0x509f79fb
 8007a44:	3fd34413 	.word	0x3fd34413
 8007a48:	0800a731 	.word	0x0800a731
 8007a4c:	0800a748 	.word	0x0800a748
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	0800a72d 	.word	0x0800a72d
 8007a58:	0800a724 	.word	0x0800a724
 8007a5c:	0800a701 	.word	0x0800a701
 8007a60:	3ff80000 	.word	0x3ff80000
 8007a64:	0800a838 	.word	0x0800a838
 8007a68:	0800a7a3 	.word	0x0800a7a3
 8007a6c:	2401      	movs	r4, #1
 8007a6e:	2300      	movs	r3, #0
 8007a70:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a72:	9322      	str	r3, [sp, #136]	; 0x88
 8007a74:	f04f 39ff 	mov.w	r9, #4294967295
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2312      	movs	r3, #18
 8007a7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007a80:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a82:	e7b0      	b.n	80079e6 <_dtoa_r+0x266>
 8007a84:	2301      	movs	r3, #1
 8007a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a88:	e7f4      	b.n	8007a74 <_dtoa_r+0x2f4>
 8007a8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007a8e:	464b      	mov	r3, r9
 8007a90:	f8cd 9020 	str.w	r9, [sp, #32]
 8007a94:	e7a7      	b.n	80079e6 <_dtoa_r+0x266>
 8007a96:	3101      	adds	r1, #1
 8007a98:	6041      	str	r1, [r0, #4]
 8007a9a:	0052      	lsls	r2, r2, #1
 8007a9c:	e7a7      	b.n	80079ee <_dtoa_r+0x26e>
 8007a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007aa0:	9a03      	ldr	r2, [sp, #12]
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	9b08      	ldr	r3, [sp, #32]
 8007aa6:	2b0e      	cmp	r3, #14
 8007aa8:	f200 80a8 	bhi.w	8007bfc <_dtoa_r+0x47c>
 8007aac:	2c00      	cmp	r4, #0
 8007aae:	f000 80a5 	beq.w	8007bfc <_dtoa_r+0x47c>
 8007ab2:	f1ba 0f00 	cmp.w	sl, #0
 8007ab6:	dd34      	ble.n	8007b22 <_dtoa_r+0x3a2>
 8007ab8:	4a9a      	ldr	r2, [pc, #616]	; (8007d24 <_dtoa_r+0x5a4>)
 8007aba:	f00a 030f 	and.w	r3, sl, #15
 8007abe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ac2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007aca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ace:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007ad2:	d016      	beq.n	8007b02 <_dtoa_r+0x382>
 8007ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ad8:	4b93      	ldr	r3, [pc, #588]	; (8007d28 <_dtoa_r+0x5a8>)
 8007ada:	2703      	movs	r7, #3
 8007adc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ae0:	f7f8 fe24 	bl	800072c <__aeabi_ddiv>
 8007ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae8:	f004 040f 	and.w	r4, r4, #15
 8007aec:	4e8e      	ldr	r6, [pc, #568]	; (8007d28 <_dtoa_r+0x5a8>)
 8007aee:	b954      	cbnz	r4, 8007b06 <_dtoa_r+0x386>
 8007af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007af8:	f7f8 fe18 	bl	800072c <__aeabi_ddiv>
 8007afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b00:	e029      	b.n	8007b56 <_dtoa_r+0x3d6>
 8007b02:	2702      	movs	r7, #2
 8007b04:	e7f2      	b.n	8007aec <_dtoa_r+0x36c>
 8007b06:	07e1      	lsls	r1, r4, #31
 8007b08:	d508      	bpl.n	8007b1c <_dtoa_r+0x39c>
 8007b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b1a:	3701      	adds	r7, #1
 8007b1c:	1064      	asrs	r4, r4, #1
 8007b1e:	3608      	adds	r6, #8
 8007b20:	e7e5      	b.n	8007aee <_dtoa_r+0x36e>
 8007b22:	f000 80a5 	beq.w	8007c70 <_dtoa_r+0x4f0>
 8007b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b2a:	f1ca 0400 	rsb	r4, sl, #0
 8007b2e:	4b7d      	ldr	r3, [pc, #500]	; (8007d24 <_dtoa_r+0x5a4>)
 8007b30:	f004 020f 	and.w	r2, r4, #15
 8007b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f7f8 fccc 	bl	80004d8 <__aeabi_dmul>
 8007b40:	2702      	movs	r7, #2
 8007b42:	2300      	movs	r3, #0
 8007b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b48:	4e77      	ldr	r6, [pc, #476]	; (8007d28 <_dtoa_r+0x5a8>)
 8007b4a:	1124      	asrs	r4, r4, #4
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	f040 8084 	bne.w	8007c5a <_dtoa_r+0x4da>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1d2      	bne.n	8007afc <_dtoa_r+0x37c>
 8007b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 808b 	beq.w	8007c74 <_dtoa_r+0x4f4>
 8007b5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4b6f      	ldr	r3, [pc, #444]	; (8007d2c <_dtoa_r+0x5ac>)
 8007b6e:	f7f8 ff25 	bl	80009bc <__aeabi_dcmplt>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d07e      	beq.n	8007c74 <_dtoa_r+0x4f4>
 8007b76:	9b08      	ldr	r3, [sp, #32]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d07b      	beq.n	8007c74 <_dtoa_r+0x4f4>
 8007b7c:	f1b9 0f00 	cmp.w	r9, #0
 8007b80:	dd38      	ble.n	8007bf4 <_dtoa_r+0x474>
 8007b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b86:	2200      	movs	r2, #0
 8007b88:	4b69      	ldr	r3, [pc, #420]	; (8007d30 <_dtoa_r+0x5b0>)
 8007b8a:	f7f8 fca5 	bl	80004d8 <__aeabi_dmul>
 8007b8e:	464c      	mov	r4, r9
 8007b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b94:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007b98:	3701      	adds	r7, #1
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7f8 fc32 	bl	8000404 <__aeabi_i2d>
 8007ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba4:	f7f8 fc98 	bl	80004d8 <__aeabi_dmul>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4b62      	ldr	r3, [pc, #392]	; (8007d34 <_dtoa_r+0x5b4>)
 8007bac:	f7f8 fade 	bl	800016c <__adddf3>
 8007bb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bb8:	9611      	str	r6, [sp, #68]	; 0x44
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	d15d      	bne.n	8007c7a <_dtoa_r+0x4fa>
 8007bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4b5c      	ldr	r3, [pc, #368]	; (8007d38 <_dtoa_r+0x5b8>)
 8007bc6:	f7f8 facf 	bl	8000168 <__aeabi_dsub>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bd2:	4633      	mov	r3, r6
 8007bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bd6:	f7f8 ff0f 	bl	80009f8 <__aeabi_dcmpgt>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f040 829c 	bne.w	8008118 <_dtoa_r+0x998>
 8007be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007be6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bea:	f7f8 fee7 	bl	80009bc <__aeabi_dcmplt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 8290 	bne.w	8008114 <_dtoa_r+0x994>
 8007bf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007bf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f2c0 8152 	blt.w	8007ea8 <_dtoa_r+0x728>
 8007c04:	f1ba 0f0e 	cmp.w	sl, #14
 8007c08:	f300 814e 	bgt.w	8007ea8 <_dtoa_r+0x728>
 8007c0c:	4b45      	ldr	r3, [pc, #276]	; (8007d24 <_dtoa_r+0x5a4>)
 8007c0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f280 80db 	bge.w	8007dd8 <_dtoa_r+0x658>
 8007c22:	9b08      	ldr	r3, [sp, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f300 80d7 	bgt.w	8007dd8 <_dtoa_r+0x658>
 8007c2a:	f040 8272 	bne.w	8008112 <_dtoa_r+0x992>
 8007c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c32:	2200      	movs	r2, #0
 8007c34:	4b40      	ldr	r3, [pc, #256]	; (8007d38 <_dtoa_r+0x5b8>)
 8007c36:	f7f8 fc4f 	bl	80004d8 <__aeabi_dmul>
 8007c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3e:	f7f8 fed1 	bl	80009e4 <__aeabi_dcmpge>
 8007c42:	9c08      	ldr	r4, [sp, #32]
 8007c44:	4626      	mov	r6, r4
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f040 8248 	bne.w	80080dc <_dtoa_r+0x95c>
 8007c4c:	2331      	movs	r3, #49	; 0x31
 8007c4e:	9f03      	ldr	r7, [sp, #12]
 8007c50:	f10a 0a01 	add.w	sl, sl, #1
 8007c54:	f807 3b01 	strb.w	r3, [r7], #1
 8007c58:	e244      	b.n	80080e4 <_dtoa_r+0x964>
 8007c5a:	07e2      	lsls	r2, r4, #31
 8007c5c:	d505      	bpl.n	8007c6a <_dtoa_r+0x4ea>
 8007c5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c62:	f7f8 fc39 	bl	80004d8 <__aeabi_dmul>
 8007c66:	2301      	movs	r3, #1
 8007c68:	3701      	adds	r7, #1
 8007c6a:	1064      	asrs	r4, r4, #1
 8007c6c:	3608      	adds	r6, #8
 8007c6e:	e76d      	b.n	8007b4c <_dtoa_r+0x3cc>
 8007c70:	2702      	movs	r7, #2
 8007c72:	e770      	b.n	8007b56 <_dtoa_r+0x3d6>
 8007c74:	46d0      	mov	r8, sl
 8007c76:	9c08      	ldr	r4, [sp, #32]
 8007c78:	e78f      	b.n	8007b9a <_dtoa_r+0x41a>
 8007c7a:	9903      	ldr	r1, [sp, #12]
 8007c7c:	4b29      	ldr	r3, [pc, #164]	; (8007d24 <_dtoa_r+0x5a4>)
 8007c7e:	4421      	add	r1, r4
 8007c80:	9112      	str	r1, [sp, #72]	; 0x48
 8007c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d055      	beq.n	8007d40 <_dtoa_r+0x5c0>
 8007c94:	2000      	movs	r0, #0
 8007c96:	4929      	ldr	r1, [pc, #164]	; (8007d3c <_dtoa_r+0x5bc>)
 8007c98:	f7f8 fd48 	bl	800072c <__aeabi_ddiv>
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	f7f8 fa62 	bl	8000168 <__aeabi_dsub>
 8007ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ca8:	9f03      	ldr	r7, [sp, #12]
 8007caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cae:	f7f8 fec3 	bl	8000a38 <__aeabi_d2iz>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	f7f8 fba6 	bl	8000404 <__aeabi_i2d>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc0:	f7f8 fa52 	bl	8000168 <__aeabi_dsub>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	3430      	adds	r4, #48	; 0x30
 8007cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cd2:	f807 4b01 	strb.w	r4, [r7], #1
 8007cd6:	f7f8 fe71 	bl	80009bc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d174      	bne.n	8007dc8 <_dtoa_r+0x648>
 8007cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	4911      	ldr	r1, [pc, #68]	; (8007d2c <_dtoa_r+0x5ac>)
 8007ce6:	f7f8 fa3f 	bl	8000168 <__aeabi_dsub>
 8007cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cee:	f7f8 fe65 	bl	80009bc <__aeabi_dcmplt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f040 80b7 	bne.w	8007e66 <_dtoa_r+0x6e6>
 8007cf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cfa:	429f      	cmp	r7, r3
 8007cfc:	f43f af7a 	beq.w	8007bf4 <_dtoa_r+0x474>
 8007d00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d04:	2200      	movs	r2, #0
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <_dtoa_r+0x5b0>)
 8007d08:	f7f8 fbe6 	bl	80004d8 <__aeabi_dmul>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <_dtoa_r+0x5b0>)
 8007d18:	f7f8 fbde 	bl	80004d8 <__aeabi_dmul>
 8007d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d20:	e7c3      	b.n	8007caa <_dtoa_r+0x52a>
 8007d22:	bf00      	nop
 8007d24:	0800a838 	.word	0x0800a838
 8007d28:	0800a810 	.word	0x0800a810
 8007d2c:	3ff00000 	.word	0x3ff00000
 8007d30:	40240000 	.word	0x40240000
 8007d34:	401c0000 	.word	0x401c0000
 8007d38:	40140000 	.word	0x40140000
 8007d3c:	3fe00000 	.word	0x3fe00000
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fbc8 	bl	80004d8 <__aeabi_dmul>
 8007d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d4e:	9c03      	ldr	r4, [sp, #12]
 8007d50:	9314      	str	r3, [sp, #80]	; 0x50
 8007d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d56:	f7f8 fe6f 	bl	8000a38 <__aeabi_d2iz>
 8007d5a:	9015      	str	r0, [sp, #84]	; 0x54
 8007d5c:	f7f8 fb52 	bl	8000404 <__aeabi_i2d>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d68:	f7f8 f9fe 	bl	8000168 <__aeabi_dsub>
 8007d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d6e:	4606      	mov	r6, r0
 8007d70:	3330      	adds	r3, #48	; 0x30
 8007d72:	f804 3b01 	strb.w	r3, [r4], #1
 8007d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d78:	460f      	mov	r7, r1
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	d124      	bne.n	8007dcc <_dtoa_r+0x64c>
 8007d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d86:	4bb0      	ldr	r3, [pc, #704]	; (8008048 <_dtoa_r+0x8c8>)
 8007d88:	f7f8 f9f0 	bl	800016c <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d163      	bne.n	8007e64 <_dtoa_r+0x6e4>
 8007d9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007da0:	2000      	movs	r0, #0
 8007da2:	49a9      	ldr	r1, [pc, #676]	; (8008048 <_dtoa_r+0x8c8>)
 8007da4:	f7f8 f9e0 	bl	8000168 <__aeabi_dsub>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fe04 	bl	80009bc <__aeabi_dcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f43f af1d 	beq.w	8007bf4 <_dtoa_r+0x474>
 8007dba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007dbc:	1e7b      	subs	r3, r7, #1
 8007dbe:	9314      	str	r3, [sp, #80]	; 0x50
 8007dc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007dc4:	2b30      	cmp	r3, #48	; 0x30
 8007dc6:	d0f8      	beq.n	8007dba <_dtoa_r+0x63a>
 8007dc8:	46c2      	mov	sl, r8
 8007dca:	e03b      	b.n	8007e44 <_dtoa_r+0x6c4>
 8007dcc:	4b9f      	ldr	r3, [pc, #636]	; (800804c <_dtoa_r+0x8cc>)
 8007dce:	f7f8 fb83 	bl	80004d8 <__aeabi_dmul>
 8007dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dd6:	e7bc      	b.n	8007d52 <_dtoa_r+0x5d2>
 8007dd8:	9f03      	ldr	r7, [sp, #12]
 8007dda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fca1 	bl	800072c <__aeabi_ddiv>
 8007dea:	f7f8 fe25 	bl	8000a38 <__aeabi_d2iz>
 8007dee:	4604      	mov	r4, r0
 8007df0:	f7f8 fb08 	bl	8000404 <__aeabi_i2d>
 8007df4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007df8:	f7f8 fb6e 	bl	80004d8 <__aeabi_dmul>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4640      	mov	r0, r8
 8007e02:	4649      	mov	r1, r9
 8007e04:	f7f8 f9b0 	bl	8000168 <__aeabi_dsub>
 8007e08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007e0c:	f807 6b01 	strb.w	r6, [r7], #1
 8007e10:	9e03      	ldr	r6, [sp, #12]
 8007e12:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007e16:	1bbe      	subs	r6, r7, r6
 8007e18:	45b4      	cmp	ip, r6
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	d136      	bne.n	8007e8e <_dtoa_r+0x70e>
 8007e20:	f7f8 f9a4 	bl	800016c <__adddf3>
 8007e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4689      	mov	r9, r1
 8007e2c:	f7f8 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 8007e30:	bb58      	cbnz	r0, 8007e8a <_dtoa_r+0x70a>
 8007e32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e36:	4640      	mov	r0, r8
 8007e38:	4649      	mov	r1, r9
 8007e3a:	f7f8 fdb5 	bl	80009a8 <__aeabi_dcmpeq>
 8007e3e:	b108      	cbz	r0, 8007e44 <_dtoa_r+0x6c4>
 8007e40:	07e1      	lsls	r1, r4, #31
 8007e42:	d422      	bmi.n	8007e8a <_dtoa_r+0x70a>
 8007e44:	4628      	mov	r0, r5
 8007e46:	4659      	mov	r1, fp
 8007e48:	f000 fae6 	bl	8008418 <_Bfree>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	703b      	strb	r3, [r7, #0]
 8007e50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e52:	f10a 0001 	add.w	r0, sl, #1
 8007e56:	6018      	str	r0, [r3, #0]
 8007e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f43f acde 	beq.w	800781c <_dtoa_r+0x9c>
 8007e60:	601f      	str	r7, [r3, #0]
 8007e62:	e4db      	b.n	800781c <_dtoa_r+0x9c>
 8007e64:	4627      	mov	r7, r4
 8007e66:	463b      	mov	r3, r7
 8007e68:	461f      	mov	r7, r3
 8007e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e6e:	2a39      	cmp	r2, #57	; 0x39
 8007e70:	d107      	bne.n	8007e82 <_dtoa_r+0x702>
 8007e72:	9a03      	ldr	r2, [sp, #12]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d1f7      	bne.n	8007e68 <_dtoa_r+0x6e8>
 8007e78:	2230      	movs	r2, #48	; 0x30
 8007e7a:	9903      	ldr	r1, [sp, #12]
 8007e7c:	f108 0801 	add.w	r8, r8, #1
 8007e80:	700a      	strb	r2, [r1, #0]
 8007e82:	781a      	ldrb	r2, [r3, #0]
 8007e84:	3201      	adds	r2, #1
 8007e86:	701a      	strb	r2, [r3, #0]
 8007e88:	e79e      	b.n	8007dc8 <_dtoa_r+0x648>
 8007e8a:	46d0      	mov	r8, sl
 8007e8c:	e7eb      	b.n	8007e66 <_dtoa_r+0x6e6>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4b6e      	ldr	r3, [pc, #440]	; (800804c <_dtoa_r+0x8cc>)
 8007e92:	f7f8 fb21 	bl	80004d8 <__aeabi_dmul>
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	f7f8 fd83 	bl	80009a8 <__aeabi_dcmpeq>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d09b      	beq.n	8007dde <_dtoa_r+0x65e>
 8007ea6:	e7cd      	b.n	8007e44 <_dtoa_r+0x6c4>
 8007ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	f000 80d0 	beq.w	8008050 <_dtoa_r+0x8d0>
 8007eb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007eb2:	2a01      	cmp	r2, #1
 8007eb4:	f300 80ae 	bgt.w	8008014 <_dtoa_r+0x894>
 8007eb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eba:	2a00      	cmp	r2, #0
 8007ebc:	f000 80a6 	beq.w	800800c <_dtoa_r+0x88c>
 8007ec0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ec4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ec6:	9f06      	ldr	r7, [sp, #24]
 8007ec8:	9a06      	ldr	r2, [sp, #24]
 8007eca:	2101      	movs	r1, #1
 8007ecc:	441a      	add	r2, r3
 8007ece:	9206      	str	r2, [sp, #24]
 8007ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	441a      	add	r2, r3
 8007ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ed8:	f000 fb54 	bl	8008584 <__i2b>
 8007edc:	4606      	mov	r6, r0
 8007ede:	2f00      	cmp	r7, #0
 8007ee0:	dd0c      	ble.n	8007efc <_dtoa_r+0x77c>
 8007ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dd09      	ble.n	8007efc <_dtoa_r+0x77c>
 8007ee8:	42bb      	cmp	r3, r7
 8007eea:	bfa8      	it	ge
 8007eec:	463b      	movge	r3, r7
 8007eee:	9a06      	ldr	r2, [sp, #24]
 8007ef0:	1aff      	subs	r7, r7, r3
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	9206      	str	r2, [sp, #24]
 8007ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	9309      	str	r3, [sp, #36]	; 0x24
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	b1f3      	cbz	r3, 8007f3e <_dtoa_r+0x7be>
 8007f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80a8 	beq.w	8008058 <_dtoa_r+0x8d8>
 8007f08:	2c00      	cmp	r4, #0
 8007f0a:	dd10      	ble.n	8007f2e <_dtoa_r+0x7ae>
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4622      	mov	r2, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 fbf5 	bl	8008700 <__pow5mult>
 8007f16:	465a      	mov	r2, fp
 8007f18:	4601      	mov	r1, r0
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 fb47 	bl	80085b0 <__multiply>
 8007f22:	4680      	mov	r8, r0
 8007f24:	4659      	mov	r1, fp
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fa76 	bl	8008418 <_Bfree>
 8007f2c:	46c3      	mov	fp, r8
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f30:	1b1a      	subs	r2, r3, r4
 8007f32:	d004      	beq.n	8007f3e <_dtoa_r+0x7be>
 8007f34:	4659      	mov	r1, fp
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 fbe2 	bl	8008700 <__pow5mult>
 8007f3c:	4683      	mov	fp, r0
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4628      	mov	r0, r5
 8007f42:	f000 fb1f 	bl	8008584 <__i2b>
 8007f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f48:	4604      	mov	r4, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f340 8086 	ble.w	800805c <_dtoa_r+0x8dc>
 8007f50:	461a      	mov	r2, r3
 8007f52:	4601      	mov	r1, r0
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 fbd3 	bl	8008700 <__pow5mult>
 8007f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	dd7f      	ble.n	8008062 <_dtoa_r+0x8e2>
 8007f62:	f04f 0800 	mov.w	r8, #0
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f6c:	6918      	ldr	r0, [r3, #16]
 8007f6e:	f000 fabb 	bl	80084e8 <__hi0bits>
 8007f72:	f1c0 0020 	rsb	r0, r0, #32
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	4418      	add	r0, r3
 8007f7a:	f010 001f 	ands.w	r0, r0, #31
 8007f7e:	f000 8092 	beq.w	80080a6 <_dtoa_r+0x926>
 8007f82:	f1c0 0320 	rsb	r3, r0, #32
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	f340 808a 	ble.w	80080a0 <_dtoa_r+0x920>
 8007f8c:	f1c0 001c 	rsb	r0, r0, #28
 8007f90:	9b06      	ldr	r3, [sp, #24]
 8007f92:	4407      	add	r7, r0
 8007f94:	4403      	add	r3, r0
 8007f96:	9306      	str	r3, [sp, #24]
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	4403      	add	r3, r0
 8007f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9e:	9b06      	ldr	r3, [sp, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	dd05      	ble.n	8007fb0 <_dtoa_r+0x830>
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f000 fc03 	bl	80087b4 <__lshift>
 8007fae:	4683      	mov	fp, r0
 8007fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dd05      	ble.n	8007fc2 <_dtoa_r+0x842>
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 fbfa 	bl	80087b4 <__lshift>
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d070      	beq.n	80080aa <_dtoa_r+0x92a>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4658      	mov	r0, fp
 8007fcc:	f000 fc62 	bl	8008894 <__mcmp>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	da6a      	bge.n	80080aa <_dtoa_r+0x92a>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4659      	mov	r1, fp
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 fa3e 	bl	800845c <__multadd>
 8007fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe2:	4683      	mov	fp, r0
 8007fe4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8194 	beq.w	8008316 <_dtoa_r+0xb96>
 8007fee:	4631      	mov	r1, r6
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	220a      	movs	r2, #10
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f000 fa31 	bl	800845c <__multadd>
 8007ffa:	f1b9 0f00 	cmp.w	r9, #0
 8007ffe:	4606      	mov	r6, r0
 8008000:	f300 8093 	bgt.w	800812a <_dtoa_r+0x9aa>
 8008004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008006:	2b02      	cmp	r3, #2
 8008008:	dc57      	bgt.n	80080ba <_dtoa_r+0x93a>
 800800a:	e08e      	b.n	800812a <_dtoa_r+0x9aa>
 800800c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800800e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008012:	e757      	b.n	8007ec4 <_dtoa_r+0x744>
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	1e5c      	subs	r4, r3, #1
 8008018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801a:	42a3      	cmp	r3, r4
 800801c:	bfb7      	itett	lt
 800801e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008020:	1b1c      	subge	r4, r3, r4
 8008022:	1ae2      	sublt	r2, r4, r3
 8008024:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008026:	bfbe      	ittt	lt
 8008028:	940a      	strlt	r4, [sp, #40]	; 0x28
 800802a:	189b      	addlt	r3, r3, r2
 800802c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800802e:	9b08      	ldr	r3, [sp, #32]
 8008030:	bfb8      	it	lt
 8008032:	2400      	movlt	r4, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbb      	ittet	lt
 8008038:	9b06      	ldrlt	r3, [sp, #24]
 800803a:	9a08      	ldrlt	r2, [sp, #32]
 800803c:	9f06      	ldrge	r7, [sp, #24]
 800803e:	1a9f      	sublt	r7, r3, r2
 8008040:	bfac      	ite	ge
 8008042:	9b08      	ldrge	r3, [sp, #32]
 8008044:	2300      	movlt	r3, #0
 8008046:	e73f      	b.n	8007ec8 <_dtoa_r+0x748>
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	40240000 	.word	0x40240000
 8008050:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008052:	9f06      	ldr	r7, [sp, #24]
 8008054:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008056:	e742      	b.n	8007ede <_dtoa_r+0x75e>
 8008058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805a:	e76b      	b.n	8007f34 <_dtoa_r+0x7b4>
 800805c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800805e:	2b01      	cmp	r3, #1
 8008060:	dc19      	bgt.n	8008096 <_dtoa_r+0x916>
 8008062:	9b04      	ldr	r3, [sp, #16]
 8008064:	b9bb      	cbnz	r3, 8008096 <_dtoa_r+0x916>
 8008066:	9b05      	ldr	r3, [sp, #20]
 8008068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800806c:	b99b      	cbnz	r3, 8008096 <_dtoa_r+0x916>
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008074:	0d1b      	lsrs	r3, r3, #20
 8008076:	051b      	lsls	r3, r3, #20
 8008078:	b183      	cbz	r3, 800809c <_dtoa_r+0x91c>
 800807a:	f04f 0801 	mov.w	r8, #1
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	3301      	adds	r3, #1
 8008082:	9306      	str	r3, [sp, #24]
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	3301      	adds	r3, #1
 8008088:	9309      	str	r3, [sp, #36]	; 0x24
 800808a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f af6a 	bne.w	8007f66 <_dtoa_r+0x7e6>
 8008092:	2001      	movs	r0, #1
 8008094:	e76f      	b.n	8007f76 <_dtoa_r+0x7f6>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	e7f6      	b.n	800808a <_dtoa_r+0x90a>
 800809c:	4698      	mov	r8, r3
 800809e:	e7f4      	b.n	800808a <_dtoa_r+0x90a>
 80080a0:	f43f af7d 	beq.w	8007f9e <_dtoa_r+0x81e>
 80080a4:	4618      	mov	r0, r3
 80080a6:	301c      	adds	r0, #28
 80080a8:	e772      	b.n	8007f90 <_dtoa_r+0x810>
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dc36      	bgt.n	800811e <_dtoa_r+0x99e>
 80080b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	dd33      	ble.n	800811e <_dtoa_r+0x99e>
 80080b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080ba:	f1b9 0f00 	cmp.w	r9, #0
 80080be:	d10d      	bne.n	80080dc <_dtoa_r+0x95c>
 80080c0:	4621      	mov	r1, r4
 80080c2:	464b      	mov	r3, r9
 80080c4:	2205      	movs	r2, #5
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f9c8 	bl	800845c <__multadd>
 80080cc:	4601      	mov	r1, r0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4658      	mov	r0, fp
 80080d2:	f000 fbdf 	bl	8008894 <__mcmp>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f73f adb8 	bgt.w	8007c4c <_dtoa_r+0x4cc>
 80080dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080de:	9f03      	ldr	r7, [sp, #12]
 80080e0:	ea6f 0a03 	mvn.w	sl, r3
 80080e4:	f04f 0800 	mov.w	r8, #0
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f994 	bl	8008418 <_Bfree>
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	f43f aea7 	beq.w	8007e44 <_dtoa_r+0x6c4>
 80080f6:	f1b8 0f00 	cmp.w	r8, #0
 80080fa:	d005      	beq.n	8008108 <_dtoa_r+0x988>
 80080fc:	45b0      	cmp	r8, r6
 80080fe:	d003      	beq.n	8008108 <_dtoa_r+0x988>
 8008100:	4641      	mov	r1, r8
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f988 	bl	8008418 <_Bfree>
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	f000 f984 	bl	8008418 <_Bfree>
 8008110:	e698      	b.n	8007e44 <_dtoa_r+0x6c4>
 8008112:	2400      	movs	r4, #0
 8008114:	4626      	mov	r6, r4
 8008116:	e7e1      	b.n	80080dc <_dtoa_r+0x95c>
 8008118:	46c2      	mov	sl, r8
 800811a:	4626      	mov	r6, r4
 800811c:	e596      	b.n	8007c4c <_dtoa_r+0x4cc>
 800811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80fd 	beq.w	8008324 <_dtoa_r+0xba4>
 800812a:	2f00      	cmp	r7, #0
 800812c:	dd05      	ble.n	800813a <_dtoa_r+0x9ba>
 800812e:	4631      	mov	r1, r6
 8008130:	463a      	mov	r2, r7
 8008132:	4628      	mov	r0, r5
 8008134:	f000 fb3e 	bl	80087b4 <__lshift>
 8008138:	4606      	mov	r6, r0
 800813a:	f1b8 0f00 	cmp.w	r8, #0
 800813e:	d05c      	beq.n	80081fa <_dtoa_r+0xa7a>
 8008140:	4628      	mov	r0, r5
 8008142:	6871      	ldr	r1, [r6, #4]
 8008144:	f000 f928 	bl	8008398 <_Balloc>
 8008148:	4607      	mov	r7, r0
 800814a:	b928      	cbnz	r0, 8008158 <_dtoa_r+0x9d8>
 800814c:	4602      	mov	r2, r0
 800814e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008152:	4b7f      	ldr	r3, [pc, #508]	; (8008350 <_dtoa_r+0xbd0>)
 8008154:	f7ff bb28 	b.w	80077a8 <_dtoa_r+0x28>
 8008158:	6932      	ldr	r2, [r6, #16]
 800815a:	f106 010c 	add.w	r1, r6, #12
 800815e:	3202      	adds	r2, #2
 8008160:	0092      	lsls	r2, r2, #2
 8008162:	300c      	adds	r0, #12
 8008164:	f7fe fcfe 	bl	8006b64 <memcpy>
 8008168:	2201      	movs	r2, #1
 800816a:	4639      	mov	r1, r7
 800816c:	4628      	mov	r0, r5
 800816e:	f000 fb21 	bl	80087b4 <__lshift>
 8008172:	46b0      	mov	r8, r6
 8008174:	4606      	mov	r6, r0
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	9308      	str	r3, [sp, #32]
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	444b      	add	r3, r9
 8008180:	930a      	str	r3, [sp, #40]	; 0x28
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	9309      	str	r3, [sp, #36]	; 0x24
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	4621      	mov	r1, r4
 800818e:	3b01      	subs	r3, #1
 8008190:	4658      	mov	r0, fp
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	f7ff fa68 	bl	8007668 <quorem>
 8008198:	4603      	mov	r3, r0
 800819a:	4641      	mov	r1, r8
 800819c:	3330      	adds	r3, #48	; 0x30
 800819e:	9006      	str	r0, [sp, #24]
 80081a0:	4658      	mov	r0, fp
 80081a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a4:	f000 fb76 	bl	8008894 <__mcmp>
 80081a8:	4632      	mov	r2, r6
 80081aa:	4681      	mov	r9, r0
 80081ac:	4621      	mov	r1, r4
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 fb8c 	bl	80088cc <__mdiff>
 80081b4:	68c2      	ldr	r2, [r0, #12]
 80081b6:	4607      	mov	r7, r0
 80081b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ba:	bb02      	cbnz	r2, 80081fe <_dtoa_r+0xa7e>
 80081bc:	4601      	mov	r1, r0
 80081be:	4658      	mov	r0, fp
 80081c0:	f000 fb68 	bl	8008894 <__mcmp>
 80081c4:	4602      	mov	r2, r0
 80081c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c8:	4639      	mov	r1, r7
 80081ca:	4628      	mov	r0, r5
 80081cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80081d0:	f000 f922 	bl	8008418 <_Bfree>
 80081d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d8:	9f08      	ldr	r7, [sp, #32]
 80081da:	ea43 0102 	orr.w	r1, r3, r2
 80081de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e0:	430b      	orrs	r3, r1
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	d10d      	bne.n	8008202 <_dtoa_r+0xa82>
 80081e6:	2b39      	cmp	r3, #57	; 0x39
 80081e8:	d029      	beq.n	800823e <_dtoa_r+0xabe>
 80081ea:	f1b9 0f00 	cmp.w	r9, #0
 80081ee:	dd01      	ble.n	80081f4 <_dtoa_r+0xa74>
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	3331      	adds	r3, #49	; 0x31
 80081f4:	9a04      	ldr	r2, [sp, #16]
 80081f6:	7013      	strb	r3, [r2, #0]
 80081f8:	e776      	b.n	80080e8 <_dtoa_r+0x968>
 80081fa:	4630      	mov	r0, r6
 80081fc:	e7b9      	b.n	8008172 <_dtoa_r+0x9f2>
 80081fe:	2201      	movs	r2, #1
 8008200:	e7e2      	b.n	80081c8 <_dtoa_r+0xa48>
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	db06      	blt.n	8008216 <_dtoa_r+0xa96>
 8008208:	9922      	ldr	r1, [sp, #136]	; 0x88
 800820a:	ea41 0909 	orr.w	r9, r1, r9
 800820e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008210:	ea59 0101 	orrs.w	r1, r9, r1
 8008214:	d120      	bne.n	8008258 <_dtoa_r+0xad8>
 8008216:	2a00      	cmp	r2, #0
 8008218:	ddec      	ble.n	80081f4 <_dtoa_r+0xa74>
 800821a:	4659      	mov	r1, fp
 800821c:	2201      	movs	r2, #1
 800821e:	4628      	mov	r0, r5
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	f000 fac7 	bl	80087b4 <__lshift>
 8008226:	4621      	mov	r1, r4
 8008228:	4683      	mov	fp, r0
 800822a:	f000 fb33 	bl	8008894 <__mcmp>
 800822e:	2800      	cmp	r0, #0
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	dc02      	bgt.n	800823a <_dtoa_r+0xaba>
 8008234:	d1de      	bne.n	80081f4 <_dtoa_r+0xa74>
 8008236:	07da      	lsls	r2, r3, #31
 8008238:	d5dc      	bpl.n	80081f4 <_dtoa_r+0xa74>
 800823a:	2b39      	cmp	r3, #57	; 0x39
 800823c:	d1d8      	bne.n	80081f0 <_dtoa_r+0xa70>
 800823e:	2339      	movs	r3, #57	; 0x39
 8008240:	9a04      	ldr	r2, [sp, #16]
 8008242:	7013      	strb	r3, [r2, #0]
 8008244:	463b      	mov	r3, r7
 8008246:	461f      	mov	r7, r3
 8008248:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800824c:	3b01      	subs	r3, #1
 800824e:	2a39      	cmp	r2, #57	; 0x39
 8008250:	d050      	beq.n	80082f4 <_dtoa_r+0xb74>
 8008252:	3201      	adds	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e747      	b.n	80080e8 <_dtoa_r+0x968>
 8008258:	2a00      	cmp	r2, #0
 800825a:	dd03      	ble.n	8008264 <_dtoa_r+0xae4>
 800825c:	2b39      	cmp	r3, #57	; 0x39
 800825e:	d0ee      	beq.n	800823e <_dtoa_r+0xabe>
 8008260:	3301      	adds	r3, #1
 8008262:	e7c7      	b.n	80081f4 <_dtoa_r+0xa74>
 8008264:	9a08      	ldr	r2, [sp, #32]
 8008266:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008268:	f802 3c01 	strb.w	r3, [r2, #-1]
 800826c:	428a      	cmp	r2, r1
 800826e:	d02a      	beq.n	80082c6 <_dtoa_r+0xb46>
 8008270:	4659      	mov	r1, fp
 8008272:	2300      	movs	r3, #0
 8008274:	220a      	movs	r2, #10
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f8f0 	bl	800845c <__multadd>
 800827c:	45b0      	cmp	r8, r6
 800827e:	4683      	mov	fp, r0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	f04f 020a 	mov.w	r2, #10
 8008288:	4641      	mov	r1, r8
 800828a:	4628      	mov	r0, r5
 800828c:	d107      	bne.n	800829e <_dtoa_r+0xb1e>
 800828e:	f000 f8e5 	bl	800845c <__multadd>
 8008292:	4680      	mov	r8, r0
 8008294:	4606      	mov	r6, r0
 8008296:	9b08      	ldr	r3, [sp, #32]
 8008298:	3301      	adds	r3, #1
 800829a:	9308      	str	r3, [sp, #32]
 800829c:	e775      	b.n	800818a <_dtoa_r+0xa0a>
 800829e:	f000 f8dd 	bl	800845c <__multadd>
 80082a2:	4631      	mov	r1, r6
 80082a4:	4680      	mov	r8, r0
 80082a6:	2300      	movs	r3, #0
 80082a8:	220a      	movs	r2, #10
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f8d6 	bl	800845c <__multadd>
 80082b0:	4606      	mov	r6, r0
 80082b2:	e7f0      	b.n	8008296 <_dtoa_r+0xb16>
 80082b4:	f1b9 0f00 	cmp.w	r9, #0
 80082b8:	bfcc      	ite	gt
 80082ba:	464f      	movgt	r7, r9
 80082bc:	2701      	movle	r7, #1
 80082be:	f04f 0800 	mov.w	r8, #0
 80082c2:	9a03      	ldr	r2, [sp, #12]
 80082c4:	4417      	add	r7, r2
 80082c6:	4659      	mov	r1, fp
 80082c8:	2201      	movs	r2, #1
 80082ca:	4628      	mov	r0, r5
 80082cc:	9308      	str	r3, [sp, #32]
 80082ce:	f000 fa71 	bl	80087b4 <__lshift>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4683      	mov	fp, r0
 80082d6:	f000 fadd 	bl	8008894 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	dcb2      	bgt.n	8008244 <_dtoa_r+0xac4>
 80082de:	d102      	bne.n	80082e6 <_dtoa_r+0xb66>
 80082e0:	9b08      	ldr	r3, [sp, #32]
 80082e2:	07db      	lsls	r3, r3, #31
 80082e4:	d4ae      	bmi.n	8008244 <_dtoa_r+0xac4>
 80082e6:	463b      	mov	r3, r7
 80082e8:	461f      	mov	r7, r3
 80082ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ee:	2a30      	cmp	r2, #48	; 0x30
 80082f0:	d0fa      	beq.n	80082e8 <_dtoa_r+0xb68>
 80082f2:	e6f9      	b.n	80080e8 <_dtoa_r+0x968>
 80082f4:	9a03      	ldr	r2, [sp, #12]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d1a5      	bne.n	8008246 <_dtoa_r+0xac6>
 80082fa:	2331      	movs	r3, #49	; 0x31
 80082fc:	f10a 0a01 	add.w	sl, sl, #1
 8008300:	e779      	b.n	80081f6 <_dtoa_r+0xa76>
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <_dtoa_r+0xbd4>)
 8008304:	f7ff baa8 	b.w	8007858 <_dtoa_r+0xd8>
 8008308:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800830a:	2b00      	cmp	r3, #0
 800830c:	f47f aa81 	bne.w	8007812 <_dtoa_r+0x92>
 8008310:	4b11      	ldr	r3, [pc, #68]	; (8008358 <_dtoa_r+0xbd8>)
 8008312:	f7ff baa1 	b.w	8007858 <_dtoa_r+0xd8>
 8008316:	f1b9 0f00 	cmp.w	r9, #0
 800831a:	dc03      	bgt.n	8008324 <_dtoa_r+0xba4>
 800831c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800831e:	2b02      	cmp	r3, #2
 8008320:	f73f aecb 	bgt.w	80080ba <_dtoa_r+0x93a>
 8008324:	9f03      	ldr	r7, [sp, #12]
 8008326:	4621      	mov	r1, r4
 8008328:	4658      	mov	r0, fp
 800832a:	f7ff f99d 	bl	8007668 <quorem>
 800832e:	9a03      	ldr	r2, [sp, #12]
 8008330:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008334:	f807 3b01 	strb.w	r3, [r7], #1
 8008338:	1aba      	subs	r2, r7, r2
 800833a:	4591      	cmp	r9, r2
 800833c:	ddba      	ble.n	80082b4 <_dtoa_r+0xb34>
 800833e:	4659      	mov	r1, fp
 8008340:	2300      	movs	r3, #0
 8008342:	220a      	movs	r2, #10
 8008344:	4628      	mov	r0, r5
 8008346:	f000 f889 	bl	800845c <__multadd>
 800834a:	4683      	mov	fp, r0
 800834c:	e7eb      	b.n	8008326 <_dtoa_r+0xba6>
 800834e:	bf00      	nop
 8008350:	0800a7a3 	.word	0x0800a7a3
 8008354:	0800a700 	.word	0x0800a700
 8008358:	0800a724 	.word	0x0800a724

0800835c <_localeconv_r>:
 800835c:	4800      	ldr	r0, [pc, #0]	; (8008360 <_localeconv_r+0x4>)
 800835e:	4770      	bx	lr
 8008360:	20000168 	.word	0x20000168

08008364 <memchr>:
 8008364:	4603      	mov	r3, r0
 8008366:	b510      	push	{r4, lr}
 8008368:	b2c9      	uxtb	r1, r1
 800836a:	4402      	add	r2, r0
 800836c:	4293      	cmp	r3, r2
 800836e:	4618      	mov	r0, r3
 8008370:	d101      	bne.n	8008376 <memchr+0x12>
 8008372:	2000      	movs	r0, #0
 8008374:	e003      	b.n	800837e <memchr+0x1a>
 8008376:	7804      	ldrb	r4, [r0, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	428c      	cmp	r4, r1
 800837c:	d1f6      	bne.n	800836c <memchr+0x8>
 800837e:	bd10      	pop	{r4, pc}

08008380 <__malloc_lock>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__malloc_lock+0x8>)
 8008382:	f000 bd2c 	b.w	8008dde <__retarget_lock_acquire_recursive>
 8008386:	bf00      	nop
 8008388:	20000a8c 	.word	0x20000a8c

0800838c <__malloc_unlock>:
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <__malloc_unlock+0x8>)
 800838e:	f000 bd27 	b.w	8008de0 <__retarget_lock_release_recursive>
 8008392:	bf00      	nop
 8008394:	20000a8c 	.word	0x20000a8c

08008398 <_Balloc>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	b976      	cbnz	r6, 80083c0 <_Balloc+0x28>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f7fe fbce 	bl	8006b44 <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6260      	str	r0, [r4, #36]	; 0x24
 80083ac:	b920      	cbnz	r0, 80083b8 <_Balloc+0x20>
 80083ae:	2166      	movs	r1, #102	; 0x66
 80083b0:	4b17      	ldr	r3, [pc, #92]	; (8008410 <_Balloc+0x78>)
 80083b2:	4818      	ldr	r0, [pc, #96]	; (8008414 <_Balloc+0x7c>)
 80083b4:	f000 fce2 	bl	8008d7c <__assert_func>
 80083b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083bc:	6006      	str	r6, [r0, #0]
 80083be:	60c6      	str	r6, [r0, #12]
 80083c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083c2:	68f3      	ldr	r3, [r6, #12]
 80083c4:	b183      	cbz	r3, 80083e8 <_Balloc+0x50>
 80083c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ce:	b9b8      	cbnz	r0, 8008400 <_Balloc+0x68>
 80083d0:	2101      	movs	r1, #1
 80083d2:	fa01 f605 	lsl.w	r6, r1, r5
 80083d6:	1d72      	adds	r2, r6, #5
 80083d8:	4620      	mov	r0, r4
 80083da:	0092      	lsls	r2, r2, #2
 80083dc:	f000 fb5e 	bl	8008a9c <_calloc_r>
 80083e0:	b160      	cbz	r0, 80083fc <_Balloc+0x64>
 80083e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083e6:	e00e      	b.n	8008406 <_Balloc+0x6e>
 80083e8:	2221      	movs	r2, #33	; 0x21
 80083ea:	2104      	movs	r1, #4
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fb55 	bl	8008a9c <_calloc_r>
 80083f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f4:	60f0      	str	r0, [r6, #12]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e4      	bne.n	80083c6 <_Balloc+0x2e>
 80083fc:	2000      	movs	r0, #0
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	6802      	ldr	r2, [r0, #0]
 8008402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008406:	2300      	movs	r3, #0
 8008408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800840c:	e7f7      	b.n	80083fe <_Balloc+0x66>
 800840e:	bf00      	nop
 8008410:	0800a731 	.word	0x0800a731
 8008414:	0800a7b4 	.word	0x0800a7b4

08008418 <_Bfree>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800841c:	4605      	mov	r5, r0
 800841e:	460c      	mov	r4, r1
 8008420:	b976      	cbnz	r6, 8008440 <_Bfree+0x28>
 8008422:	2010      	movs	r0, #16
 8008424:	f7fe fb8e 	bl	8006b44 <malloc>
 8008428:	4602      	mov	r2, r0
 800842a:	6268      	str	r0, [r5, #36]	; 0x24
 800842c:	b920      	cbnz	r0, 8008438 <_Bfree+0x20>
 800842e:	218a      	movs	r1, #138	; 0x8a
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <_Bfree+0x3c>)
 8008432:	4809      	ldr	r0, [pc, #36]	; (8008458 <_Bfree+0x40>)
 8008434:	f000 fca2 	bl	8008d7c <__assert_func>
 8008438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800843c:	6006      	str	r6, [r0, #0]
 800843e:	60c6      	str	r6, [r0, #12]
 8008440:	b13c      	cbz	r4, 8008452 <_Bfree+0x3a>
 8008442:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008444:	6862      	ldr	r2, [r4, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800844c:	6021      	str	r1, [r4, #0]
 800844e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	0800a731 	.word	0x0800a731
 8008458:	0800a7b4 	.word	0x0800a7b4

0800845c <__multadd>:
 800845c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	4607      	mov	r7, r0
 8008462:	460c      	mov	r4, r1
 8008464:	461e      	mov	r6, r3
 8008466:	2000      	movs	r0, #0
 8008468:	690d      	ldr	r5, [r1, #16]
 800846a:	f101 0c14 	add.w	ip, r1, #20
 800846e:	f8dc 3000 	ldr.w	r3, [ip]
 8008472:	3001      	adds	r0, #1
 8008474:	b299      	uxth	r1, r3
 8008476:	fb02 6101 	mla	r1, r2, r1, r6
 800847a:	0c1e      	lsrs	r6, r3, #16
 800847c:	0c0b      	lsrs	r3, r1, #16
 800847e:	fb02 3306 	mla	r3, r2, r6, r3
 8008482:	b289      	uxth	r1, r1
 8008484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008488:	4285      	cmp	r5, r0
 800848a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800848e:	f84c 1b04 	str.w	r1, [ip], #4
 8008492:	dcec      	bgt.n	800846e <__multadd+0x12>
 8008494:	b30e      	cbz	r6, 80084da <__multadd+0x7e>
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	42ab      	cmp	r3, r5
 800849a:	dc19      	bgt.n	80084d0 <__multadd+0x74>
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	4638      	mov	r0, r7
 80084a0:	3101      	adds	r1, #1
 80084a2:	f7ff ff79 	bl	8008398 <_Balloc>
 80084a6:	4680      	mov	r8, r0
 80084a8:	b928      	cbnz	r0, 80084b6 <__multadd+0x5a>
 80084aa:	4602      	mov	r2, r0
 80084ac:	21b5      	movs	r1, #181	; 0xb5
 80084ae:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <__multadd+0x84>)
 80084b0:	480c      	ldr	r0, [pc, #48]	; (80084e4 <__multadd+0x88>)
 80084b2:	f000 fc63 	bl	8008d7c <__assert_func>
 80084b6:	6922      	ldr	r2, [r4, #16]
 80084b8:	f104 010c 	add.w	r1, r4, #12
 80084bc:	3202      	adds	r2, #2
 80084be:	0092      	lsls	r2, r2, #2
 80084c0:	300c      	adds	r0, #12
 80084c2:	f7fe fb4f 	bl	8006b64 <memcpy>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7ff ffa5 	bl	8008418 <_Bfree>
 80084ce:	4644      	mov	r4, r8
 80084d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084d4:	3501      	adds	r5, #1
 80084d6:	615e      	str	r6, [r3, #20]
 80084d8:	6125      	str	r5, [r4, #16]
 80084da:	4620      	mov	r0, r4
 80084dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e0:	0800a7a3 	.word	0x0800a7a3
 80084e4:	0800a7b4 	.word	0x0800a7b4

080084e8 <__hi0bits>:
 80084e8:	0c02      	lsrs	r2, r0, #16
 80084ea:	0412      	lsls	r2, r2, #16
 80084ec:	4603      	mov	r3, r0
 80084ee:	b9ca      	cbnz	r2, 8008524 <__hi0bits+0x3c>
 80084f0:	0403      	lsls	r3, r0, #16
 80084f2:	2010      	movs	r0, #16
 80084f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084f8:	bf04      	itt	eq
 80084fa:	021b      	lsleq	r3, r3, #8
 80084fc:	3008      	addeq	r0, #8
 80084fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008502:	bf04      	itt	eq
 8008504:	011b      	lsleq	r3, r3, #4
 8008506:	3004      	addeq	r0, #4
 8008508:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800850c:	bf04      	itt	eq
 800850e:	009b      	lsleq	r3, r3, #2
 8008510:	3002      	addeq	r0, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	db05      	blt.n	8008522 <__hi0bits+0x3a>
 8008516:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800851a:	f100 0001 	add.w	r0, r0, #1
 800851e:	bf08      	it	eq
 8008520:	2020      	moveq	r0, #32
 8008522:	4770      	bx	lr
 8008524:	2000      	movs	r0, #0
 8008526:	e7e5      	b.n	80084f4 <__hi0bits+0xc>

08008528 <__lo0bits>:
 8008528:	6803      	ldr	r3, [r0, #0]
 800852a:	4602      	mov	r2, r0
 800852c:	f013 0007 	ands.w	r0, r3, #7
 8008530:	d00b      	beq.n	800854a <__lo0bits+0x22>
 8008532:	07d9      	lsls	r1, r3, #31
 8008534:	d421      	bmi.n	800857a <__lo0bits+0x52>
 8008536:	0798      	lsls	r0, r3, #30
 8008538:	bf49      	itett	mi
 800853a:	085b      	lsrmi	r3, r3, #1
 800853c:	089b      	lsrpl	r3, r3, #2
 800853e:	2001      	movmi	r0, #1
 8008540:	6013      	strmi	r3, [r2, #0]
 8008542:	bf5c      	itt	pl
 8008544:	2002      	movpl	r0, #2
 8008546:	6013      	strpl	r3, [r2, #0]
 8008548:	4770      	bx	lr
 800854a:	b299      	uxth	r1, r3
 800854c:	b909      	cbnz	r1, 8008552 <__lo0bits+0x2a>
 800854e:	2010      	movs	r0, #16
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	b2d9      	uxtb	r1, r3
 8008554:	b909      	cbnz	r1, 800855a <__lo0bits+0x32>
 8008556:	3008      	adds	r0, #8
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	0719      	lsls	r1, r3, #28
 800855c:	bf04      	itt	eq
 800855e:	091b      	lsreq	r3, r3, #4
 8008560:	3004      	addeq	r0, #4
 8008562:	0799      	lsls	r1, r3, #30
 8008564:	bf04      	itt	eq
 8008566:	089b      	lsreq	r3, r3, #2
 8008568:	3002      	addeq	r0, #2
 800856a:	07d9      	lsls	r1, r3, #31
 800856c:	d403      	bmi.n	8008576 <__lo0bits+0x4e>
 800856e:	085b      	lsrs	r3, r3, #1
 8008570:	f100 0001 	add.w	r0, r0, #1
 8008574:	d003      	beq.n	800857e <__lo0bits+0x56>
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4770      	bx	lr
 800857a:	2000      	movs	r0, #0
 800857c:	4770      	bx	lr
 800857e:	2020      	movs	r0, #32
 8008580:	4770      	bx	lr
	...

08008584 <__i2b>:
 8008584:	b510      	push	{r4, lr}
 8008586:	460c      	mov	r4, r1
 8008588:	2101      	movs	r1, #1
 800858a:	f7ff ff05 	bl	8008398 <_Balloc>
 800858e:	4602      	mov	r2, r0
 8008590:	b928      	cbnz	r0, 800859e <__i2b+0x1a>
 8008592:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008596:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <__i2b+0x24>)
 8008598:	4804      	ldr	r0, [pc, #16]	; (80085ac <__i2b+0x28>)
 800859a:	f000 fbef 	bl	8008d7c <__assert_func>
 800859e:	2301      	movs	r3, #1
 80085a0:	6144      	str	r4, [r0, #20]
 80085a2:	6103      	str	r3, [r0, #16]
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	0800a7a3 	.word	0x0800a7a3
 80085ac:	0800a7b4 	.word	0x0800a7b4

080085b0 <__multiply>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	4691      	mov	r9, r2
 80085b6:	690a      	ldr	r2, [r1, #16]
 80085b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085bc:	460c      	mov	r4, r1
 80085be:	429a      	cmp	r2, r3
 80085c0:	bfbe      	ittt	lt
 80085c2:	460b      	movlt	r3, r1
 80085c4:	464c      	movlt	r4, r9
 80085c6:	4699      	movlt	r9, r3
 80085c8:	6927      	ldr	r7, [r4, #16]
 80085ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	eb07 060a 	add.w	r6, r7, sl
 80085d6:	42b3      	cmp	r3, r6
 80085d8:	b085      	sub	sp, #20
 80085da:	bfb8      	it	lt
 80085dc:	3101      	addlt	r1, #1
 80085de:	f7ff fedb 	bl	8008398 <_Balloc>
 80085e2:	b930      	cbnz	r0, 80085f2 <__multiply+0x42>
 80085e4:	4602      	mov	r2, r0
 80085e6:	f240 115d 	movw	r1, #349	; 0x15d
 80085ea:	4b43      	ldr	r3, [pc, #268]	; (80086f8 <__multiply+0x148>)
 80085ec:	4843      	ldr	r0, [pc, #268]	; (80086fc <__multiply+0x14c>)
 80085ee:	f000 fbc5 	bl	8008d7c <__assert_func>
 80085f2:	f100 0514 	add.w	r5, r0, #20
 80085f6:	462b      	mov	r3, r5
 80085f8:	2200      	movs	r2, #0
 80085fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085fe:	4543      	cmp	r3, r8
 8008600:	d321      	bcc.n	8008646 <__multiply+0x96>
 8008602:	f104 0314 	add.w	r3, r4, #20
 8008606:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800860a:	f109 0314 	add.w	r3, r9, #20
 800860e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008612:	9202      	str	r2, [sp, #8]
 8008614:	1b3a      	subs	r2, r7, r4
 8008616:	3a15      	subs	r2, #21
 8008618:	f022 0203 	bic.w	r2, r2, #3
 800861c:	3204      	adds	r2, #4
 800861e:	f104 0115 	add.w	r1, r4, #21
 8008622:	428f      	cmp	r7, r1
 8008624:	bf38      	it	cc
 8008626:	2204      	movcc	r2, #4
 8008628:	9201      	str	r2, [sp, #4]
 800862a:	9a02      	ldr	r2, [sp, #8]
 800862c:	9303      	str	r3, [sp, #12]
 800862e:	429a      	cmp	r2, r3
 8008630:	d80c      	bhi.n	800864c <__multiply+0x9c>
 8008632:	2e00      	cmp	r6, #0
 8008634:	dd03      	ble.n	800863e <__multiply+0x8e>
 8008636:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800863a:	2b00      	cmp	r3, #0
 800863c:	d059      	beq.n	80086f2 <__multiply+0x142>
 800863e:	6106      	str	r6, [r0, #16]
 8008640:	b005      	add	sp, #20
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	f843 2b04 	str.w	r2, [r3], #4
 800864a:	e7d8      	b.n	80085fe <__multiply+0x4e>
 800864c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008650:	f1ba 0f00 	cmp.w	sl, #0
 8008654:	d023      	beq.n	800869e <__multiply+0xee>
 8008656:	46a9      	mov	r9, r5
 8008658:	f04f 0c00 	mov.w	ip, #0
 800865c:	f104 0e14 	add.w	lr, r4, #20
 8008660:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008664:	f8d9 1000 	ldr.w	r1, [r9]
 8008668:	fa1f fb82 	uxth.w	fp, r2
 800866c:	b289      	uxth	r1, r1
 800866e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008672:	4461      	add	r1, ip
 8008674:	f8d9 c000 	ldr.w	ip, [r9]
 8008678:	0c12      	lsrs	r2, r2, #16
 800867a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800867e:	fb0a c202 	mla	r2, sl, r2, ip
 8008682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008686:	b289      	uxth	r1, r1
 8008688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800868c:	4577      	cmp	r7, lr
 800868e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008692:	f849 1b04 	str.w	r1, [r9], #4
 8008696:	d8e3      	bhi.n	8008660 <__multiply+0xb0>
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	f845 c002 	str.w	ip, [r5, r2]
 800869e:	9a03      	ldr	r2, [sp, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086a6:	f1b9 0f00 	cmp.w	r9, #0
 80086aa:	d020      	beq.n	80086ee <__multiply+0x13e>
 80086ac:	46ae      	mov	lr, r5
 80086ae:	f04f 0a00 	mov.w	sl, #0
 80086b2:	6829      	ldr	r1, [r5, #0]
 80086b4:	f104 0c14 	add.w	ip, r4, #20
 80086b8:	f8bc b000 	ldrh.w	fp, [ip]
 80086bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086c0:	b289      	uxth	r1, r1
 80086c2:	fb09 220b 	mla	r2, r9, fp, r2
 80086c6:	4492      	add	sl, r2
 80086c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086cc:	f84e 1b04 	str.w	r1, [lr], #4
 80086d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086d4:	f8be 1000 	ldrh.w	r1, [lr]
 80086d8:	0c12      	lsrs	r2, r2, #16
 80086da:	fb09 1102 	mla	r1, r9, r2, r1
 80086de:	4567      	cmp	r7, ip
 80086e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086e8:	d8e6      	bhi.n	80086b8 <__multiply+0x108>
 80086ea:	9a01      	ldr	r2, [sp, #4]
 80086ec:	50a9      	str	r1, [r5, r2]
 80086ee:	3504      	adds	r5, #4
 80086f0:	e79b      	b.n	800862a <__multiply+0x7a>
 80086f2:	3e01      	subs	r6, #1
 80086f4:	e79d      	b.n	8008632 <__multiply+0x82>
 80086f6:	bf00      	nop
 80086f8:	0800a7a3 	.word	0x0800a7a3
 80086fc:	0800a7b4 	.word	0x0800a7b4

08008700 <__pow5mult>:
 8008700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008704:	4615      	mov	r5, r2
 8008706:	f012 0203 	ands.w	r2, r2, #3
 800870a:	4606      	mov	r6, r0
 800870c:	460f      	mov	r7, r1
 800870e:	d007      	beq.n	8008720 <__pow5mult+0x20>
 8008710:	4c25      	ldr	r4, [pc, #148]	; (80087a8 <__pow5mult+0xa8>)
 8008712:	3a01      	subs	r2, #1
 8008714:	2300      	movs	r3, #0
 8008716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800871a:	f7ff fe9f 	bl	800845c <__multadd>
 800871e:	4607      	mov	r7, r0
 8008720:	10ad      	asrs	r5, r5, #2
 8008722:	d03d      	beq.n	80087a0 <__pow5mult+0xa0>
 8008724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008726:	b97c      	cbnz	r4, 8008748 <__pow5mult+0x48>
 8008728:	2010      	movs	r0, #16
 800872a:	f7fe fa0b 	bl	8006b44 <malloc>
 800872e:	4602      	mov	r2, r0
 8008730:	6270      	str	r0, [r6, #36]	; 0x24
 8008732:	b928      	cbnz	r0, 8008740 <__pow5mult+0x40>
 8008734:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008738:	4b1c      	ldr	r3, [pc, #112]	; (80087ac <__pow5mult+0xac>)
 800873a:	481d      	ldr	r0, [pc, #116]	; (80087b0 <__pow5mult+0xb0>)
 800873c:	f000 fb1e 	bl	8008d7c <__assert_func>
 8008740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008744:	6004      	str	r4, [r0, #0]
 8008746:	60c4      	str	r4, [r0, #12]
 8008748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800874c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008750:	b94c      	cbnz	r4, 8008766 <__pow5mult+0x66>
 8008752:	f240 2171 	movw	r1, #625	; 0x271
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ff14 	bl	8008584 <__i2b>
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	f8c8 0008 	str.w	r0, [r8, #8]
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	f04f 0900 	mov.w	r9, #0
 800876a:	07eb      	lsls	r3, r5, #31
 800876c:	d50a      	bpl.n	8008784 <__pow5mult+0x84>
 800876e:	4639      	mov	r1, r7
 8008770:	4622      	mov	r2, r4
 8008772:	4630      	mov	r0, r6
 8008774:	f7ff ff1c 	bl	80085b0 <__multiply>
 8008778:	4680      	mov	r8, r0
 800877a:	4639      	mov	r1, r7
 800877c:	4630      	mov	r0, r6
 800877e:	f7ff fe4b 	bl	8008418 <_Bfree>
 8008782:	4647      	mov	r7, r8
 8008784:	106d      	asrs	r5, r5, #1
 8008786:	d00b      	beq.n	80087a0 <__pow5mult+0xa0>
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	b938      	cbnz	r0, 800879c <__pow5mult+0x9c>
 800878c:	4622      	mov	r2, r4
 800878e:	4621      	mov	r1, r4
 8008790:	4630      	mov	r0, r6
 8008792:	f7ff ff0d 	bl	80085b0 <__multiply>
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	f8c0 9000 	str.w	r9, [r0]
 800879c:	4604      	mov	r4, r0
 800879e:	e7e4      	b.n	800876a <__pow5mult+0x6a>
 80087a0:	4638      	mov	r0, r7
 80087a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a6:	bf00      	nop
 80087a8:	0800a900 	.word	0x0800a900
 80087ac:	0800a731 	.word	0x0800a731
 80087b0:	0800a7b4 	.word	0x0800a7b4

080087b4 <__lshift>:
 80087b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b8:	460c      	mov	r4, r1
 80087ba:	4607      	mov	r7, r0
 80087bc:	4691      	mov	r9, r2
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	6849      	ldr	r1, [r1, #4]
 80087c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087cc:	f108 0601 	add.w	r6, r8, #1
 80087d0:	42b3      	cmp	r3, r6
 80087d2:	db0b      	blt.n	80087ec <__lshift+0x38>
 80087d4:	4638      	mov	r0, r7
 80087d6:	f7ff fddf 	bl	8008398 <_Balloc>
 80087da:	4605      	mov	r5, r0
 80087dc:	b948      	cbnz	r0, 80087f2 <__lshift+0x3e>
 80087de:	4602      	mov	r2, r0
 80087e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087e4:	4b29      	ldr	r3, [pc, #164]	; (800888c <__lshift+0xd8>)
 80087e6:	482a      	ldr	r0, [pc, #168]	; (8008890 <__lshift+0xdc>)
 80087e8:	f000 fac8 	bl	8008d7c <__assert_func>
 80087ec:	3101      	adds	r1, #1
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	e7ee      	b.n	80087d0 <__lshift+0x1c>
 80087f2:	2300      	movs	r3, #0
 80087f4:	f100 0114 	add.w	r1, r0, #20
 80087f8:	f100 0210 	add.w	r2, r0, #16
 80087fc:	4618      	mov	r0, r3
 80087fe:	4553      	cmp	r3, sl
 8008800:	db37      	blt.n	8008872 <__lshift+0xbe>
 8008802:	6920      	ldr	r0, [r4, #16]
 8008804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008808:	f104 0314 	add.w	r3, r4, #20
 800880c:	f019 091f 	ands.w	r9, r9, #31
 8008810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008814:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008818:	d02f      	beq.n	800887a <__lshift+0xc6>
 800881a:	468a      	mov	sl, r1
 800881c:	f04f 0c00 	mov.w	ip, #0
 8008820:	f1c9 0e20 	rsb	lr, r9, #32
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	fa02 f209 	lsl.w	r2, r2, r9
 800882a:	ea42 020c 	orr.w	r2, r2, ip
 800882e:	f84a 2b04 	str.w	r2, [sl], #4
 8008832:	f853 2b04 	ldr.w	r2, [r3], #4
 8008836:	4298      	cmp	r0, r3
 8008838:	fa22 fc0e 	lsr.w	ip, r2, lr
 800883c:	d8f2      	bhi.n	8008824 <__lshift+0x70>
 800883e:	1b03      	subs	r3, r0, r4
 8008840:	3b15      	subs	r3, #21
 8008842:	f023 0303 	bic.w	r3, r3, #3
 8008846:	3304      	adds	r3, #4
 8008848:	f104 0215 	add.w	r2, r4, #21
 800884c:	4290      	cmp	r0, r2
 800884e:	bf38      	it	cc
 8008850:	2304      	movcc	r3, #4
 8008852:	f841 c003 	str.w	ip, [r1, r3]
 8008856:	f1bc 0f00 	cmp.w	ip, #0
 800885a:	d001      	beq.n	8008860 <__lshift+0xac>
 800885c:	f108 0602 	add.w	r6, r8, #2
 8008860:	3e01      	subs	r6, #1
 8008862:	4638      	mov	r0, r7
 8008864:	4621      	mov	r1, r4
 8008866:	612e      	str	r6, [r5, #16]
 8008868:	f7ff fdd6 	bl	8008418 <_Bfree>
 800886c:	4628      	mov	r0, r5
 800886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008872:	f842 0f04 	str.w	r0, [r2, #4]!
 8008876:	3301      	adds	r3, #1
 8008878:	e7c1      	b.n	80087fe <__lshift+0x4a>
 800887a:	3904      	subs	r1, #4
 800887c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008880:	4298      	cmp	r0, r3
 8008882:	f841 2f04 	str.w	r2, [r1, #4]!
 8008886:	d8f9      	bhi.n	800887c <__lshift+0xc8>
 8008888:	e7ea      	b.n	8008860 <__lshift+0xac>
 800888a:	bf00      	nop
 800888c:	0800a7a3 	.word	0x0800a7a3
 8008890:	0800a7b4 	.word	0x0800a7b4

08008894 <__mcmp>:
 8008894:	4603      	mov	r3, r0
 8008896:	690a      	ldr	r2, [r1, #16]
 8008898:	6900      	ldr	r0, [r0, #16]
 800889a:	b530      	push	{r4, r5, lr}
 800889c:	1a80      	subs	r0, r0, r2
 800889e:	d10d      	bne.n	80088bc <__mcmp+0x28>
 80088a0:	3314      	adds	r3, #20
 80088a2:	3114      	adds	r1, #20
 80088a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088b4:	4295      	cmp	r5, r2
 80088b6:	d002      	beq.n	80088be <__mcmp+0x2a>
 80088b8:	d304      	bcc.n	80088c4 <__mcmp+0x30>
 80088ba:	2001      	movs	r0, #1
 80088bc:	bd30      	pop	{r4, r5, pc}
 80088be:	42a3      	cmp	r3, r4
 80088c0:	d3f4      	bcc.n	80088ac <__mcmp+0x18>
 80088c2:	e7fb      	b.n	80088bc <__mcmp+0x28>
 80088c4:	f04f 30ff 	mov.w	r0, #4294967295
 80088c8:	e7f8      	b.n	80088bc <__mcmp+0x28>
	...

080088cc <__mdiff>:
 80088cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	460d      	mov	r5, r1
 80088d2:	4607      	mov	r7, r0
 80088d4:	4611      	mov	r1, r2
 80088d6:	4628      	mov	r0, r5
 80088d8:	4614      	mov	r4, r2
 80088da:	f7ff ffdb 	bl	8008894 <__mcmp>
 80088de:	1e06      	subs	r6, r0, #0
 80088e0:	d111      	bne.n	8008906 <__mdiff+0x3a>
 80088e2:	4631      	mov	r1, r6
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff fd57 	bl	8008398 <_Balloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	b928      	cbnz	r0, 80088fa <__mdiff+0x2e>
 80088ee:	f240 2132 	movw	r1, #562	; 0x232
 80088f2:	4b3a      	ldr	r3, [pc, #232]	; (80089dc <__mdiff+0x110>)
 80088f4:	483a      	ldr	r0, [pc, #232]	; (80089e0 <__mdiff+0x114>)
 80088f6:	f000 fa41 	bl	8008d7c <__assert_func>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008900:	4610      	mov	r0, r2
 8008902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	bfa4      	itt	ge
 8008908:	4623      	movge	r3, r4
 800890a:	462c      	movge	r4, r5
 800890c:	4638      	mov	r0, r7
 800890e:	6861      	ldr	r1, [r4, #4]
 8008910:	bfa6      	itte	ge
 8008912:	461d      	movge	r5, r3
 8008914:	2600      	movge	r6, #0
 8008916:	2601      	movlt	r6, #1
 8008918:	f7ff fd3e 	bl	8008398 <_Balloc>
 800891c:	4602      	mov	r2, r0
 800891e:	b918      	cbnz	r0, 8008928 <__mdiff+0x5c>
 8008920:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008924:	4b2d      	ldr	r3, [pc, #180]	; (80089dc <__mdiff+0x110>)
 8008926:	e7e5      	b.n	80088f4 <__mdiff+0x28>
 8008928:	f102 0814 	add.w	r8, r2, #20
 800892c:	46c2      	mov	sl, r8
 800892e:	f04f 0c00 	mov.w	ip, #0
 8008932:	6927      	ldr	r7, [r4, #16]
 8008934:	60c6      	str	r6, [r0, #12]
 8008936:	692e      	ldr	r6, [r5, #16]
 8008938:	f104 0014 	add.w	r0, r4, #20
 800893c:	f105 0914 	add.w	r9, r5, #20
 8008940:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008944:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008948:	3410      	adds	r4, #16
 800894a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800894e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008952:	fa1f f18b 	uxth.w	r1, fp
 8008956:	448c      	add	ip, r1
 8008958:	b299      	uxth	r1, r3
 800895a:	0c1b      	lsrs	r3, r3, #16
 800895c:	ebac 0101 	sub.w	r1, ip, r1
 8008960:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008964:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008968:	b289      	uxth	r1, r1
 800896a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800896e:	454e      	cmp	r6, r9
 8008970:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008974:	f84a 3b04 	str.w	r3, [sl], #4
 8008978:	d8e7      	bhi.n	800894a <__mdiff+0x7e>
 800897a:	1b73      	subs	r3, r6, r5
 800897c:	3b15      	subs	r3, #21
 800897e:	f023 0303 	bic.w	r3, r3, #3
 8008982:	3515      	adds	r5, #21
 8008984:	3304      	adds	r3, #4
 8008986:	42ae      	cmp	r6, r5
 8008988:	bf38      	it	cc
 800898a:	2304      	movcc	r3, #4
 800898c:	4418      	add	r0, r3
 800898e:	4443      	add	r3, r8
 8008990:	461e      	mov	r6, r3
 8008992:	4605      	mov	r5, r0
 8008994:	4575      	cmp	r5, lr
 8008996:	d30e      	bcc.n	80089b6 <__mdiff+0xea>
 8008998:	f10e 0103 	add.w	r1, lr, #3
 800899c:	1a09      	subs	r1, r1, r0
 800899e:	f021 0103 	bic.w	r1, r1, #3
 80089a2:	3803      	subs	r0, #3
 80089a4:	4586      	cmp	lr, r0
 80089a6:	bf38      	it	cc
 80089a8:	2100      	movcc	r1, #0
 80089aa:	4419      	add	r1, r3
 80089ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80089b0:	b18b      	cbz	r3, 80089d6 <__mdiff+0x10a>
 80089b2:	6117      	str	r7, [r2, #16]
 80089b4:	e7a4      	b.n	8008900 <__mdiff+0x34>
 80089b6:	f855 8b04 	ldr.w	r8, [r5], #4
 80089ba:	fa1f f188 	uxth.w	r1, r8
 80089be:	4461      	add	r1, ip
 80089c0:	140c      	asrs	r4, r1, #16
 80089c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089c6:	b289      	uxth	r1, r1
 80089c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089cc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80089d0:	f846 1b04 	str.w	r1, [r6], #4
 80089d4:	e7de      	b.n	8008994 <__mdiff+0xc8>
 80089d6:	3f01      	subs	r7, #1
 80089d8:	e7e8      	b.n	80089ac <__mdiff+0xe0>
 80089da:	bf00      	nop
 80089dc:	0800a7a3 	.word	0x0800a7a3
 80089e0:	0800a7b4 	.word	0x0800a7b4

080089e4 <__d2b>:
 80089e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80089e8:	2101      	movs	r1, #1
 80089ea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80089ee:	4690      	mov	r8, r2
 80089f0:	461d      	mov	r5, r3
 80089f2:	f7ff fcd1 	bl	8008398 <_Balloc>
 80089f6:	4604      	mov	r4, r0
 80089f8:	b930      	cbnz	r0, 8008a08 <__d2b+0x24>
 80089fa:	4602      	mov	r2, r0
 80089fc:	f240 310a 	movw	r1, #778	; 0x30a
 8008a00:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <__d2b+0xb0>)
 8008a02:	4825      	ldr	r0, [pc, #148]	; (8008a98 <__d2b+0xb4>)
 8008a04:	f000 f9ba 	bl	8008d7c <__assert_func>
 8008a08:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a0c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008a10:	bb2d      	cbnz	r5, 8008a5e <__d2b+0x7a>
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	f1b8 0300 	subs.w	r3, r8, #0
 8008a18:	d026      	beq.n	8008a68 <__d2b+0x84>
 8008a1a:	4668      	mov	r0, sp
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f7ff fd83 	bl	8008528 <__lo0bits>
 8008a22:	9900      	ldr	r1, [sp, #0]
 8008a24:	b1f0      	cbz	r0, 8008a64 <__d2b+0x80>
 8008a26:	9a01      	ldr	r2, [sp, #4]
 8008a28:	f1c0 0320 	rsb	r3, r0, #32
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	430b      	orrs	r3, r1
 8008a32:	40c2      	lsrs	r2, r0
 8008a34:	6163      	str	r3, [r4, #20]
 8008a36:	9201      	str	r2, [sp, #4]
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bf14      	ite	ne
 8008a3e:	2102      	movne	r1, #2
 8008a40:	2101      	moveq	r1, #1
 8008a42:	61a3      	str	r3, [r4, #24]
 8008a44:	6121      	str	r1, [r4, #16]
 8008a46:	b1c5      	cbz	r5, 8008a7a <__d2b+0x96>
 8008a48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a4c:	4405      	add	r5, r0
 8008a4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a52:	603d      	str	r5, [r7, #0]
 8008a54:	6030      	str	r0, [r6, #0]
 8008a56:	4620      	mov	r0, r4
 8008a58:	b002      	add	sp, #8
 8008a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a62:	e7d6      	b.n	8008a12 <__d2b+0x2e>
 8008a64:	6161      	str	r1, [r4, #20]
 8008a66:	e7e7      	b.n	8008a38 <__d2b+0x54>
 8008a68:	a801      	add	r0, sp, #4
 8008a6a:	f7ff fd5d 	bl	8008528 <__lo0bits>
 8008a6e:	2101      	movs	r1, #1
 8008a70:	9b01      	ldr	r3, [sp, #4]
 8008a72:	6121      	str	r1, [r4, #16]
 8008a74:	6163      	str	r3, [r4, #20]
 8008a76:	3020      	adds	r0, #32
 8008a78:	e7e5      	b.n	8008a46 <__d2b+0x62>
 8008a7a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008a7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a82:	6038      	str	r0, [r7, #0]
 8008a84:	6918      	ldr	r0, [r3, #16]
 8008a86:	f7ff fd2f 	bl	80084e8 <__hi0bits>
 8008a8a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008a8e:	6031      	str	r1, [r6, #0]
 8008a90:	e7e1      	b.n	8008a56 <__d2b+0x72>
 8008a92:	bf00      	nop
 8008a94:	0800a7a3 	.word	0x0800a7a3
 8008a98:	0800a7b4 	.word	0x0800a7b4

08008a9c <_calloc_r>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	fba1 5402 	umull	r5, r4, r1, r2
 8008aa2:	b934      	cbnz	r4, 8008ab2 <_calloc_r+0x16>
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	f7fe f8db 	bl	8006c60 <_malloc_r>
 8008aaa:	4606      	mov	r6, r0
 8008aac:	b928      	cbnz	r0, 8008aba <_calloc_r+0x1e>
 8008aae:	4630      	mov	r0, r6
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}
 8008ab2:	220c      	movs	r2, #12
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	6002      	str	r2, [r0, #0]
 8008ab8:	e7f9      	b.n	8008aae <_calloc_r+0x12>
 8008aba:	462a      	mov	r2, r5
 8008abc:	4621      	mov	r1, r4
 8008abe:	f7fe f85f 	bl	8006b80 <memset>
 8008ac2:	e7f4      	b.n	8008aae <_calloc_r+0x12>

08008ac4 <__ssputs_r>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	688e      	ldr	r6, [r1, #8]
 8008aca:	4682      	mov	sl, r0
 8008acc:	429e      	cmp	r6, r3
 8008ace:	460c      	mov	r4, r1
 8008ad0:	4690      	mov	r8, r2
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	d838      	bhi.n	8008b48 <__ssputs_r+0x84>
 8008ad6:	898a      	ldrh	r2, [r1, #12]
 8008ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008adc:	d032      	beq.n	8008b44 <__ssputs_r+0x80>
 8008ade:	6825      	ldr	r5, [r4, #0]
 8008ae0:	6909      	ldr	r1, [r1, #16]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	eba5 0901 	sub.w	r9, r5, r1
 8008ae8:	6965      	ldr	r5, [r4, #20]
 8008aea:	444b      	add	r3, r9
 8008aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008af4:	106d      	asrs	r5, r5, #1
 8008af6:	429d      	cmp	r5, r3
 8008af8:	bf38      	it	cc
 8008afa:	461d      	movcc	r5, r3
 8008afc:	0553      	lsls	r3, r2, #21
 8008afe:	d531      	bpl.n	8008b64 <__ssputs_r+0xa0>
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7fe f8ad 	bl	8006c60 <_malloc_r>
 8008b06:	4606      	mov	r6, r0
 8008b08:	b950      	cbnz	r0, 8008b20 <__ssputs_r+0x5c>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	f8ca 3000 	str.w	r3, [sl]
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b20:	464a      	mov	r2, r9
 8008b22:	6921      	ldr	r1, [r4, #16]
 8008b24:	f7fe f81e 	bl	8006b64 <memcpy>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	6126      	str	r6, [r4, #16]
 8008b36:	444e      	add	r6, r9
 8008b38:	6026      	str	r6, [r4, #0]
 8008b3a:	463e      	mov	r6, r7
 8008b3c:	6165      	str	r5, [r4, #20]
 8008b3e:	eba5 0509 	sub.w	r5, r5, r9
 8008b42:	60a5      	str	r5, [r4, #8]
 8008b44:	42be      	cmp	r6, r7
 8008b46:	d900      	bls.n	8008b4a <__ssputs_r+0x86>
 8008b48:	463e      	mov	r6, r7
 8008b4a:	4632      	mov	r2, r6
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	6820      	ldr	r0, [r4, #0]
 8008b50:	f000 f959 	bl	8008e06 <memmove>
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	2000      	movs	r0, #0
 8008b58:	1b9b      	subs	r3, r3, r6
 8008b5a:	60a3      	str	r3, [r4, #8]
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	4433      	add	r3, r6
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	e7db      	b.n	8008b1c <__ssputs_r+0x58>
 8008b64:	462a      	mov	r2, r5
 8008b66:	f000 f968 	bl	8008e3a <_realloc_r>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1e1      	bne.n	8008b34 <__ssputs_r+0x70>
 8008b70:	4650      	mov	r0, sl
 8008b72:	6921      	ldr	r1, [r4, #16]
 8008b74:	f7fe f80c 	bl	8006b90 <_free_r>
 8008b78:	e7c7      	b.n	8008b0a <__ssputs_r+0x46>
	...

08008b7c <_svfiprintf_r>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	4698      	mov	r8, r3
 8008b82:	898b      	ldrh	r3, [r1, #12]
 8008b84:	4607      	mov	r7, r0
 8008b86:	061b      	lsls	r3, r3, #24
 8008b88:	460d      	mov	r5, r1
 8008b8a:	4614      	mov	r4, r2
 8008b8c:	b09d      	sub	sp, #116	; 0x74
 8008b8e:	d50e      	bpl.n	8008bae <_svfiprintf_r+0x32>
 8008b90:	690b      	ldr	r3, [r1, #16]
 8008b92:	b963      	cbnz	r3, 8008bae <_svfiprintf_r+0x32>
 8008b94:	2140      	movs	r1, #64	; 0x40
 8008b96:	f7fe f863 	bl	8006c60 <_malloc_r>
 8008b9a:	6028      	str	r0, [r5, #0]
 8008b9c:	6128      	str	r0, [r5, #16]
 8008b9e:	b920      	cbnz	r0, 8008baa <_svfiprintf_r+0x2e>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	e0d1      	b.n	8008d4e <_svfiprintf_r+0x1d2>
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	616b      	str	r3, [r5, #20]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb2:	2320      	movs	r3, #32
 8008bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb8:	2330      	movs	r3, #48	; 0x30
 8008bba:	f04f 0901 	mov.w	r9, #1
 8008bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d68 <_svfiprintf_r+0x1ec>
 8008bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bca:	4623      	mov	r3, r4
 8008bcc:	469a      	mov	sl, r3
 8008bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd2:	b10a      	cbz	r2, 8008bd8 <_svfiprintf_r+0x5c>
 8008bd4:	2a25      	cmp	r2, #37	; 0x25
 8008bd6:	d1f9      	bne.n	8008bcc <_svfiprintf_r+0x50>
 8008bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bdc:	d00b      	beq.n	8008bf6 <_svfiprintf_r+0x7a>
 8008bde:	465b      	mov	r3, fp
 8008be0:	4622      	mov	r2, r4
 8008be2:	4629      	mov	r1, r5
 8008be4:	4638      	mov	r0, r7
 8008be6:	f7ff ff6d 	bl	8008ac4 <__ssputs_r>
 8008bea:	3001      	adds	r0, #1
 8008bec:	f000 80aa 	beq.w	8008d44 <_svfiprintf_r+0x1c8>
 8008bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf2:	445a      	add	r2, fp
 8008bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80a2 	beq.w	8008d44 <_svfiprintf_r+0x1c8>
 8008c00:	2300      	movs	r3, #0
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c0a:	f10a 0a01 	add.w	sl, sl, #1
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	9307      	str	r3, [sp, #28]
 8008c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c16:	931a      	str	r3, [sp, #104]	; 0x68
 8008c18:	4654      	mov	r4, sl
 8008c1a:	2205      	movs	r2, #5
 8008c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c20:	4851      	ldr	r0, [pc, #324]	; (8008d68 <_svfiprintf_r+0x1ec>)
 8008c22:	f7ff fb9f 	bl	8008364 <memchr>
 8008c26:	9a04      	ldr	r2, [sp, #16]
 8008c28:	b9d8      	cbnz	r0, 8008c62 <_svfiprintf_r+0xe6>
 8008c2a:	06d0      	lsls	r0, r2, #27
 8008c2c:	bf44      	itt	mi
 8008c2e:	2320      	movmi	r3, #32
 8008c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c34:	0711      	lsls	r1, r2, #28
 8008c36:	bf44      	itt	mi
 8008c38:	232b      	movmi	r3, #43	; 0x2b
 8008c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c42:	2b2a      	cmp	r3, #42	; 0x2a
 8008c44:	d015      	beq.n	8008c72 <_svfiprintf_r+0xf6>
 8008c46:	4654      	mov	r4, sl
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f04f 0c0a 	mov.w	ip, #10
 8008c4e:	9a07      	ldr	r2, [sp, #28]
 8008c50:	4621      	mov	r1, r4
 8008c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c56:	3b30      	subs	r3, #48	; 0x30
 8008c58:	2b09      	cmp	r3, #9
 8008c5a:	d94e      	bls.n	8008cfa <_svfiprintf_r+0x17e>
 8008c5c:	b1b0      	cbz	r0, 8008c8c <_svfiprintf_r+0x110>
 8008c5e:	9207      	str	r2, [sp, #28]
 8008c60:	e014      	b.n	8008c8c <_svfiprintf_r+0x110>
 8008c62:	eba0 0308 	sub.w	r3, r0, r8
 8008c66:	fa09 f303 	lsl.w	r3, r9, r3
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	46a2      	mov	sl, r4
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	e7d2      	b.n	8008c18 <_svfiprintf_r+0x9c>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	1d19      	adds	r1, r3, #4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	9103      	str	r1, [sp, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bfbb      	ittet	lt
 8008c7e:	425b      	neglt	r3, r3
 8008c80:	f042 0202 	orrlt.w	r2, r2, #2
 8008c84:	9307      	strge	r3, [sp, #28]
 8008c86:	9307      	strlt	r3, [sp, #28]
 8008c88:	bfb8      	it	lt
 8008c8a:	9204      	strlt	r2, [sp, #16]
 8008c8c:	7823      	ldrb	r3, [r4, #0]
 8008c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c90:	d10c      	bne.n	8008cac <_svfiprintf_r+0x130>
 8008c92:	7863      	ldrb	r3, [r4, #1]
 8008c94:	2b2a      	cmp	r3, #42	; 0x2a
 8008c96:	d135      	bne.n	8008d04 <_svfiprintf_r+0x188>
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	3402      	adds	r4, #2
 8008c9c:	1d1a      	adds	r2, r3, #4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	9203      	str	r2, [sp, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bfb8      	it	lt
 8008ca6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008d6c <_svfiprintf_r+0x1f0>
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	7821      	ldrb	r1, [r4, #0]
 8008cb6:	f7ff fb55 	bl	8008364 <memchr>
 8008cba:	b140      	cbz	r0, 8008cce <_svfiprintf_r+0x152>
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	eba0 000a 	sub.w	r0, r0, sl
 8008cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc6:	9b04      	ldr	r3, [sp, #16]
 8008cc8:	3401      	adds	r4, #1
 8008cca:	4303      	orrs	r3, r0
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd2:	2206      	movs	r2, #6
 8008cd4:	4826      	ldr	r0, [pc, #152]	; (8008d70 <_svfiprintf_r+0x1f4>)
 8008cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cda:	f7ff fb43 	bl	8008364 <memchr>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d038      	beq.n	8008d54 <_svfiprintf_r+0x1d8>
 8008ce2:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <_svfiprintf_r+0x1f8>)
 8008ce4:	bb1b      	cbnz	r3, 8008d2e <_svfiprintf_r+0x1b2>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	3307      	adds	r3, #7
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf4:	4433      	add	r3, r6
 8008cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf8:	e767      	b.n	8008bca <_svfiprintf_r+0x4e>
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d02:	e7a5      	b.n	8008c50 <_svfiprintf_r+0xd4>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f04f 0c0a 	mov.w	ip, #10
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	3401      	adds	r4, #1
 8008d0e:	9305      	str	r3, [sp, #20]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d16:	3a30      	subs	r2, #48	; 0x30
 8008d18:	2a09      	cmp	r2, #9
 8008d1a:	d903      	bls.n	8008d24 <_svfiprintf_r+0x1a8>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0c5      	beq.n	8008cac <_svfiprintf_r+0x130>
 8008d20:	9105      	str	r1, [sp, #20]
 8008d22:	e7c3      	b.n	8008cac <_svfiprintf_r+0x130>
 8008d24:	4604      	mov	r4, r0
 8008d26:	2301      	movs	r3, #1
 8008d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2c:	e7f0      	b.n	8008d10 <_svfiprintf_r+0x194>
 8008d2e:	ab03      	add	r3, sp, #12
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	462a      	mov	r2, r5
 8008d34:	4638      	mov	r0, r7
 8008d36:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <_svfiprintf_r+0x1fc>)
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	f7fe f8a3 	bl	8006e84 <_printf_float>
 8008d3e:	1c42      	adds	r2, r0, #1
 8008d40:	4606      	mov	r6, r0
 8008d42:	d1d6      	bne.n	8008cf2 <_svfiprintf_r+0x176>
 8008d44:	89ab      	ldrh	r3, [r5, #12]
 8008d46:	065b      	lsls	r3, r3, #25
 8008d48:	f53f af2c 	bmi.w	8008ba4 <_svfiprintf_r+0x28>
 8008d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4e:	b01d      	add	sp, #116	; 0x74
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	4b06      	ldr	r3, [pc, #24]	; (8008d78 <_svfiprintf_r+0x1fc>)
 8008d5e:	a904      	add	r1, sp, #16
 8008d60:	f7fe fb2c 	bl	80073bc <_printf_i>
 8008d64:	e7eb      	b.n	8008d3e <_svfiprintf_r+0x1c2>
 8008d66:	bf00      	nop
 8008d68:	0800a90c 	.word	0x0800a90c
 8008d6c:	0800a912 	.word	0x0800a912
 8008d70:	0800a916 	.word	0x0800a916
 8008d74:	08006e85 	.word	0x08006e85
 8008d78:	08008ac5 	.word	0x08008ac5

08008d7c <__assert_func>:
 8008d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d7e:	4614      	mov	r4, r2
 8008d80:	461a      	mov	r2, r3
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <__assert_func+0x2c>)
 8008d84:	4605      	mov	r5, r0
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68d8      	ldr	r0, [r3, #12]
 8008d8a:	b14c      	cbz	r4, 8008da0 <__assert_func+0x24>
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <__assert_func+0x30>)
 8008d8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d92:	9100      	str	r1, [sp, #0]
 8008d94:	462b      	mov	r3, r5
 8008d96:	4906      	ldr	r1, [pc, #24]	; (8008db0 <__assert_func+0x34>)
 8008d98:	f000 f80e 	bl	8008db8 <fiprintf>
 8008d9c:	f000 faa2 	bl	80092e4 <abort>
 8008da0:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <__assert_func+0x38>)
 8008da2:	461c      	mov	r4, r3
 8008da4:	e7f3      	b.n	8008d8e <__assert_func+0x12>
 8008da6:	bf00      	nop
 8008da8:	20000014 	.word	0x20000014
 8008dac:	0800a91d 	.word	0x0800a91d
 8008db0:	0800a92a 	.word	0x0800a92a
 8008db4:	0800a958 	.word	0x0800a958

08008db8 <fiprintf>:
 8008db8:	b40e      	push	{r1, r2, r3}
 8008dba:	b503      	push	{r0, r1, lr}
 8008dbc:	4601      	mov	r1, r0
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <fiprintf+0x20>)
 8008dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc6:	6800      	ldr	r0, [r0, #0]
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	f000 f88d 	bl	8008ee8 <_vfiprintf_r>
 8008dce:	b002      	add	sp, #8
 8008dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd4:	b003      	add	sp, #12
 8008dd6:	4770      	bx	lr
 8008dd8:	20000014 	.word	0x20000014

08008ddc <__retarget_lock_init_recursive>:
 8008ddc:	4770      	bx	lr

08008dde <__retarget_lock_acquire_recursive>:
 8008dde:	4770      	bx	lr

08008de0 <__retarget_lock_release_recursive>:
 8008de0:	4770      	bx	lr

08008de2 <__ascii_mbtowc>:
 8008de2:	b082      	sub	sp, #8
 8008de4:	b901      	cbnz	r1, 8008de8 <__ascii_mbtowc+0x6>
 8008de6:	a901      	add	r1, sp, #4
 8008de8:	b142      	cbz	r2, 8008dfc <__ascii_mbtowc+0x1a>
 8008dea:	b14b      	cbz	r3, 8008e00 <__ascii_mbtowc+0x1e>
 8008dec:	7813      	ldrb	r3, [r2, #0]
 8008dee:	600b      	str	r3, [r1, #0]
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	1e10      	subs	r0, r2, #0
 8008df4:	bf18      	it	ne
 8008df6:	2001      	movne	r0, #1
 8008df8:	b002      	add	sp, #8
 8008dfa:	4770      	bx	lr
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	e7fb      	b.n	8008df8 <__ascii_mbtowc+0x16>
 8008e00:	f06f 0001 	mvn.w	r0, #1
 8008e04:	e7f8      	b.n	8008df8 <__ascii_mbtowc+0x16>

08008e06 <memmove>:
 8008e06:	4288      	cmp	r0, r1
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	eb01 0402 	add.w	r4, r1, r2
 8008e0e:	d902      	bls.n	8008e16 <memmove+0x10>
 8008e10:	4284      	cmp	r4, r0
 8008e12:	4623      	mov	r3, r4
 8008e14:	d807      	bhi.n	8008e26 <memmove+0x20>
 8008e16:	1e43      	subs	r3, r0, #1
 8008e18:	42a1      	cmp	r1, r4
 8008e1a:	d008      	beq.n	8008e2e <memmove+0x28>
 8008e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e24:	e7f8      	b.n	8008e18 <memmove+0x12>
 8008e26:	4601      	mov	r1, r0
 8008e28:	4402      	add	r2, r0
 8008e2a:	428a      	cmp	r2, r1
 8008e2c:	d100      	bne.n	8008e30 <memmove+0x2a>
 8008e2e:	bd10      	pop	{r4, pc}
 8008e30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e38:	e7f7      	b.n	8008e2a <memmove+0x24>

08008e3a <_realloc_r>:
 8008e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3e:	4680      	mov	r8, r0
 8008e40:	4614      	mov	r4, r2
 8008e42:	460e      	mov	r6, r1
 8008e44:	b921      	cbnz	r1, 8008e50 <_realloc_r+0x16>
 8008e46:	4611      	mov	r1, r2
 8008e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4c:	f7fd bf08 	b.w	8006c60 <_malloc_r>
 8008e50:	b92a      	cbnz	r2, 8008e5e <_realloc_r+0x24>
 8008e52:	f7fd fe9d 	bl	8006b90 <_free_r>
 8008e56:	4625      	mov	r5, r4
 8008e58:	4628      	mov	r0, r5
 8008e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5e:	f000 fc61 	bl	8009724 <_malloc_usable_size_r>
 8008e62:	4284      	cmp	r4, r0
 8008e64:	4607      	mov	r7, r0
 8008e66:	d802      	bhi.n	8008e6e <_realloc_r+0x34>
 8008e68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e6c:	d812      	bhi.n	8008e94 <_realloc_r+0x5a>
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4640      	mov	r0, r8
 8008e72:	f7fd fef5 	bl	8006c60 <_malloc_r>
 8008e76:	4605      	mov	r5, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0ed      	beq.n	8008e58 <_realloc_r+0x1e>
 8008e7c:	42bc      	cmp	r4, r7
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4631      	mov	r1, r6
 8008e82:	bf28      	it	cs
 8008e84:	463a      	movcs	r2, r7
 8008e86:	f7fd fe6d 	bl	8006b64 <memcpy>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	f7fd fe7f 	bl	8006b90 <_free_r>
 8008e92:	e7e1      	b.n	8008e58 <_realloc_r+0x1e>
 8008e94:	4635      	mov	r5, r6
 8008e96:	e7df      	b.n	8008e58 <_realloc_r+0x1e>

08008e98 <__sfputc_r>:
 8008e98:	6893      	ldr	r3, [r2, #8]
 8008e9a:	b410      	push	{r4}
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	6093      	str	r3, [r2, #8]
 8008ea2:	da07      	bge.n	8008eb4 <__sfputc_r+0x1c>
 8008ea4:	6994      	ldr	r4, [r2, #24]
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	db01      	blt.n	8008eae <__sfputc_r+0x16>
 8008eaa:	290a      	cmp	r1, #10
 8008eac:	d102      	bne.n	8008eb4 <__sfputc_r+0x1c>
 8008eae:	bc10      	pop	{r4}
 8008eb0:	f000 b94a 	b.w	8009148 <__swbuf_r>
 8008eb4:	6813      	ldr	r3, [r2, #0]
 8008eb6:	1c58      	adds	r0, r3, #1
 8008eb8:	6010      	str	r0, [r2, #0]
 8008eba:	7019      	strb	r1, [r3, #0]
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	bc10      	pop	{r4}
 8008ec0:	4770      	bx	lr

08008ec2 <__sfputs_r>:
 8008ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	18d5      	adds	r5, r2, r3
 8008ecc:	42ac      	cmp	r4, r5
 8008ece:	d101      	bne.n	8008ed4 <__sfputs_r+0x12>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e007      	b.n	8008ee4 <__sfputs_r+0x22>
 8008ed4:	463a      	mov	r2, r7
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008edc:	f7ff ffdc 	bl	8008e98 <__sfputc_r>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d1f3      	bne.n	8008ecc <__sfputs_r+0xa>
 8008ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ee8 <_vfiprintf_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	460d      	mov	r5, r1
 8008eee:	4614      	mov	r4, r2
 8008ef0:	4698      	mov	r8, r3
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	b09d      	sub	sp, #116	; 0x74
 8008ef6:	b118      	cbz	r0, 8008f00 <_vfiprintf_r+0x18>
 8008ef8:	6983      	ldr	r3, [r0, #24]
 8008efa:	b90b      	cbnz	r3, 8008f00 <_vfiprintf_r+0x18>
 8008efc:	f000 fb10 	bl	8009520 <__sinit>
 8008f00:	4b89      	ldr	r3, [pc, #548]	; (8009128 <_vfiprintf_r+0x240>)
 8008f02:	429d      	cmp	r5, r3
 8008f04:	d11b      	bne.n	8008f3e <_vfiprintf_r+0x56>
 8008f06:	6875      	ldr	r5, [r6, #4]
 8008f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f0a:	07d9      	lsls	r1, r3, #31
 8008f0c:	d405      	bmi.n	8008f1a <_vfiprintf_r+0x32>
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	059a      	lsls	r2, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <_vfiprintf_r+0x32>
 8008f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f16:	f7ff ff62 	bl	8008dde <__retarget_lock_acquire_recursive>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	071b      	lsls	r3, r3, #28
 8008f1e:	d501      	bpl.n	8008f24 <_vfiprintf_r+0x3c>
 8008f20:	692b      	ldr	r3, [r5, #16]
 8008f22:	b9eb      	cbnz	r3, 8008f60 <_vfiprintf_r+0x78>
 8008f24:	4629      	mov	r1, r5
 8008f26:	4630      	mov	r0, r6
 8008f28:	f000 f96e 	bl	8009208 <__swsetup_r>
 8008f2c:	b1c0      	cbz	r0, 8008f60 <_vfiprintf_r+0x78>
 8008f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f30:	07dc      	lsls	r4, r3, #31
 8008f32:	d50e      	bpl.n	8008f52 <_vfiprintf_r+0x6a>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b01d      	add	sp, #116	; 0x74
 8008f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3e:	4b7b      	ldr	r3, [pc, #492]	; (800912c <_vfiprintf_r+0x244>)
 8008f40:	429d      	cmp	r5, r3
 8008f42:	d101      	bne.n	8008f48 <_vfiprintf_r+0x60>
 8008f44:	68b5      	ldr	r5, [r6, #8]
 8008f46:	e7df      	b.n	8008f08 <_vfiprintf_r+0x20>
 8008f48:	4b79      	ldr	r3, [pc, #484]	; (8009130 <_vfiprintf_r+0x248>)
 8008f4a:	429d      	cmp	r5, r3
 8008f4c:	bf08      	it	eq
 8008f4e:	68f5      	ldreq	r5, [r6, #12]
 8008f50:	e7da      	b.n	8008f08 <_vfiprintf_r+0x20>
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	0598      	lsls	r0, r3, #22
 8008f56:	d4ed      	bmi.n	8008f34 <_vfiprintf_r+0x4c>
 8008f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f5a:	f7ff ff41 	bl	8008de0 <__retarget_lock_release_recursive>
 8008f5e:	e7e9      	b.n	8008f34 <_vfiprintf_r+0x4c>
 8008f60:	2300      	movs	r3, #0
 8008f62:	9309      	str	r3, [sp, #36]	; 0x24
 8008f64:	2320      	movs	r3, #32
 8008f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f6a:	2330      	movs	r3, #48	; 0x30
 8008f6c:	f04f 0901 	mov.w	r9, #1
 8008f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009134 <_vfiprintf_r+0x24c>
 8008f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	469a      	mov	sl, r3
 8008f80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f84:	b10a      	cbz	r2, 8008f8a <_vfiprintf_r+0xa2>
 8008f86:	2a25      	cmp	r2, #37	; 0x25
 8008f88:	d1f9      	bne.n	8008f7e <_vfiprintf_r+0x96>
 8008f8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f8e:	d00b      	beq.n	8008fa8 <_vfiprintf_r+0xc0>
 8008f90:	465b      	mov	r3, fp
 8008f92:	4622      	mov	r2, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	4630      	mov	r0, r6
 8008f98:	f7ff ff93 	bl	8008ec2 <__sfputs_r>
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f000 80aa 	beq.w	80090f6 <_vfiprintf_r+0x20e>
 8008fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa4:	445a      	add	r2, fp
 8008fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80a2 	beq.w	80090f6 <_vfiprintf_r+0x20e>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fbc:	f10a 0a01 	add.w	sl, sl, #1
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	9307      	str	r3, [sp, #28]
 8008fc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc8:	931a      	str	r3, [sp, #104]	; 0x68
 8008fca:	4654      	mov	r4, sl
 8008fcc:	2205      	movs	r2, #5
 8008fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd2:	4858      	ldr	r0, [pc, #352]	; (8009134 <_vfiprintf_r+0x24c>)
 8008fd4:	f7ff f9c6 	bl	8008364 <memchr>
 8008fd8:	9a04      	ldr	r2, [sp, #16]
 8008fda:	b9d8      	cbnz	r0, 8009014 <_vfiprintf_r+0x12c>
 8008fdc:	06d1      	lsls	r1, r2, #27
 8008fde:	bf44      	itt	mi
 8008fe0:	2320      	movmi	r3, #32
 8008fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe6:	0713      	lsls	r3, r2, #28
 8008fe8:	bf44      	itt	mi
 8008fea:	232b      	movmi	r3, #43	; 0x2b
 8008fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff6:	d015      	beq.n	8009024 <_vfiprintf_r+0x13c>
 8008ff8:	4654      	mov	r4, sl
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f04f 0c0a 	mov.w	ip, #10
 8009000:	9a07      	ldr	r2, [sp, #28]
 8009002:	4621      	mov	r1, r4
 8009004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009008:	3b30      	subs	r3, #48	; 0x30
 800900a:	2b09      	cmp	r3, #9
 800900c:	d94e      	bls.n	80090ac <_vfiprintf_r+0x1c4>
 800900e:	b1b0      	cbz	r0, 800903e <_vfiprintf_r+0x156>
 8009010:	9207      	str	r2, [sp, #28]
 8009012:	e014      	b.n	800903e <_vfiprintf_r+0x156>
 8009014:	eba0 0308 	sub.w	r3, r0, r8
 8009018:	fa09 f303 	lsl.w	r3, r9, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	46a2      	mov	sl, r4
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	e7d2      	b.n	8008fca <_vfiprintf_r+0xe2>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	1d19      	adds	r1, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	9103      	str	r1, [sp, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfbb      	ittet	lt
 8009030:	425b      	neglt	r3, r3
 8009032:	f042 0202 	orrlt.w	r2, r2, #2
 8009036:	9307      	strge	r3, [sp, #28]
 8009038:	9307      	strlt	r3, [sp, #28]
 800903a:	bfb8      	it	lt
 800903c:	9204      	strlt	r2, [sp, #16]
 800903e:	7823      	ldrb	r3, [r4, #0]
 8009040:	2b2e      	cmp	r3, #46	; 0x2e
 8009042:	d10c      	bne.n	800905e <_vfiprintf_r+0x176>
 8009044:	7863      	ldrb	r3, [r4, #1]
 8009046:	2b2a      	cmp	r3, #42	; 0x2a
 8009048:	d135      	bne.n	80090b6 <_vfiprintf_r+0x1ce>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3402      	adds	r4, #2
 800904e:	1d1a      	adds	r2, r3, #4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	9203      	str	r2, [sp, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bfb8      	it	lt
 8009058:	f04f 33ff 	movlt.w	r3, #4294967295
 800905c:	9305      	str	r3, [sp, #20]
 800905e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009138 <_vfiprintf_r+0x250>
 8009062:	2203      	movs	r2, #3
 8009064:	4650      	mov	r0, sl
 8009066:	7821      	ldrb	r1, [r4, #0]
 8009068:	f7ff f97c 	bl	8008364 <memchr>
 800906c:	b140      	cbz	r0, 8009080 <_vfiprintf_r+0x198>
 800906e:	2340      	movs	r3, #64	; 0x40
 8009070:	eba0 000a 	sub.w	r0, r0, sl
 8009074:	fa03 f000 	lsl.w	r0, r3, r0
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	3401      	adds	r4, #1
 800907c:	4303      	orrs	r3, r0
 800907e:	9304      	str	r3, [sp, #16]
 8009080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009084:	2206      	movs	r2, #6
 8009086:	482d      	ldr	r0, [pc, #180]	; (800913c <_vfiprintf_r+0x254>)
 8009088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800908c:	f7ff f96a 	bl	8008364 <memchr>
 8009090:	2800      	cmp	r0, #0
 8009092:	d03f      	beq.n	8009114 <_vfiprintf_r+0x22c>
 8009094:	4b2a      	ldr	r3, [pc, #168]	; (8009140 <_vfiprintf_r+0x258>)
 8009096:	bb1b      	cbnz	r3, 80090e0 <_vfiprintf_r+0x1f8>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	3307      	adds	r3, #7
 800909c:	f023 0307 	bic.w	r3, r3, #7
 80090a0:	3308      	adds	r3, #8
 80090a2:	9303      	str	r3, [sp, #12]
 80090a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a6:	443b      	add	r3, r7
 80090a8:	9309      	str	r3, [sp, #36]	; 0x24
 80090aa:	e767      	b.n	8008f7c <_vfiprintf_r+0x94>
 80090ac:	460c      	mov	r4, r1
 80090ae:	2001      	movs	r0, #1
 80090b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b4:	e7a5      	b.n	8009002 <_vfiprintf_r+0x11a>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f04f 0c0a 	mov.w	ip, #10
 80090bc:	4619      	mov	r1, r3
 80090be:	3401      	adds	r4, #1
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	4620      	mov	r0, r4
 80090c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c8:	3a30      	subs	r2, #48	; 0x30
 80090ca:	2a09      	cmp	r2, #9
 80090cc:	d903      	bls.n	80090d6 <_vfiprintf_r+0x1ee>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0c5      	beq.n	800905e <_vfiprintf_r+0x176>
 80090d2:	9105      	str	r1, [sp, #20]
 80090d4:	e7c3      	b.n	800905e <_vfiprintf_r+0x176>
 80090d6:	4604      	mov	r4, r0
 80090d8:	2301      	movs	r3, #1
 80090da:	fb0c 2101 	mla	r1, ip, r1, r2
 80090de:	e7f0      	b.n	80090c2 <_vfiprintf_r+0x1da>
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	462a      	mov	r2, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	4b16      	ldr	r3, [pc, #88]	; (8009144 <_vfiprintf_r+0x25c>)
 80090ea:	a904      	add	r1, sp, #16
 80090ec:	f7fd feca 	bl	8006e84 <_printf_float>
 80090f0:	4607      	mov	r7, r0
 80090f2:	1c78      	adds	r0, r7, #1
 80090f4:	d1d6      	bne.n	80090a4 <_vfiprintf_r+0x1bc>
 80090f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f8:	07d9      	lsls	r1, r3, #31
 80090fa:	d405      	bmi.n	8009108 <_vfiprintf_r+0x220>
 80090fc:	89ab      	ldrh	r3, [r5, #12]
 80090fe:	059a      	lsls	r2, r3, #22
 8009100:	d402      	bmi.n	8009108 <_vfiprintf_r+0x220>
 8009102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009104:	f7ff fe6c 	bl	8008de0 <__retarget_lock_release_recursive>
 8009108:	89ab      	ldrh	r3, [r5, #12]
 800910a:	065b      	lsls	r3, r3, #25
 800910c:	f53f af12 	bmi.w	8008f34 <_vfiprintf_r+0x4c>
 8009110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009112:	e711      	b.n	8008f38 <_vfiprintf_r+0x50>
 8009114:	ab03      	add	r3, sp, #12
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	462a      	mov	r2, r5
 800911a:	4630      	mov	r0, r6
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <_vfiprintf_r+0x25c>)
 800911e:	a904      	add	r1, sp, #16
 8009120:	f7fe f94c 	bl	80073bc <_printf_i>
 8009124:	e7e4      	b.n	80090f0 <_vfiprintf_r+0x208>
 8009126:	bf00      	nop
 8009128:	0800aa84 	.word	0x0800aa84
 800912c:	0800aaa4 	.word	0x0800aaa4
 8009130:	0800aa64 	.word	0x0800aa64
 8009134:	0800a90c 	.word	0x0800a90c
 8009138:	0800a912 	.word	0x0800a912
 800913c:	0800a916 	.word	0x0800a916
 8009140:	08006e85 	.word	0x08006e85
 8009144:	08008ec3 	.word	0x08008ec3

08009148 <__swbuf_r>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	460e      	mov	r6, r1
 800914c:	4614      	mov	r4, r2
 800914e:	4605      	mov	r5, r0
 8009150:	b118      	cbz	r0, 800915a <__swbuf_r+0x12>
 8009152:	6983      	ldr	r3, [r0, #24]
 8009154:	b90b      	cbnz	r3, 800915a <__swbuf_r+0x12>
 8009156:	f000 f9e3 	bl	8009520 <__sinit>
 800915a:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <__swbuf_r+0x98>)
 800915c:	429c      	cmp	r4, r3
 800915e:	d12b      	bne.n	80091b8 <__swbuf_r+0x70>
 8009160:	686c      	ldr	r4, [r5, #4]
 8009162:	69a3      	ldr	r3, [r4, #24]
 8009164:	60a3      	str	r3, [r4, #8]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	071a      	lsls	r2, r3, #28
 800916a:	d52f      	bpl.n	80091cc <__swbuf_r+0x84>
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	b36b      	cbz	r3, 80091cc <__swbuf_r+0x84>
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	6820      	ldr	r0, [r4, #0]
 8009174:	b2f6      	uxtb	r6, r6
 8009176:	1ac0      	subs	r0, r0, r3
 8009178:	6963      	ldr	r3, [r4, #20]
 800917a:	4637      	mov	r7, r6
 800917c:	4283      	cmp	r3, r0
 800917e:	dc04      	bgt.n	800918a <__swbuf_r+0x42>
 8009180:	4621      	mov	r1, r4
 8009182:	4628      	mov	r0, r5
 8009184:	f000 f938 	bl	80093f8 <_fflush_r>
 8009188:	bb30      	cbnz	r0, 80091d8 <__swbuf_r+0x90>
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	3001      	adds	r0, #1
 800918e:	3b01      	subs	r3, #1
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	6022      	str	r2, [r4, #0]
 8009198:	701e      	strb	r6, [r3, #0]
 800919a:	6963      	ldr	r3, [r4, #20]
 800919c:	4283      	cmp	r3, r0
 800919e:	d004      	beq.n	80091aa <__swbuf_r+0x62>
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	07db      	lsls	r3, r3, #31
 80091a4:	d506      	bpl.n	80091b4 <__swbuf_r+0x6c>
 80091a6:	2e0a      	cmp	r6, #10
 80091a8:	d104      	bne.n	80091b4 <__swbuf_r+0x6c>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f000 f923 	bl	80093f8 <_fflush_r>
 80091b2:	b988      	cbnz	r0, 80091d8 <__swbuf_r+0x90>
 80091b4:	4638      	mov	r0, r7
 80091b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <__swbuf_r+0x9c>)
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d101      	bne.n	80091c2 <__swbuf_r+0x7a>
 80091be:	68ac      	ldr	r4, [r5, #8]
 80091c0:	e7cf      	b.n	8009162 <__swbuf_r+0x1a>
 80091c2:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <__swbuf_r+0xa0>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	bf08      	it	eq
 80091c8:	68ec      	ldreq	r4, [r5, #12]
 80091ca:	e7ca      	b.n	8009162 <__swbuf_r+0x1a>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	f000 f81a 	bl	8009208 <__swsetup_r>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d0cb      	beq.n	8009170 <__swbuf_r+0x28>
 80091d8:	f04f 37ff 	mov.w	r7, #4294967295
 80091dc:	e7ea      	b.n	80091b4 <__swbuf_r+0x6c>
 80091de:	bf00      	nop
 80091e0:	0800aa84 	.word	0x0800aa84
 80091e4:	0800aaa4 	.word	0x0800aaa4
 80091e8:	0800aa64 	.word	0x0800aa64

080091ec <__ascii_wctomb>:
 80091ec:	4603      	mov	r3, r0
 80091ee:	4608      	mov	r0, r1
 80091f0:	b141      	cbz	r1, 8009204 <__ascii_wctomb+0x18>
 80091f2:	2aff      	cmp	r2, #255	; 0xff
 80091f4:	d904      	bls.n	8009200 <__ascii_wctomb+0x14>
 80091f6:	228a      	movs	r2, #138	; 0x8a
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	4770      	bx	lr
 8009200:	2001      	movs	r0, #1
 8009202:	700a      	strb	r2, [r1, #0]
 8009204:	4770      	bx	lr
	...

08009208 <__swsetup_r>:
 8009208:	4b32      	ldr	r3, [pc, #200]	; (80092d4 <__swsetup_r+0xcc>)
 800920a:	b570      	push	{r4, r5, r6, lr}
 800920c:	681d      	ldr	r5, [r3, #0]
 800920e:	4606      	mov	r6, r0
 8009210:	460c      	mov	r4, r1
 8009212:	b125      	cbz	r5, 800921e <__swsetup_r+0x16>
 8009214:	69ab      	ldr	r3, [r5, #24]
 8009216:	b913      	cbnz	r3, 800921e <__swsetup_r+0x16>
 8009218:	4628      	mov	r0, r5
 800921a:	f000 f981 	bl	8009520 <__sinit>
 800921e:	4b2e      	ldr	r3, [pc, #184]	; (80092d8 <__swsetup_r+0xd0>)
 8009220:	429c      	cmp	r4, r3
 8009222:	d10f      	bne.n	8009244 <__swsetup_r+0x3c>
 8009224:	686c      	ldr	r4, [r5, #4]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800922c:	0719      	lsls	r1, r3, #28
 800922e:	d42c      	bmi.n	800928a <__swsetup_r+0x82>
 8009230:	06dd      	lsls	r5, r3, #27
 8009232:	d411      	bmi.n	8009258 <__swsetup_r+0x50>
 8009234:	2309      	movs	r3, #9
 8009236:	6033      	str	r3, [r6, #0]
 8009238:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	e03e      	b.n	80092c2 <__swsetup_r+0xba>
 8009244:	4b25      	ldr	r3, [pc, #148]	; (80092dc <__swsetup_r+0xd4>)
 8009246:	429c      	cmp	r4, r3
 8009248:	d101      	bne.n	800924e <__swsetup_r+0x46>
 800924a:	68ac      	ldr	r4, [r5, #8]
 800924c:	e7eb      	b.n	8009226 <__swsetup_r+0x1e>
 800924e:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <__swsetup_r+0xd8>)
 8009250:	429c      	cmp	r4, r3
 8009252:	bf08      	it	eq
 8009254:	68ec      	ldreq	r4, [r5, #12]
 8009256:	e7e6      	b.n	8009226 <__swsetup_r+0x1e>
 8009258:	0758      	lsls	r0, r3, #29
 800925a:	d512      	bpl.n	8009282 <__swsetup_r+0x7a>
 800925c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925e:	b141      	cbz	r1, 8009272 <__swsetup_r+0x6a>
 8009260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009264:	4299      	cmp	r1, r3
 8009266:	d002      	beq.n	800926e <__swsetup_r+0x66>
 8009268:	4630      	mov	r0, r6
 800926a:	f7fd fc91 	bl	8006b90 <_free_r>
 800926e:	2300      	movs	r3, #0
 8009270:	6363      	str	r3, [r4, #52]	; 0x34
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	2300      	movs	r3, #0
 800927c:	6063      	str	r3, [r4, #4]
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	f043 0308 	orr.w	r3, r3, #8
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	b94b      	cbnz	r3, 80092a2 <__swsetup_r+0x9a>
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009298:	d003      	beq.n	80092a2 <__swsetup_r+0x9a>
 800929a:	4621      	mov	r1, r4
 800929c:	4630      	mov	r0, r6
 800929e:	f000 fa01 	bl	80096a4 <__smakebuf_r>
 80092a2:	89a0      	ldrh	r0, [r4, #12]
 80092a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092a8:	f010 0301 	ands.w	r3, r0, #1
 80092ac:	d00a      	beq.n	80092c4 <__swsetup_r+0xbc>
 80092ae:	2300      	movs	r3, #0
 80092b0:	60a3      	str	r3, [r4, #8]
 80092b2:	6963      	ldr	r3, [r4, #20]
 80092b4:	425b      	negs	r3, r3
 80092b6:	61a3      	str	r3, [r4, #24]
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	b943      	cbnz	r3, 80092ce <__swsetup_r+0xc6>
 80092bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092c0:	d1ba      	bne.n	8009238 <__swsetup_r+0x30>
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	0781      	lsls	r1, r0, #30
 80092c6:	bf58      	it	pl
 80092c8:	6963      	ldrpl	r3, [r4, #20]
 80092ca:	60a3      	str	r3, [r4, #8]
 80092cc:	e7f4      	b.n	80092b8 <__swsetup_r+0xb0>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e7f7      	b.n	80092c2 <__swsetup_r+0xba>
 80092d2:	bf00      	nop
 80092d4:	20000014 	.word	0x20000014
 80092d8:	0800aa84 	.word	0x0800aa84
 80092dc:	0800aaa4 	.word	0x0800aaa4
 80092e0:	0800aa64 	.word	0x0800aa64

080092e4 <abort>:
 80092e4:	2006      	movs	r0, #6
 80092e6:	b508      	push	{r3, lr}
 80092e8:	f000 fa4c 	bl	8009784 <raise>
 80092ec:	2001      	movs	r0, #1
 80092ee:	f7fa fbf4 	bl	8003ada <_exit>
	...

080092f4 <__sflush_r>:
 80092f4:	898a      	ldrh	r2, [r1, #12]
 80092f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f8:	4605      	mov	r5, r0
 80092fa:	0710      	lsls	r0, r2, #28
 80092fc:	460c      	mov	r4, r1
 80092fe:	d457      	bmi.n	80093b0 <__sflush_r+0xbc>
 8009300:	684b      	ldr	r3, [r1, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	dc04      	bgt.n	8009310 <__sflush_r+0x1c>
 8009306:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	dc01      	bgt.n	8009310 <__sflush_r+0x1c>
 800930c:	2000      	movs	r0, #0
 800930e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009312:	2e00      	cmp	r6, #0
 8009314:	d0fa      	beq.n	800930c <__sflush_r+0x18>
 8009316:	2300      	movs	r3, #0
 8009318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800931c:	682f      	ldr	r7, [r5, #0]
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	d032      	beq.n	8009388 <__sflush_r+0x94>
 8009322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	075a      	lsls	r2, r3, #29
 8009328:	d505      	bpl.n	8009336 <__sflush_r+0x42>
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	1ac0      	subs	r0, r0, r3
 800932e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009330:	b10b      	cbz	r3, 8009336 <__sflush_r+0x42>
 8009332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009334:	1ac0      	subs	r0, r0, r3
 8009336:	2300      	movs	r3, #0
 8009338:	4602      	mov	r2, r0
 800933a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800933c:	4628      	mov	r0, r5
 800933e:	6a21      	ldr	r1, [r4, #32]
 8009340:	47b0      	blx	r6
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	d106      	bne.n	8009356 <__sflush_r+0x62>
 8009348:	6829      	ldr	r1, [r5, #0]
 800934a:	291d      	cmp	r1, #29
 800934c:	d82c      	bhi.n	80093a8 <__sflush_r+0xb4>
 800934e:	4a29      	ldr	r2, [pc, #164]	; (80093f4 <__sflush_r+0x100>)
 8009350:	40ca      	lsrs	r2, r1
 8009352:	07d6      	lsls	r6, r2, #31
 8009354:	d528      	bpl.n	80093a8 <__sflush_r+0xb4>
 8009356:	2200      	movs	r2, #0
 8009358:	6062      	str	r2, [r4, #4]
 800935a:	6922      	ldr	r2, [r4, #16]
 800935c:	04d9      	lsls	r1, r3, #19
 800935e:	6022      	str	r2, [r4, #0]
 8009360:	d504      	bpl.n	800936c <__sflush_r+0x78>
 8009362:	1c42      	adds	r2, r0, #1
 8009364:	d101      	bne.n	800936a <__sflush_r+0x76>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b903      	cbnz	r3, 800936c <__sflush_r+0x78>
 800936a:	6560      	str	r0, [r4, #84]	; 0x54
 800936c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800936e:	602f      	str	r7, [r5, #0]
 8009370:	2900      	cmp	r1, #0
 8009372:	d0cb      	beq.n	800930c <__sflush_r+0x18>
 8009374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009378:	4299      	cmp	r1, r3
 800937a:	d002      	beq.n	8009382 <__sflush_r+0x8e>
 800937c:	4628      	mov	r0, r5
 800937e:	f7fd fc07 	bl	8006b90 <_free_r>
 8009382:	2000      	movs	r0, #0
 8009384:	6360      	str	r0, [r4, #52]	; 0x34
 8009386:	e7c2      	b.n	800930e <__sflush_r+0x1a>
 8009388:	6a21      	ldr	r1, [r4, #32]
 800938a:	2301      	movs	r3, #1
 800938c:	4628      	mov	r0, r5
 800938e:	47b0      	blx	r6
 8009390:	1c41      	adds	r1, r0, #1
 8009392:	d1c7      	bne.n	8009324 <__sflush_r+0x30>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0c4      	beq.n	8009324 <__sflush_r+0x30>
 800939a:	2b1d      	cmp	r3, #29
 800939c:	d001      	beq.n	80093a2 <__sflush_r+0xae>
 800939e:	2b16      	cmp	r3, #22
 80093a0:	d101      	bne.n	80093a6 <__sflush_r+0xb2>
 80093a2:	602f      	str	r7, [r5, #0]
 80093a4:	e7b2      	b.n	800930c <__sflush_r+0x18>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	e7ae      	b.n	800930e <__sflush_r+0x1a>
 80093b0:	690f      	ldr	r7, [r1, #16]
 80093b2:	2f00      	cmp	r7, #0
 80093b4:	d0aa      	beq.n	800930c <__sflush_r+0x18>
 80093b6:	0793      	lsls	r3, r2, #30
 80093b8:	bf18      	it	ne
 80093ba:	2300      	movne	r3, #0
 80093bc:	680e      	ldr	r6, [r1, #0]
 80093be:	bf08      	it	eq
 80093c0:	694b      	ldreq	r3, [r1, #20]
 80093c2:	1bf6      	subs	r6, r6, r7
 80093c4:	600f      	str	r7, [r1, #0]
 80093c6:	608b      	str	r3, [r1, #8]
 80093c8:	2e00      	cmp	r6, #0
 80093ca:	dd9f      	ble.n	800930c <__sflush_r+0x18>
 80093cc:	4633      	mov	r3, r6
 80093ce:	463a      	mov	r2, r7
 80093d0:	4628      	mov	r0, r5
 80093d2:	6a21      	ldr	r1, [r4, #32]
 80093d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80093d8:	47e0      	blx	ip
 80093da:	2800      	cmp	r0, #0
 80093dc:	dc06      	bgt.n	80093ec <__sflush_r+0xf8>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295
 80093e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e8:	81a3      	strh	r3, [r4, #12]
 80093ea:	e790      	b.n	800930e <__sflush_r+0x1a>
 80093ec:	4407      	add	r7, r0
 80093ee:	1a36      	subs	r6, r6, r0
 80093f0:	e7ea      	b.n	80093c8 <__sflush_r+0xd4>
 80093f2:	bf00      	nop
 80093f4:	20400001 	.word	0x20400001

080093f8 <_fflush_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	690b      	ldr	r3, [r1, #16]
 80093fc:	4605      	mov	r5, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b913      	cbnz	r3, 8009408 <_fflush_r+0x10>
 8009402:	2500      	movs	r5, #0
 8009404:	4628      	mov	r0, r5
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	b118      	cbz	r0, 8009412 <_fflush_r+0x1a>
 800940a:	6983      	ldr	r3, [r0, #24]
 800940c:	b90b      	cbnz	r3, 8009412 <_fflush_r+0x1a>
 800940e:	f000 f887 	bl	8009520 <__sinit>
 8009412:	4b14      	ldr	r3, [pc, #80]	; (8009464 <_fflush_r+0x6c>)
 8009414:	429c      	cmp	r4, r3
 8009416:	d11b      	bne.n	8009450 <_fflush_r+0x58>
 8009418:	686c      	ldr	r4, [r5, #4]
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0ef      	beq.n	8009402 <_fflush_r+0xa>
 8009422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009424:	07d0      	lsls	r0, r2, #31
 8009426:	d404      	bmi.n	8009432 <_fflush_r+0x3a>
 8009428:	0599      	lsls	r1, r3, #22
 800942a:	d402      	bmi.n	8009432 <_fflush_r+0x3a>
 800942c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800942e:	f7ff fcd6 	bl	8008dde <__retarget_lock_acquire_recursive>
 8009432:	4628      	mov	r0, r5
 8009434:	4621      	mov	r1, r4
 8009436:	f7ff ff5d 	bl	80092f4 <__sflush_r>
 800943a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800943c:	4605      	mov	r5, r0
 800943e:	07da      	lsls	r2, r3, #31
 8009440:	d4e0      	bmi.n	8009404 <_fflush_r+0xc>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	059b      	lsls	r3, r3, #22
 8009446:	d4dd      	bmi.n	8009404 <_fflush_r+0xc>
 8009448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944a:	f7ff fcc9 	bl	8008de0 <__retarget_lock_release_recursive>
 800944e:	e7d9      	b.n	8009404 <_fflush_r+0xc>
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <_fflush_r+0x70>)
 8009452:	429c      	cmp	r4, r3
 8009454:	d101      	bne.n	800945a <_fflush_r+0x62>
 8009456:	68ac      	ldr	r4, [r5, #8]
 8009458:	e7df      	b.n	800941a <_fflush_r+0x22>
 800945a:	4b04      	ldr	r3, [pc, #16]	; (800946c <_fflush_r+0x74>)
 800945c:	429c      	cmp	r4, r3
 800945e:	bf08      	it	eq
 8009460:	68ec      	ldreq	r4, [r5, #12]
 8009462:	e7da      	b.n	800941a <_fflush_r+0x22>
 8009464:	0800aa84 	.word	0x0800aa84
 8009468:	0800aaa4 	.word	0x0800aaa4
 800946c:	0800aa64 	.word	0x0800aa64

08009470 <std>:
 8009470:	2300      	movs	r3, #0
 8009472:	b510      	push	{r4, lr}
 8009474:	4604      	mov	r4, r0
 8009476:	e9c0 3300 	strd	r3, r3, [r0]
 800947a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800947e:	6083      	str	r3, [r0, #8]
 8009480:	8181      	strh	r1, [r0, #12]
 8009482:	6643      	str	r3, [r0, #100]	; 0x64
 8009484:	81c2      	strh	r2, [r0, #14]
 8009486:	6183      	str	r3, [r0, #24]
 8009488:	4619      	mov	r1, r3
 800948a:	2208      	movs	r2, #8
 800948c:	305c      	adds	r0, #92	; 0x5c
 800948e:	f7fd fb77 	bl	8006b80 <memset>
 8009492:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <std+0x38>)
 8009494:	6224      	str	r4, [r4, #32]
 8009496:	6263      	str	r3, [r4, #36]	; 0x24
 8009498:	4b04      	ldr	r3, [pc, #16]	; (80094ac <std+0x3c>)
 800949a:	62a3      	str	r3, [r4, #40]	; 0x28
 800949c:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <std+0x40>)
 800949e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094a0:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <std+0x44>)
 80094a2:	6323      	str	r3, [r4, #48]	; 0x30
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	bf00      	nop
 80094a8:	080097bd 	.word	0x080097bd
 80094ac:	080097df 	.word	0x080097df
 80094b0:	08009817 	.word	0x08009817
 80094b4:	0800983b 	.word	0x0800983b

080094b8 <_cleanup_r>:
 80094b8:	4901      	ldr	r1, [pc, #4]	; (80094c0 <_cleanup_r+0x8>)
 80094ba:	f000 b8af 	b.w	800961c <_fwalk_reent>
 80094be:	bf00      	nop
 80094c0:	080093f9 	.word	0x080093f9

080094c4 <__sfmoreglue>:
 80094c4:	2268      	movs	r2, #104	; 0x68
 80094c6:	b570      	push	{r4, r5, r6, lr}
 80094c8:	1e4d      	subs	r5, r1, #1
 80094ca:	4355      	muls	r5, r2
 80094cc:	460e      	mov	r6, r1
 80094ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094d2:	f7fd fbc5 	bl	8006c60 <_malloc_r>
 80094d6:	4604      	mov	r4, r0
 80094d8:	b140      	cbz	r0, 80094ec <__sfmoreglue+0x28>
 80094da:	2100      	movs	r1, #0
 80094dc:	e9c0 1600 	strd	r1, r6, [r0]
 80094e0:	300c      	adds	r0, #12
 80094e2:	60a0      	str	r0, [r4, #8]
 80094e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094e8:	f7fd fb4a 	bl	8006b80 <memset>
 80094ec:	4620      	mov	r0, r4
 80094ee:	bd70      	pop	{r4, r5, r6, pc}

080094f0 <__sfp_lock_acquire>:
 80094f0:	4801      	ldr	r0, [pc, #4]	; (80094f8 <__sfp_lock_acquire+0x8>)
 80094f2:	f7ff bc74 	b.w	8008dde <__retarget_lock_acquire_recursive>
 80094f6:	bf00      	nop
 80094f8:	20000a8d 	.word	0x20000a8d

080094fc <__sfp_lock_release>:
 80094fc:	4801      	ldr	r0, [pc, #4]	; (8009504 <__sfp_lock_release+0x8>)
 80094fe:	f7ff bc6f 	b.w	8008de0 <__retarget_lock_release_recursive>
 8009502:	bf00      	nop
 8009504:	20000a8d 	.word	0x20000a8d

08009508 <__sinit_lock_acquire>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__sinit_lock_acquire+0x8>)
 800950a:	f7ff bc68 	b.w	8008dde <__retarget_lock_acquire_recursive>
 800950e:	bf00      	nop
 8009510:	20000a8e 	.word	0x20000a8e

08009514 <__sinit_lock_release>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__sinit_lock_release+0x8>)
 8009516:	f7ff bc63 	b.w	8008de0 <__retarget_lock_release_recursive>
 800951a:	bf00      	nop
 800951c:	20000a8e 	.word	0x20000a8e

08009520 <__sinit>:
 8009520:	b510      	push	{r4, lr}
 8009522:	4604      	mov	r4, r0
 8009524:	f7ff fff0 	bl	8009508 <__sinit_lock_acquire>
 8009528:	69a3      	ldr	r3, [r4, #24]
 800952a:	b11b      	cbz	r3, 8009534 <__sinit+0x14>
 800952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009530:	f7ff bff0 	b.w	8009514 <__sinit_lock_release>
 8009534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009538:	6523      	str	r3, [r4, #80]	; 0x50
 800953a:	4b13      	ldr	r3, [pc, #76]	; (8009588 <__sinit+0x68>)
 800953c:	4a13      	ldr	r2, [pc, #76]	; (800958c <__sinit+0x6c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	62a2      	str	r2, [r4, #40]	; 0x28
 8009542:	42a3      	cmp	r3, r4
 8009544:	bf08      	it	eq
 8009546:	2301      	moveq	r3, #1
 8009548:	4620      	mov	r0, r4
 800954a:	bf08      	it	eq
 800954c:	61a3      	streq	r3, [r4, #24]
 800954e:	f000 f81f 	bl	8009590 <__sfp>
 8009552:	6060      	str	r0, [r4, #4]
 8009554:	4620      	mov	r0, r4
 8009556:	f000 f81b 	bl	8009590 <__sfp>
 800955a:	60a0      	str	r0, [r4, #8]
 800955c:	4620      	mov	r0, r4
 800955e:	f000 f817 	bl	8009590 <__sfp>
 8009562:	2200      	movs	r2, #0
 8009564:	2104      	movs	r1, #4
 8009566:	60e0      	str	r0, [r4, #12]
 8009568:	6860      	ldr	r0, [r4, #4]
 800956a:	f7ff ff81 	bl	8009470 <std>
 800956e:	2201      	movs	r2, #1
 8009570:	2109      	movs	r1, #9
 8009572:	68a0      	ldr	r0, [r4, #8]
 8009574:	f7ff ff7c 	bl	8009470 <std>
 8009578:	2202      	movs	r2, #2
 800957a:	2112      	movs	r1, #18
 800957c:	68e0      	ldr	r0, [r4, #12]
 800957e:	f7ff ff77 	bl	8009470 <std>
 8009582:	2301      	movs	r3, #1
 8009584:	61a3      	str	r3, [r4, #24]
 8009586:	e7d1      	b.n	800952c <__sinit+0xc>
 8009588:	0800a6ec 	.word	0x0800a6ec
 800958c:	080094b9 	.word	0x080094b9

08009590 <__sfp>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	4607      	mov	r7, r0
 8009594:	f7ff ffac 	bl	80094f0 <__sfp_lock_acquire>
 8009598:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <__sfp+0x84>)
 800959a:	681e      	ldr	r6, [r3, #0]
 800959c:	69b3      	ldr	r3, [r6, #24]
 800959e:	b913      	cbnz	r3, 80095a6 <__sfp+0x16>
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff ffbd 	bl	8009520 <__sinit>
 80095a6:	3648      	adds	r6, #72	; 0x48
 80095a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	d503      	bpl.n	80095b8 <__sfp+0x28>
 80095b0:	6833      	ldr	r3, [r6, #0]
 80095b2:	b30b      	cbz	r3, 80095f8 <__sfp+0x68>
 80095b4:	6836      	ldr	r6, [r6, #0]
 80095b6:	e7f7      	b.n	80095a8 <__sfp+0x18>
 80095b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095bc:	b9d5      	cbnz	r5, 80095f4 <__sfp+0x64>
 80095be:	4b16      	ldr	r3, [pc, #88]	; (8009618 <__sfp+0x88>)
 80095c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095c4:	60e3      	str	r3, [r4, #12]
 80095c6:	6665      	str	r5, [r4, #100]	; 0x64
 80095c8:	f7ff fc08 	bl	8008ddc <__retarget_lock_init_recursive>
 80095cc:	f7ff ff96 	bl	80094fc <__sfp_lock_release>
 80095d0:	2208      	movs	r2, #8
 80095d2:	4629      	mov	r1, r5
 80095d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095dc:	6025      	str	r5, [r4, #0]
 80095de:	61a5      	str	r5, [r4, #24]
 80095e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095e4:	f7fd facc 	bl	8006b80 <memset>
 80095e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095f0:	4620      	mov	r0, r4
 80095f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f4:	3468      	adds	r4, #104	; 0x68
 80095f6:	e7d9      	b.n	80095ac <__sfp+0x1c>
 80095f8:	2104      	movs	r1, #4
 80095fa:	4638      	mov	r0, r7
 80095fc:	f7ff ff62 	bl	80094c4 <__sfmoreglue>
 8009600:	4604      	mov	r4, r0
 8009602:	6030      	str	r0, [r6, #0]
 8009604:	2800      	cmp	r0, #0
 8009606:	d1d5      	bne.n	80095b4 <__sfp+0x24>
 8009608:	f7ff ff78 	bl	80094fc <__sfp_lock_release>
 800960c:	230c      	movs	r3, #12
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	e7ee      	b.n	80095f0 <__sfp+0x60>
 8009612:	bf00      	nop
 8009614:	0800a6ec 	.word	0x0800a6ec
 8009618:	ffff0001 	.word	0xffff0001

0800961c <_fwalk_reent>:
 800961c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009620:	4606      	mov	r6, r0
 8009622:	4688      	mov	r8, r1
 8009624:	2700      	movs	r7, #0
 8009626:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800962a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800962e:	f1b9 0901 	subs.w	r9, r9, #1
 8009632:	d505      	bpl.n	8009640 <_fwalk_reent+0x24>
 8009634:	6824      	ldr	r4, [r4, #0]
 8009636:	2c00      	cmp	r4, #0
 8009638:	d1f7      	bne.n	800962a <_fwalk_reent+0xe>
 800963a:	4638      	mov	r0, r7
 800963c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009640:	89ab      	ldrh	r3, [r5, #12]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d907      	bls.n	8009656 <_fwalk_reent+0x3a>
 8009646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800964a:	3301      	adds	r3, #1
 800964c:	d003      	beq.n	8009656 <_fwalk_reent+0x3a>
 800964e:	4629      	mov	r1, r5
 8009650:	4630      	mov	r0, r6
 8009652:	47c0      	blx	r8
 8009654:	4307      	orrs	r7, r0
 8009656:	3568      	adds	r5, #104	; 0x68
 8009658:	e7e9      	b.n	800962e <_fwalk_reent+0x12>

0800965a <__swhatbuf_r>:
 800965a:	b570      	push	{r4, r5, r6, lr}
 800965c:	460e      	mov	r6, r1
 800965e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009662:	4614      	mov	r4, r2
 8009664:	2900      	cmp	r1, #0
 8009666:	461d      	mov	r5, r3
 8009668:	b096      	sub	sp, #88	; 0x58
 800966a:	da08      	bge.n	800967e <__swhatbuf_r+0x24>
 800966c:	2200      	movs	r2, #0
 800966e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009672:	602a      	str	r2, [r5, #0]
 8009674:	061a      	lsls	r2, r3, #24
 8009676:	d410      	bmi.n	800969a <__swhatbuf_r+0x40>
 8009678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967c:	e00e      	b.n	800969c <__swhatbuf_r+0x42>
 800967e:	466a      	mov	r2, sp
 8009680:	f000 f902 	bl	8009888 <_fstat_r>
 8009684:	2800      	cmp	r0, #0
 8009686:	dbf1      	blt.n	800966c <__swhatbuf_r+0x12>
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800968e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009692:	425a      	negs	r2, r3
 8009694:	415a      	adcs	r2, r3
 8009696:	602a      	str	r2, [r5, #0]
 8009698:	e7ee      	b.n	8009678 <__swhatbuf_r+0x1e>
 800969a:	2340      	movs	r3, #64	; 0x40
 800969c:	2000      	movs	r0, #0
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	b016      	add	sp, #88	; 0x58
 80096a2:	bd70      	pop	{r4, r5, r6, pc}

080096a4 <__smakebuf_r>:
 80096a4:	898b      	ldrh	r3, [r1, #12]
 80096a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096a8:	079d      	lsls	r5, r3, #30
 80096aa:	4606      	mov	r6, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	d507      	bpl.n	80096c0 <__smakebuf_r+0x1c>
 80096b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	2301      	movs	r3, #1
 80096ba:	6163      	str	r3, [r4, #20]
 80096bc:	b002      	add	sp, #8
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	466a      	mov	r2, sp
 80096c2:	ab01      	add	r3, sp, #4
 80096c4:	f7ff ffc9 	bl	800965a <__swhatbuf_r>
 80096c8:	9900      	ldr	r1, [sp, #0]
 80096ca:	4605      	mov	r5, r0
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7fd fac7 	bl	8006c60 <_malloc_r>
 80096d2:	b948      	cbnz	r0, 80096e8 <__smakebuf_r+0x44>
 80096d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d4ef      	bmi.n	80096bc <__smakebuf_r+0x18>
 80096dc:	f023 0303 	bic.w	r3, r3, #3
 80096e0:	f043 0302 	orr.w	r3, r3, #2
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	e7e3      	b.n	80096b0 <__smakebuf_r+0xc>
 80096e8:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <__smakebuf_r+0x7c>)
 80096ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	6020      	str	r0, [r4, #0]
 80096f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	6120      	str	r0, [r4, #16]
 80096fa:	6163      	str	r3, [r4, #20]
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	b15b      	cbz	r3, 8009718 <__smakebuf_r+0x74>
 8009700:	4630      	mov	r0, r6
 8009702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009706:	f000 f8d1 	bl	80098ac <_isatty_r>
 800970a:	b128      	cbz	r0, 8009718 <__smakebuf_r+0x74>
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	f043 0301 	orr.w	r3, r3, #1
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	89a0      	ldrh	r0, [r4, #12]
 800971a:	4305      	orrs	r5, r0
 800971c:	81a5      	strh	r5, [r4, #12]
 800971e:	e7cd      	b.n	80096bc <__smakebuf_r+0x18>
 8009720:	080094b9 	.word	0x080094b9

08009724 <_malloc_usable_size_r>:
 8009724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009728:	1f18      	subs	r0, r3, #4
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbc      	itt	lt
 800972e:	580b      	ldrlt	r3, [r1, r0]
 8009730:	18c0      	addlt	r0, r0, r3
 8009732:	4770      	bx	lr

08009734 <_raise_r>:
 8009734:	291f      	cmp	r1, #31
 8009736:	b538      	push	{r3, r4, r5, lr}
 8009738:	4604      	mov	r4, r0
 800973a:	460d      	mov	r5, r1
 800973c:	d904      	bls.n	8009748 <_raise_r+0x14>
 800973e:	2316      	movs	r3, #22
 8009740:	6003      	str	r3, [r0, #0]
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800974a:	b112      	cbz	r2, 8009752 <_raise_r+0x1e>
 800974c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009750:	b94b      	cbnz	r3, 8009766 <_raise_r+0x32>
 8009752:	4620      	mov	r0, r4
 8009754:	f000 f830 	bl	80097b8 <_getpid_r>
 8009758:	462a      	mov	r2, r5
 800975a:	4601      	mov	r1, r0
 800975c:	4620      	mov	r0, r4
 800975e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009762:	f000 b817 	b.w	8009794 <_kill_r>
 8009766:	2b01      	cmp	r3, #1
 8009768:	d00a      	beq.n	8009780 <_raise_r+0x4c>
 800976a:	1c59      	adds	r1, r3, #1
 800976c:	d103      	bne.n	8009776 <_raise_r+0x42>
 800976e:	2316      	movs	r3, #22
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	2001      	movs	r0, #1
 8009774:	e7e7      	b.n	8009746 <_raise_r+0x12>
 8009776:	2400      	movs	r4, #0
 8009778:	4628      	mov	r0, r5
 800977a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800977e:	4798      	blx	r3
 8009780:	2000      	movs	r0, #0
 8009782:	e7e0      	b.n	8009746 <_raise_r+0x12>

08009784 <raise>:
 8009784:	4b02      	ldr	r3, [pc, #8]	; (8009790 <raise+0xc>)
 8009786:	4601      	mov	r1, r0
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	f7ff bfd3 	b.w	8009734 <_raise_r>
 800978e:	bf00      	nop
 8009790:	20000014 	.word	0x20000014

08009794 <_kill_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	2300      	movs	r3, #0
 8009798:	4d06      	ldr	r5, [pc, #24]	; (80097b4 <_kill_r+0x20>)
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	f7fa f98a 	bl	8003aba <_kill>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d102      	bne.n	80097b0 <_kill_r+0x1c>
 80097aa:	682b      	ldr	r3, [r5, #0]
 80097ac:	b103      	cbz	r3, 80097b0 <_kill_r+0x1c>
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	bf00      	nop
 80097b4:	20000a88 	.word	0x20000a88

080097b8 <_getpid_r>:
 80097b8:	f7fa b978 	b.w	8003aac <_getpid>

080097bc <__sread>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	460c      	mov	r4, r1
 80097c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c4:	f000 f894 	bl	80098f0 <_read_r>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	bfab      	itete	ge
 80097cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ce:	89a3      	ldrhlt	r3, [r4, #12]
 80097d0:	181b      	addge	r3, r3, r0
 80097d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097d6:	bfac      	ite	ge
 80097d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097da:	81a3      	strhlt	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__swrite>:
 80097de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	461f      	mov	r7, r3
 80097e4:	898b      	ldrh	r3, [r1, #12]
 80097e6:	4605      	mov	r5, r0
 80097e8:	05db      	lsls	r3, r3, #23
 80097ea:	460c      	mov	r4, r1
 80097ec:	4616      	mov	r6, r2
 80097ee:	d505      	bpl.n	80097fc <__swrite+0x1e>
 80097f0:	2302      	movs	r3, #2
 80097f2:	2200      	movs	r2, #0
 80097f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f8:	f000 f868 	bl	80098cc <_lseek_r>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	4632      	mov	r2, r6
 8009800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	4628      	mov	r0, r5
 8009808:	463b      	mov	r3, r7
 800980a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800980e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	f000 b817 	b.w	8009844 <_write_r>

08009816 <__sseek>:
 8009816:	b510      	push	{r4, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981e:	f000 f855 	bl	80098cc <_lseek_r>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	bf15      	itete	ne
 8009828:	6560      	strne	r0, [r4, #84]	; 0x54
 800982a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800982e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009832:	81a3      	strheq	r3, [r4, #12]
 8009834:	bf18      	it	ne
 8009836:	81a3      	strhne	r3, [r4, #12]
 8009838:	bd10      	pop	{r4, pc}

0800983a <__sclose>:
 800983a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983e:	f000 b813 	b.w	8009868 <_close_r>
	...

08009844 <_write_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	4611      	mov	r1, r2
 800984c:	2200      	movs	r2, #0
 800984e:	4d05      	ldr	r5, [pc, #20]	; (8009864 <_write_r+0x20>)
 8009850:	602a      	str	r2, [r5, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	f7fa f968 	bl	8003b28 <_write>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_write_r+0x1e>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_write_r+0x1e>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	20000a88 	.word	0x20000a88

08009868 <_close_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	2300      	movs	r3, #0
 800986c:	4d05      	ldr	r5, [pc, #20]	; (8009884 <_close_r+0x1c>)
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7fa f974 	bl	8003b60 <_close>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_close_r+0x1a>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_close_r+0x1a>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20000a88 	.word	0x20000a88

08009888 <_fstat_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	2300      	movs	r3, #0
 800988c:	4d06      	ldr	r5, [pc, #24]	; (80098a8 <_fstat_r+0x20>)
 800988e:	4604      	mov	r4, r0
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	602b      	str	r3, [r5, #0]
 8009896:	f7fa f96e 	bl	8003b76 <_fstat>
 800989a:	1c43      	adds	r3, r0, #1
 800989c:	d102      	bne.n	80098a4 <_fstat_r+0x1c>
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	b103      	cbz	r3, 80098a4 <_fstat_r+0x1c>
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	bd38      	pop	{r3, r4, r5, pc}
 80098a6:	bf00      	nop
 80098a8:	20000a88 	.word	0x20000a88

080098ac <_isatty_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	2300      	movs	r3, #0
 80098b0:	4d05      	ldr	r5, [pc, #20]	; (80098c8 <_isatty_r+0x1c>)
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	f7fa f96c 	bl	8003b94 <_isatty>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_isatty_r+0x1a>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_isatty_r+0x1a>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20000a88 	.word	0x20000a88

080098cc <_lseek_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4604      	mov	r4, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	4611      	mov	r1, r2
 80098d4:	2200      	movs	r2, #0
 80098d6:	4d05      	ldr	r5, [pc, #20]	; (80098ec <_lseek_r+0x20>)
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7fa f964 	bl	8003ba8 <_lseek>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_lseek_r+0x1e>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_lseek_r+0x1e>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	20000a88 	.word	0x20000a88

080098f0 <_read_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	2200      	movs	r2, #0
 80098fa:	4d05      	ldr	r5, [pc, #20]	; (8009910 <_read_r+0x20>)
 80098fc:	602a      	str	r2, [r5, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	f7fa f8f5 	bl	8003aee <_read>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_read_r+0x1e>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_read_r+0x1e>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	20000a88 	.word	0x20000a88

08009914 <_init>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	bf00      	nop
 8009918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800991a:	bc08      	pop	{r3}
 800991c:	469e      	mov	lr, r3
 800991e:	4770      	bx	lr

08009920 <_fini>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	bf00      	nop
 8009924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009926:	bc08      	pop	{r3}
 8009928:	469e      	mov	lr, r3
 800992a:	4770      	bx	lr
